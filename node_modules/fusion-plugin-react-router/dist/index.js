'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));
var server = require('react-router-dom');
var history = require('history');
var fusionPluginUniversalEvents = require('fusion-plugin-universal-events');
var fusionCore = require('fusion-core');

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
class Status extends React__default.Component {
  constructor(props, context) {
    super(props, context);
    const {
      router: {
        staticContext
      }
    } = context;

    if (staticContext && staticContext.setCode) {
      staticContext.setCode(parseInt(this.props.code, 10));
    }
  }

  render() {
    const children = this.props && this.props.children;
    return Array.isArray(children) ? children[0] : children;
  }

}
Status.contextTypes = {
  router: PropTypes.shape({
    staticContext: PropTypes.object
  })
};
const NotFound = props => React__default.createElement(Status, {
  code: 404
}, props.children);

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
class Redirect extends React__default.Component {
  constructor(props, context) {
    super(props, context);
    if (this.isStatic(context)) this.perform();
  }

  componentDidMount() {
    if (!this.isStatic()) this.perform();
  }

  isStatic(context = this.context) {
    return context.router && context.router.staticContext;
  }

  perform() {
    const {
      history: history$$1,
      staticContext
    } = this.context.router;
    const {
      push,
      to,
      code
    } = this.props;

    if (true && staticContext) {
      staticContext.setCode(parseInt(code, 10));
      staticContext.redirect(to);
      return;
    }

    if (push) {
      history$$1.push(to);
    } else {
      history$$1.replace(to);
    }
  }

  render() {
    return null;
  }

} // $FlowFixMe

Redirect.defaultProps = {
  push: false,
  code: 307
};
Redirect.contextTypes = {
  router: PropTypes.shape({
    history: PropTypes.shape({
      push: PropTypes.func.isRequired,
      replace: PropTypes.func.isRequired
    }).isRequired,
    staticContext: PropTypes.object
  }).isRequired
};

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */

class ServerRouter extends React__default.Component {
  getChildContext() {
    return {
      router: {
        staticContext: this.props.context || {}
      },
      onRoute: routeData => this.props.onRoute(routeData)
    };
  }

  render() {
    const {
      Provider,
      history: history$$1,
      basename,
      children
    } = this.props;
    return React__default.createElement(Provider, {
      basename: basename,
      history: history$$1
    }, children);
  }

} // $FlowFixMe

ServerRouter.defaultProps = {
  basename: '',
  context: {},
  Provider: server.Router,
  onRoute: () => {}
};
ServerRouter.childContextTypes = {
  router: () => {},
  onRoute: () => {}
};

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
const isEmptyChildren = children => React__default.Children.count(children) === 0;

function Route(props, context) {
  const {
    trackingId,
    component,
    render,
    children
  } = props,
        remainingProps = _objectWithoutProperties(props, ["trackingId", "component", "render", "children"]);

  return React__default.createElement(server.Route, _extends({}, remainingProps, {
    // eslint-disable-next-line react/no-children-prop
    children: routeProps => {
      const {
        match
      } = routeProps;

      if (match && match.isExact) {
        context.onRoute({
          page: match.path,
          title: trackingId || match.path
        });
      }

      if (component) return match ? React__default.createElement(component, routeProps) : null;
      if (render) return match ? render(routeProps) : null;
      if (typeof children === 'function') return children(routeProps);
      if (children && !isEmptyChildren(children)) return React__default.Children.only(children);
      return null;
    }
  }));
}

Route.contextTypes = {
  onRoute: PropTypes.func.isRequired
};
Route.displayName = 'FusionRoute';

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
class BrowserRouter extends React__default.Component {
  constructor(props = {}, context) {
    super(props, context);
    this.lastTitle = null;
  }

  getChildContext() {
    const {
      __IS_PREPARE__
    } = this.context;
    return {
      onRoute: routeData => {
        if (routeData.title !== this.lastTitle && !__IS_PREPARE__) {
          this.lastTitle = routeData.title;
          this.props.onRoute(routeData);
        }
      }
    };
  }

  render() {
    const {
      Provider,
      history: history$$1,
      basename
    } = this.props;
    return React__default.createElement(Provider, {
      basename: basename,
      history: history$$1
    }, this.props.children);
  }

}

BrowserRouter.propTypes = {
  children: PropTypes.node,
  onRoute: PropTypes.func,
  history: PropTypes.object,
  Provider: PropTypes.any,
  basename: PropTypes.string
};
BrowserRouter.contextTypes = {
  __IS_PREPARE__: PropTypes.bool
};
BrowserRouter.childContextTypes = {
  onRoute: PropTypes.func.isRequired
}; // $FlowFixMe

BrowserRouter.defaultProps = {
  onRoute: () => {},
  Provider: server.Router
};

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
const addLeadingSlash = path => path.charAt(0) === '/' ? path : '/' + path;

const addRoutePrefix = (location, prefix) => {
  if (!prefix) return location;

  if (typeof location === 'string') {
    return `${prefix}${addLeadingSlash(location)}`;
  } else {
    return _objectSpread({}, location, {
      pathname: `${prefix}${addLeadingSlash(location.pathname)}`
    });
  }
};

const removeRoutePrefix = (location, prefix) => {
  if (!prefix) return location;
  const pathname = typeof location === 'string' ? location : location.pathname;
  const hasPrefix = (pathname + '/').indexOf(prefix + '/') === 0;
  const unprefixedPathname = pathname.slice(prefix.length);
  const relativePathname = hasPrefix ? unprefixedPathname : pathname;

  if (typeof location === 'string') {
    return relativePathname;
  } else {
    return _objectSpread({}, location, {
      pathname: relativePathname
    });
  }
};

const createLocation = (path, prefix) => {
  const unprefixedPath = removeRoutePrefix(path, prefix);
  return history.parsePath(unprefixedPath);
};

const createPrefixedURL = (location, prefix) => {
  if (typeof location === 'string') {
    return addRoutePrefix(location, prefix);
  } else {
    return history.createPath(addRoutePrefix(location, prefix));
  }
};
/**
 * @param {string|object} location
 * @param {string} prefix
 * @returns {string}
 */


const createURL = (location, prefix) => {
  if (typeof location === 'string') {
    return removeRoutePrefix(location, prefix);
  } else {
    return history.createPath(removeRoutePrefix(location, prefix));
  }
};

const staticHandler = methodName => () => {
  throw new Error(`You cannot ${methodName} with server side <Router>`);
};

const noop = () => {};

function createServerHistory(basename, context, location) {
  function createHref(location) {
    return createPrefixedURL(location, basename);
  }

  function push(path) {
    context.action = 'PUSH';
    context.location = createLocation(path, basename); // $FlowFixMe

    context.url = createURL(path, basename);
  }

  function replace(path) {
    context.action = 'REPLACE';
    context.location = createLocation(path, basename); // $FlowFixMe

    context.url = createURL(path, basename);
  }

  const history$$1 = {
    length: 0,
    createHref,
    action: 'POP',
    location: createLocation(location, basename),
    push,
    replace,
    go: staticHandler('go'),
    goBack: staticHandler('back'),
    goForward: staticHandler('forward'),
    listen: () => noop
  };
  return history$$1;
}

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
const RouterProviderToken = fusionCore.createToken('RouterProvider');
const RouterToken = fusionCore.createToken('Router');
const Router$$1 = ServerRouter;
var plugin = fusionCore.createPlugin({
  deps: {
    emitter: fusionPluginUniversalEvents.UniversalEventsToken.optional,
    Provider: RouterProviderToken.optional
  },
  middleware: ({
    emitter,
    Provider = server.Router
  }, self) => {
    return async (ctx, next) => {
      const prefix = ctx.prefix || '';

      if (!ctx.element) {
        return next();
      }

      const myAPI = self.from(ctx);

      {
        let pageData = {
          title: ctx.path,
          page: ctx.path
        };
        const context = {
          action: null,
          location: null,
          url: null,
          setCode: code => {
            ctx.status = code;
          },
          redirect: url => {
            ctx.redirect(url);
          }
        }; // Expose the history object

        const history$$1 = createServerHistory(prefix, context, prefix + ctx.url);
        myAPI.history = history$$1;
        ctx.element = React.createElement(Router$$1, {
          history: history$$1,
          Provider: Provider,
          onRoute: d => {
            pageData = d;
          },
          basename: prefix,
          context: context
        }, ctx.element);
        return next().then(() => {
          ctx.template.body.push(fusionCore.html`<script id="__ROUTER_DATA__" type="application/json">${JSON.stringify(pageData)}</script>`);

          if (emitter) {
            const emitTiming = type => timing => {
              emitter.emit(type, {
                title: pageData.title,
                page: pageData.page,
                status: ctx.status,
                timing
              });
            };

            emitter.from(ctx).map(payload => {
              if (payload && typeof payload === 'object') {
                payload.__url__ = pageData.title;
              }

              return payload;
            });
            ctx.timing.end.then(timing => {
              emitTiming('pageview:server')(timing);
              ctx.timing.render.then(emitTiming('render:server'));
            });
          }
        });
      }
    };
  },

  provides() {
    return {
      from: fusionCore.memoize(() => {
        const api = {
          history: null
        };
        return api;
      })
    };
  }

});

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
const BrowserRouter$1 = server.BrowserRouter;
const HashRouter = server.HashRouter;
const Link = server.Link;
const matchPath = server.matchPath;
const MemoryRouter = server.MemoryRouter;
const NavLink = server.NavLink;
const Prompt = server.Prompt;
const Route$1 = Route;
const Router$1 = ServerRouter;
const Switch = server.Switch;
const withRouter = server.withRouter;
const NotFound$1 = NotFound;
const Redirect$1 = Redirect;
const Status$1 = Status;

exports.default = plugin;
exports.BrowserRouter = BrowserRouter$1;
exports.HashRouter = HashRouter;
exports.Link = Link;
exports.matchPath = matchPath;
exports.MemoryRouter = MemoryRouter;
exports.NavLink = NavLink;
exports.NotFound = NotFound$1;
exports.Prompt = Prompt;
exports.Redirect = Redirect$1;
exports.Route = Route$1;
exports.Router = Router$1;
exports.Status = Status$1;
exports.Switch = Switch;
exports.withRouter = withRouter;
exports.RouterProviderToken = RouterProviderToken;
exports.RouterToken = RouterToken;
//# sourceMappingURL=index.js.map
