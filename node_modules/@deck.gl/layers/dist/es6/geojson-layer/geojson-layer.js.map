{"version":3,"sources":["../../../src/geojson-layer/geojson-layer.js"],"names":["CompositeLayer","ScatterplotLayer","PathLayer","SolidPolygonLayer","getGeojsonFeatures","separateGeojsonFeatures","unwrapSourceFeature","unwrapSourceFeatureIndex","defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","wireframe","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","elevationScale","pointRadiusScale","pointRadiusMinPixels","pointRadiusMaxPixels","lineDashJustified","fp64","getLineColor","getFillColor","getRadius","getLineWidth","getLineDashArray","getElevation","subLayers","PointLayer","LineLayer","PolygonLayer","lightSettings","getCoordinates","f","geometry","coordinates","unwrappingAccessor","accessor","feature","GeoJsonLayer","initializeState","state","features","updateState","oldProps","props","changeFlags","dataChanged","data","getPickingInfo","info","sourceLayer","Object","assign","object","index","renderLayers","pointFeatures","lineFeatures","polygonFeatures","polygonOutlineFeatures","transitions","updateTriggers","drawPoints","length","drawLines","hasPolygonLines","hasPolygon","polygonFillLayer","getSubLayerProps","id","getPolygon","polygonLineLayer","getColor","getWidth","getDashArray","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","dashJustified","getPath","pathLayer","pointLayer","radiusScale","radiusMinPixels","radiusMaxPixels","getPosition","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer} from '@deck.gl/core';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport PathLayer from '../path-layer/path-layer';\n// Use primitive layer to avoid \"Composite Composite\" layers for now\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\n\nimport {\n  getGeojsonFeatures,\n  separateGeojsonFeatures,\n  unwrapSourceFeature,\n  unwrapSourceFeatureIndex\n} from './geojson';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  elevationScale: 1,\n\n  pointRadiusScale: 1,\n  pointRadiusMinPixels: 0, //  min point radius in pixels\n  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER, // max point radius in pixels\n\n  lineDashJustified: false,\n  fp64: false,\n\n  // Line and polygon outline color\n  getLineColor: defaultLineColor,\n  // Point and polygon fill color\n  getFillColor: defaultFillColor,\n  // Point radius\n  getRadius: 1,\n  // Line and polygon outline accessors\n  getLineWidth: 1,\n  // Line dash array accessor\n  getLineDashArray: null,\n  // Polygon extrusion accessor\n  getElevation: 1000,\n\n  subLayers: {\n    PointLayer: ScatterplotLayer,\n    LineLayer: PathLayer,\n    PolygonLayer: SolidPolygonLayer\n  },\n\n  // Optional settings for 'lighting' shader module\n  lightSettings: {}\n};\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\n/**\n * Unwraps the real source feature passed into props and passes as the argument to `accessor`.\n */\nfunction unwrappingAccessor(accessor) {\n  if (typeof accessor !== 'function') return accessor;\n\n  return feature => accessor(unwrapSourceFeature(feature));\n}\n\nexport default class GeoJsonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      features: {}\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    if (changeFlags.dataChanged) {\n      const {data} = props;\n      const features = getGeojsonFeatures(data);\n      this.state.features = separateGeojsonFeatures(features);\n    }\n  }\n\n  getPickingInfo({info, sourceLayer}) {\n    // `info.index` is the index within the particular sub-layer\n    // We want to expose the index of the feature the user provided\n\n    return Object.assign(info, {\n      // override object with picked feature\n      object: info.object ? unwrapSourceFeature(info.object) : info.object,\n      index: info.object ? unwrapSourceFeatureIndex(info.object) : info.index\n    });\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    const {features} = this.state;\n    const {pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures} = features;\n\n    // Layer composition props\n    const {\n      stroked,\n      filled,\n      extruded,\n      wireframe,\n      subLayers,\n      lightSettings,\n      transitions\n    } = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      pointRadiusScale,\n      pointRadiusMinPixels,\n      pointRadiusMaxPixels,\n      elevationScale,\n      lineDashJustified,\n      fp64\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getLineColor,\n      getFillColor,\n      getRadius,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      updateTriggers\n    } = this.props;\n\n    const drawPoints = pointFeatures && pointFeatures.length > 0;\n    const drawLines = lineFeatures && lineFeatures.length > 0;\n    const hasPolygonLines = polygonOutlineFeatures && polygonOutlineFeatures.length > 0;\n    const hasPolygon = polygonFeatures && polygonFeatures.length > 0;\n\n    // Filled Polygon Layer\n    const polygonFillLayer =\n      hasPolygon &&\n      new subLayers.PolygonLayer(\n        this.getSubLayerProps({\n          id: 'polygon-fill',\n          updateTriggers: {\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data: polygonFeatures,\n          fp64,\n          extruded,\n          elevationScale,\n          filled,\n          wireframe,\n          lightSettings,\n          getPolygon: getCoordinates,\n          getElevation: unwrappingAccessor(getElevation),\n          getFillColor: unwrappingAccessor(getFillColor),\n          getLineColor: unwrappingAccessor(getLineColor),\n\n          transitions: transitions && {\n            getPolygon: transitions.geometry,\n            getElevation: transitions.getElevation,\n            getFillColor: transitions.getFillColor,\n            getLineColor: transitions.getLineColor\n          }\n        }\n      );\n\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      hasPolygonLines &&\n      new subLayers.LineLayer(\n        this.getSubLayerProps({\n          id: 'polygon-outline',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: polygonOutlineFeatures,\n\n          fp64,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          getPath: getCoordinates,\n          getColor: unwrappingAccessor(getLineColor),\n          getWidth: unwrappingAccessor(getLineWidth),\n          getDashArray: unwrappingAccessor(getLineDashArray),\n\n          transitions: transitions && {\n            getPath: transitions.geometry,\n            getColor: transitions.getLineColor,\n            getWidth: transitions.getLineWidth\n          }\n        }\n      );\n\n    const pathLayer =\n      drawLines &&\n      new subLayers.LineLayer(\n        this.getSubLayerProps({\n          id: 'line-paths',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: lineFeatures,\n\n          fp64,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          getPath: getCoordinates,\n          getColor: unwrappingAccessor(getLineColor),\n          getWidth: unwrappingAccessor(getLineWidth),\n          getDashArray: unwrappingAccessor(getLineDashArray),\n\n          transitions: transitions && {\n            getPath: transitions.geometry,\n            getColor: transitions.getLineColor,\n            getWidth: transitions.getLineWidth\n          }\n        }\n      );\n\n    const pointLayer =\n      drawPoints &&\n      new subLayers.PointLayer(\n        this.getSubLayerProps({\n          id: 'points',\n          updateTriggers: {\n            getColor: updateTriggers.getFillColor,\n            getRadius: updateTriggers.getRadius\n          }\n        }),\n        {\n          data: pointFeatures,\n\n          fp64,\n          radiusScale: pointRadiusScale,\n          radiusMinPixels: pointRadiusMinPixels,\n          radiusMaxPixels: pointRadiusMaxPixels,\n\n          getPosition: getCoordinates,\n          getColor: unwrappingAccessor(getFillColor),\n          getRadius: unwrappingAccessor(getRadius),\n\n          transitions: transitions && {\n            getPosition: transitions.geometry,\n            getColor: transitions.getFillColor,\n            getRadius: transitions.getRadius\n          }\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonFillLayer,\n      polygonLineLayer,\n      pathLayer,\n      pointLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonFillLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;\n"],"file":"geojson-layer.js"}