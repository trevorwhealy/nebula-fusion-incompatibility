{"version":3,"sources":["../../../src/solid-polygon-layer/solid-polygon-layer.js"],"names":["Layer","GL","Model","Geometry","hasFeature","FEATURES","PolygonTesselator","vs","fs","defaultLineColor","defaultFillColor","defaultProps","filled","extruded","wireframe","fp64","elevationScale","getPolygon","f","polygon","getElevation","getFillColor","getLineColor","lightSettings","SIDE_FILL_POSITIONS","Float32Array","SIDE_WIRE_POSITIONS","ATTRIBUTE_OVERRIDES","TOP","SIDE","instanced","WIRE","ATTRIBUTE_MAPS","indices","positions","positions64xyLow","elevations","colors","pickingColors","nextPositions","nextPositions64xyLow","ATTRIBUTE_TRANSITION","enter","value","chunk","length","subarray","SolidPolygonLayer","getShaders","projectModule","use64bitProjection","modules","initializeState","gl","context","setState","numInstances","IndexType","ELEMENT_INDEX_UINT32","Uint32Array","Uint16Array","attributeManager","getAttributeManager","noAlloc","add","size","isIndexed","update","calculateIndices","transition","accessor","calculatePositions","calculatePositionsLow","calculateNextPositions","calculateNextPositionsLow","calculateElevations","fillColors","alias","type","UNSIGNED_BYTE","calculateFillColors","defaultValue","lineColors","calculateLineColors","calculatePickingColors","draw","uniforms","props","renderUniforms","Object","assign","state","models","forEach","model","render","updateState","updateParams","updateGeometry","oldProps","regenerateModels","delete","_getModels","invalidateAll","changeFlags","geometryConfigChanged","dataChanged","updateTriggersChanged","all","polygons","data","map","polygonTesselator","_getPolygonTesselator","pointCount","updatePositions","use64bitPositions","updateAttributes","attributes","getChangedAttributes","clearChangedFlags","modelsByName","modelName","setVertexCount","numVertex","setInstanceCount","attributeMap","attributeOverride","newAttributes","attributeName","attribute","buffer","getBuffer","setAttributes","id","geometry","drawMode","TRIANGLES","vertexPositions","isInstanced","isSideVertex","vertexCount","shaderCache","TRIANGLE_STRIP","LINE_STRIP","filter","Boolean","bufferLayout","isFP64","constant","polygonIndex","elevation","key","getColor","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from '@deck.gl/core';\nimport GL from 'luma.gl/constants';\nimport {Model, Geometry, hasFeature, FEATURES} from 'luma.gl';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport {PolygonTesselator} from './polygon-tesselator';\n\nimport vs from './solid-polygon-layer-vertex.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\n\nconst defaultProps = {\n  filled: true,\n  // Whether to extrude\n  extruded: false,\n  // Whether to draw a GL.LINES wireframe of the polygon\n  wireframe: false,\n  fp64: false,\n\n  // elevation multiplier\n  elevationScale: 1,\n\n  // Accessor for polygon geometry\n  getPolygon: f => f.polygon,\n  // Accessor for extrusion height\n  getElevation: 1000,\n  // Accessor for colors\n  getFillColor: defaultFillColor,\n  getLineColor: defaultLineColor,\n\n  // Optional settings for 'lighting' shader module\n  lightSettings: {}\n};\n\n// Side model attributes\nconst SIDE_FILL_POSITIONS = new Float32Array([\n  // top left corner\n  0,\n  1,\n  // bottom left corner\n  0,\n  0,\n  // top right corner\n  1,\n  1,\n  // bottom right corner\n  1,\n  0\n]);\nconst SIDE_WIRE_POSITIONS = new Float32Array([\n  // top right corner\n  1,\n  1,\n  // top left corner\n  0,\n  1,\n  // bottom left corner\n  0,\n  0,\n  // bottom right corner\n  1,\n  0\n]);\n\n// Model types\nconst ATTRIBUTE_OVERRIDES = {\n  TOP: null,\n  SIDE: {instanced: 1},\n  WIRE: {instanced: 1}\n};\n\nconst ATTRIBUTE_MAPS = {\n  TOP: {\n    indices: 'indices',\n    positions: 'positions',\n    positions64xyLow: 'positions64xyLow',\n    elevations: 'elevations',\n    colors: 'fillColors',\n    pickingColors: 'pickingColors'\n  },\n  SIDE: {\n    positions: 'positions',\n    positions64xyLow: 'positions64xyLow',\n    nextPositions: 'nextPositions',\n    nextPositions64xyLow: 'nextPositions64xyLow',\n    elevations: 'elevations',\n    colors: 'fillColors',\n    pickingColors: 'pickingColors'\n  },\n  WIRE: {\n    positions: 'positions',\n    positions64xyLow: 'positions64xyLow',\n    nextPositions: 'nextPositions',\n    nextPositions64xyLow: 'nextPositions64xyLow',\n    elevations: 'elevations',\n    colors: 'lineColors',\n    pickingColors: 'pickingColors'\n  }\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class SolidPolygonLayer extends Layer {\n  getShaders() {\n    const projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'lighting', 'picking']};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    this.setState({\n      numInstances: 0,\n      IndexType: hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n    });\n\n    const attributeManager = this.getAttributeManager();\n    const noAlloc = true;\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {size: 1, isIndexed: true, update: this.calculateIndices, noAlloc},\n      positions: {\n        size: 3,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        update: this.calculatePositions,\n        noAlloc\n      },\n      positions64xyLow: {size: 2, update: this.calculatePositionsLow},\n      nextPositions: {\n        size: 3,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        update: this.calculateNextPositions,\n        noAlloc\n      },\n      nextPositions64xyLow: {size: 2, update: this.calculateNextPositionsLow},\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        update: this.calculateElevations,\n        noAlloc\n      },\n      fillColors: {\n        alias: 'colors',\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        update: this.calculateFillColors,\n        defaultValue: defaultFillColor,\n        noAlloc\n      },\n      lineColors: {\n        alias: 'colors',\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        update: this.calculateLineColors,\n        defaultValue: defaultLineColor,\n        noAlloc\n      },\n      pickingColors: {size: 3, type: GL.UNSIGNED_BYTE, update: this.calculatePickingColors, noAlloc}\n    });\n    /* eslint-enable max-len */\n  }\n\n  draw({uniforms}) {\n    const {extruded, elevationScale} = this.props;\n\n    const renderUniforms = Object.assign({}, uniforms, {\n      extruded: extruded ? 1.0 : 0.0,\n      elevationScale\n    });\n\n    this.state.models.forEach(model => {\n      model.render(renderUniforms);\n    });\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps} = updateParams;\n    const attributeManager = this.getAttributeManager();\n\n    const regenerateModels =\n      props.fp64 !== oldProps.fp64 ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded ||\n      props.wireframe !== oldProps.wireframe;\n\n    if (regenerateModels) {\n      if (this.state.models) {\n        this.state.models.forEach(model => model.delete());\n      }\n\n      this.setState(this._getModels(this.context.gl));\n      attributeManager.invalidateAll();\n    }\n  }\n\n  updateGeometry({props, oldProps, changeFlags}) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      // TODO - avoid creating a temporary array here: let the tesselator iterate\n      const polygons = props.data.map(props.getPolygon);\n      const polygonTesselator = this._getPolygonTesselator(polygons, this.state.IndexType);\n\n      this.setState({\n        polygonTesselator,\n        numInstances: polygonTesselator.pointCount\n      });\n\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (\n      geometryConfigChanged ||\n      props.extruded !== oldProps.extruded ||\n      props.fp64 !== oldProps.fp64\n    ) {\n      this.state.polygonTesselator.updatePositions({\n        fp64: this.use64bitPositions(),\n        extruded: props.extruded\n      });\n    }\n  }\n\n  // \"Experimental\" method indended to make it easier to support non-nested arrays in subclasses\n  _getPolygonTesselator(polygons, IndexType) {\n    return new PolygonTesselator({polygons, IndexType: this.state.IndexType});\n  }\n\n  updateAttributes(props) {\n    super.updateAttributes(props);\n    const attributes = this.getAttributeManager().getChangedAttributes({clearChangedFlags: true});\n    const {modelsByName} = this.state;\n\n    for (const modelName in modelsByName) {\n      const model = modelsByName[modelName];\n\n      if (modelName === 'TOP') {\n        model.setVertexCount(this.state.numVertex);\n      } else {\n        model.setInstanceCount(this.state.numInstances);\n      }\n\n      const attributeMap = ATTRIBUTE_MAPS[modelName];\n      const attributeOverride = ATTRIBUTE_OVERRIDES[modelName];\n      const newAttributes = {};\n      for (const attributeName in attributeMap) {\n        const attribute = attributes[attributeMap[attributeName]];\n\n        if (attribute) {\n          // Apply layout override to the attribute.\n          newAttributes[attributeName] = attributeOverride\n            ? Object.assign({}, attribute, attributeOverride, {\n                buffer: attribute.getBuffer()\n              })\n            : attribute;\n        }\n      }\n      model.setAttributes(newAttributes);\n    }\n  }\n\n  _getModels(gl) {\n    const {id, filled, extruded, wireframe} = this.props;\n\n    const models = {};\n\n    if (filled) {\n      models.TOP = new Model(\n        gl,\n        Object.assign({}, this.getShaders(), {\n          id: `${id}-top`,\n          geometry: new Geometry({\n            drawMode: GL.TRIANGLES,\n            attributes: {\n              vertexPositions: {size: 2, isInstanced: true, value: new Float32Array([0, 1])},\n              nextPositions: {size: 3, isInstanced: true, value: new Float32Array(3)},\n              nextPositions64xyLow: {size: 2, isInstanced: true, value: new Float32Array(2)}\n            }\n          }),\n          uniforms: {\n            isSideVertex: 0\n          },\n          vertexCount: 0,\n          isIndexed: true,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n    if (filled && extruded) {\n      models.SIDE = new Model(\n        gl,\n        Object.assign({}, this.getShaders(), {\n          id: `${id}-side`,\n          geometry: new Geometry({\n            drawMode: GL.TRIANGLE_STRIP,\n            vertexCount: 4,\n            attributes: {\n              vertexPositions: {size: 2, value: SIDE_FILL_POSITIONS}\n            }\n          }),\n          uniforms: {\n            isSideVertex: 1\n          },\n          isInstanced: 1,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n    if (extruded && wireframe) {\n      models.WIRE = new Model(\n        gl,\n        Object.assign({}, this.getShaders(), {\n          id: `${id}-wire`,\n          geometry: new Geometry({\n            drawMode: GL.LINE_STRIP,\n            vertexCount: 4,\n            attributes: {\n              vertexPositions: {size: 2, value: SIDE_WIRE_POSITIONS}\n            }\n          }),\n          uniforms: {\n            isSideVertex: 1\n          },\n          isInstanced: 1,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n\n    return {\n      models: [models.WIRE, models.SIDE, models.TOP].filter(Boolean),\n      modelsByName: models\n    };\n  }\n\n  calculateIndices(attribute) {\n    attribute.value = this.state.polygonTesselator.indices();\n    const numVertex = attribute.value.length / attribute.size;\n    this.setState({numVertex});\n  }\n\n  calculatePositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n    attribute.value = polygonTesselator.positions();\n  }\n  calculatePositionsLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    attribute.value = this.state.polygonTesselator.positions64xyLow();\n  }\n\n  calculateNextPositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n    attribute.value = polygonTesselator.nextPositions();\n  }\n  calculateNextPositionsLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    attribute.value = this.state.polygonTesselator.nextPositions64xyLow();\n  }\n\n  calculateElevations(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n\n    const {extruded, getElevation} = this.props;\n    if (extruded && typeof getElevation === 'function') {\n      attribute.constant = false;\n      attribute.value = polygonTesselator.elevations({\n        getElevation: polygonIndex => getElevation(this.props.data[polygonIndex])\n      });\n    } else {\n      const elevation = extruded ? getElevation : 0;\n      attribute.constant = true;\n      attribute.value = new Float32Array([elevation]);\n    }\n  }\n\n  calculateFillColors(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n    attribute.value = polygonTesselator.colors({\n      key: 'fillColors',\n      getColor: polygonIndex => this.props.getFillColor(this.props.data[polygonIndex])\n    });\n  }\n  calculateLineColors(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n    attribute.value = polygonTesselator.colors({\n      key: 'lineColors',\n      getColor: polygonIndex => this.props.getLineColor(this.props.data[polygonIndex])\n    });\n  }\n\n  // Override the default picking colors calculation\n  calculatePickingColors(attribute) {\n    attribute.value = this.state.polygonTesselator.pickingColors();\n  }\n}\n\nSolidPolygonLayer.layerName = 'SolidPolygonLayer';\nSolidPolygonLayer.defaultProps = defaultProps;\n"],"file":"solid-polygon-layer.js"}