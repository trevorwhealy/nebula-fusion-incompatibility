{"version":3,"sources":["../../../src/solid-polygon-layer/solid-polygon-layer.js"],"names":["Layer","GL","Model","Geometry","hasFeature","FEATURES","PolygonTesselator","vs","fs","defaultLineColor","defaultFillColor","defaultProps","filled","extruded","wireframe","fp64","elevationScale","getPolygon","f","polygon","getElevation","getFillColor","getLineColor","lightSettings","SIDE_FILL_POSITIONS","Float32Array","SIDE_WIRE_POSITIONS","ATTRIBUTE_OVERRIDES","TOP","SIDE","instanced","WIRE","ATTRIBUTE_MAPS","indices","positions","positions64xyLow","elevations","colors","pickingColors","nextPositions","nextPositions64xyLow","ATTRIBUTE_TRANSITION","enter","value","chunk","length","subarray","SolidPolygonLayer","projectModule","use64bitProjection","modules","gl","context","setState","numInstances","IndexType","ELEMENT_INDEX_UINT32","Uint32Array","Uint16Array","attributeManager","getAttributeManager","noAlloc","add","size","isIndexed","update","calculateIndices","transition","accessor","calculatePositions","calculatePositionsLow","calculateNextPositions","calculateNextPositionsLow","calculateElevations","fillColors","alias","type","UNSIGNED_BYTE","calculateFillColors","defaultValue","lineColors","calculateLineColors","calculatePickingColors","uniforms","props","renderUniforms","Object","assign","state","models","forEach","model","render","updateParams","updateGeometry","oldProps","regenerateModels","delete","_getModels","invalidateAll","changeFlags","geometryConfigChanged","dataChanged","updateTriggersChanged","all","polygons","data","map","polygonTesselator","_getPolygonTesselator","pointCount","updatePositions","use64bitPositions","attributes","getChangedAttributes","clearChangedFlags","modelsByName","modelName","setVertexCount","numVertex","setInstanceCount","attributeMap","attributeOverride","newAttributes","attributeName","attribute","buffer","getBuffer","setAttributes","id","getShaders","geometry","drawMode","TRIANGLES","vertexPositions","isInstanced","isSideVertex","vertexCount","shaderCache","TRIANGLE_STRIP","LINE_STRIP","filter","Boolean","bufferLayout","isFP64","constant","polygonIndex","elevation","key","getColor","layerName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,KAAR,QAAoB,eAApB;AACA,OAAOC,EAAP,MAAe,mBAAf;AACA,SAAQC,KAAR,EAAeC,QAAf,EAAyBC,UAAzB,EAAqCC,QAArC,QAAoD,SAApD,C,CAEA;;AACA,SAAQC,iBAAR,QAAgC,sBAAhC;AAEA,OAAOC,EAAP,MAAe,mCAAf;AACA,OAAOC,EAAP,MAAe,qCAAf;AAEA,IAAMC,mBAAmB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,CAAzB;AACA,IAAMC,mBAAmB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,CAAzB;AAEA,IAAMC,eAAe;AACnBC,UAAQ,IADW;AAEnB;AACAC,YAAU,KAHS;AAInB;AACAC,aAAW,KALQ;AAMnBC,QAAM,KANa;AAQnB;AACAC,kBAAgB,CATG;AAWnB;AACAC,cAAY;AAAA,WAAKC,EAAEC,OAAP;AAAA,GAZO;AAanB;AACAC,gBAAc,IAdK;AAenB;AACAC,gBAAcX,gBAhBK;AAiBnBY,gBAAcb,gBAjBK;AAmBnB;AACAc,iBAAe;AApBI,CAArB,C,CAuBA;;AACA,IAAMC,sBAAsB,IAAIC,YAAJ,CAAiB,CAC3C;AACA,CAF2C,EAG3C,CAH2C,EAI3C;AACA,CAL2C,EAM3C,CAN2C,EAO3C;AACA,CAR2C,EAS3C,CAT2C,EAU3C;AACA,CAX2C,EAY3C,CAZ2C,CAAjB,CAA5B;AAcA,IAAMC,sBAAsB,IAAID,YAAJ,CAAiB,CAC3C;AACA,CAF2C,EAG3C,CAH2C,EAI3C;AACA,CAL2C,EAM3C,CAN2C,EAO3C;AACA,CAR2C,EAS3C,CAT2C,EAU3C;AACA,CAX2C,EAY3C,CAZ2C,CAAjB,CAA5B,C,CAeA;;AACA,IAAME,sBAAsB;AAC1BC,OAAK,IADqB;AAE1BC,QAAM;AAACC,eAAW;AAAZ,GAFoB;AAG1BC,QAAM;AAACD,eAAW;AAAZ;AAHoB,CAA5B;AAMA,IAAME,iBAAiB;AACrBJ,OAAK;AACHK,aAAS,SADN;AAEHC,eAAW,WAFR;AAGHC,sBAAkB,kBAHf;AAIHC,gBAAY,YAJT;AAKHC,YAAQ,YALL;AAMHC,mBAAe;AANZ,GADgB;AASrBT,QAAM;AACJK,eAAW,WADP;AAEJC,sBAAkB,kBAFd;AAGJI,mBAAe,eAHX;AAIJC,0BAAsB,sBAJlB;AAKJJ,gBAAY,YALR;AAMJC,YAAQ,YANJ;AAOJC,mBAAe;AAPX,GATe;AAkBrBP,QAAM;AACJG,eAAW,WADP;AAEJC,sBAAkB,kBAFd;AAGJI,mBAAe,eAHX;AAIJC,0BAAsB,sBAJlB;AAKJJ,gBAAY,YALR;AAMJC,YAAQ,YANJ;AAOJC,mBAAe;AAPX;AAlBe,CAAvB;AA6BA,IAAMG,uBAAuB;AAC3BC,SAAO,eAACC,KAAD,EAAQC,KAAR,EAAkB;AACvB,WAAOA,MAAMC,MAAN,GAAeD,MAAME,QAAN,CAAeF,MAAMC,MAAN,GAAeF,MAAME,MAApC,CAAf,GAA6DF,KAApE;AACD;AAH0B,CAA7B;;IAMqBI,iB;;;;;;;;;;;;;iCACN;AACX,UAAMC,gBAAgB,KAAKC,kBAAL,KAA4B,WAA5B,GAA0C,WAAhE;AACA,aAAO;AAAC1C,cAAD;AAAKC,cAAL;AAAS0C,iBAAS,CAACF,aAAD,EAAgB,UAAhB,EAA4B,SAA5B;AAAlB,OAAP;AACD;;;sCAEiB;AAAA,UACTG,EADS,GACH,KAAKC,OADF,CACTD,EADS;AAEhB,WAAKE,QAAL,CAAc;AACZC,sBAAc,CADF;AAEZC,mBAAWnD,WAAW+C,EAAX,EAAe9C,SAASmD,oBAAxB,IAAgDC,WAAhD,GAA8DC;AAF7D,OAAd;AAKA,UAAMC,mBAAmB,KAAKC,mBAAL,EAAzB;AACA,UAAMC,UAAU,IAAhB;AACA;;AACAF,uBAAiBG,GAAjB,CAAqB;AACnB7B,iBAAS;AAAC8B,gBAAM,CAAP;AAAUC,qBAAW,IAArB;AAA2BC,kBAAQ,KAAKC,gBAAxC;AAA0DL;AAA1D,SADU;AAEnB3B,mBAAW;AACT6B,gBAAM,CADG;AAETI,sBAAY1B,oBAFH;AAGT2B,oBAAU,YAHD;AAITH,kBAAQ,KAAKI,kBAJJ;AAKTR;AALS,SAFQ;AASnB1B,0BAAkB;AAAC4B,gBAAM,CAAP;AAAUE,kBAAQ,KAAKK;AAAvB,SATC;AAUnB/B,uBAAe;AACbwB,gBAAM,CADO;AAEbI,sBAAY1B,oBAFC;AAGb2B,oBAAU,YAHG;AAIbH,kBAAQ,KAAKM,sBAJA;AAKbV;AALa,SAVI;AAiBnBrB,8BAAsB;AAACuB,gBAAM,CAAP;AAAUE,kBAAQ,KAAKO;AAAvB,SAjBH;AAkBnBpC,oBAAY;AACV2B,gBAAM,CADI;AAEVI,sBAAY1B,oBAFF;AAGV2B,oBAAU,cAHA;AAIVH,kBAAQ,KAAKQ,mBAJH;AAKVZ;AALU,SAlBO;AAyBnBa,oBAAY;AACVC,iBAAO,QADG;AAEVZ,gBAAM,CAFI;AAGVa,gBAAM3E,GAAG4E,aAHC;AAIVV,sBAAY1B,oBAJF;AAKV2B,oBAAU,cALA;AAMVH,kBAAQ,KAAKa,mBANH;AAOVC,wBAAcrE,gBAPJ;AAQVmD;AARU,SAzBO;AAmCnBmB,oBAAY;AACVL,iBAAO,QADG;AAEVZ,gBAAM,CAFI;AAGVa,gBAAM3E,GAAG4E,aAHC;AAIVV,sBAAY1B,oBAJF;AAKV2B,oBAAU,cALA;AAMVH,kBAAQ,KAAKgB,mBANH;AAOVF,wBAActE,gBAPJ;AAQVoD;AARU,SAnCO;AA6CnBvB,uBAAe;AAACyB,gBAAM,CAAP;AAAUa,gBAAM3E,GAAG4E,aAAnB;AAAkCZ,kBAAQ,KAAKiB,sBAA/C;AAAuErB;AAAvE;AA7CI,OAArB;AA+CA;AACD;;;+BAEgB;AAAA,UAAXsB,QAAW,QAAXA,QAAW;AAAA,wBACoB,KAAKC,KADzB;AAAA,UACRvE,QADQ,eACRA,QADQ;AAAA,UACEG,cADF,eACEA,cADF;AAGf,UAAMqE,iBAAiBC,OAAOC,MAAP,CAAc,EAAd,EAAkBJ,QAAlB,EAA4B;AACjDtE,kBAAUA,WAAW,GAAX,GAAiB,GADsB;AAEjDG;AAFiD,OAA5B,CAAvB;AAKA,WAAKwE,KAAL,CAAWC,MAAX,CAAkBC,OAAlB,CAA0B,iBAAS;AACjCC,cAAMC,MAAN,CAAaP,cAAb;AACD,OAFD;AAGD;;;gCAEWQ,Y,EAAc;AACxB,wIAAkBA,YAAlB;;AAEA,WAAKC,cAAL,CAAoBD,YAApB;AAHwB,UAKjBT,KALiB,GAKES,YALF,CAKjBT,KALiB;AAAA,UAKVW,QALU,GAKEF,YALF,CAKVE,QALU;AAMxB,UAAMpC,mBAAmB,KAAKC,mBAAL,EAAzB;AAEA,UAAMoC,mBACJZ,MAAMrE,IAAN,KAAegF,SAAShF,IAAxB,IACAqE,MAAMxE,MAAN,KAAiBmF,SAASnF,MAD1B,IAEAwE,MAAMvE,QAAN,KAAmBkF,SAASlF,QAF5B,IAGAuE,MAAMtE,SAAN,KAAoBiF,SAASjF,SAJ/B;;AAMA,UAAIkF,gBAAJ,EAAsB;AACpB,YAAI,KAAKR,KAAL,CAAWC,MAAf,EAAuB;AACrB,eAAKD,KAAL,CAAWC,MAAX,CAAkBC,OAAlB,CAA0B;AAAA,mBAASC,MAAMM,MAAN,EAAT;AAAA,WAA1B;AACD;;AAED,aAAK5C,QAAL,CAAc,KAAK6C,UAAL,CAAgB,KAAK9C,OAAL,CAAaD,EAA7B,CAAd;AACAQ,yBAAiBwC,aAAjB;AACD;AACF;;;0CAE8C;AAAA,UAA/Bf,KAA+B,SAA/BA,KAA+B;AAAA,UAAxBW,QAAwB,SAAxBA,QAAwB;AAAA,UAAdK,WAAc,SAAdA,WAAc;AAC7C,UAAMC,wBACJD,YAAYE,WAAZ,IACCF,YAAYG,qBAAZ,KACEH,YAAYG,qBAAZ,CAAkCC,GAAlC,IAAyCJ,YAAYG,qBAAZ,CAAkCtF,UAD7E,CAFH,CAD6C,CAM7C;AACA;;AACA,UAAIoF,qBAAJ,EAA2B;AACzB;AACA,YAAMI,WAAWrB,MAAMsB,IAAN,CAAWC,GAAX,CAAevB,MAAMnE,UAArB,CAAjB;;AACA,YAAM2F,oBAAoB,KAAKC,qBAAL,CAA2BJ,QAA3B,EAAqC,KAAKjB,KAAL,CAAWjC,SAAhD,CAA1B;;AAEA,aAAKF,QAAL,CAAc;AACZuD,8CADY;AAEZtD,wBAAcsD,kBAAkBE;AAFpB,SAAd;AAKA,aAAKlD,mBAAL,GAA2BuC,aAA3B;AACD;;AAED,UACEE,yBACAjB,MAAMvE,QAAN,KAAmBkF,SAASlF,QAD5B,IAEAuE,MAAMrE,IAAN,KAAegF,SAAShF,IAH1B,EAIE;AACA,aAAKyE,KAAL,CAAWoB,iBAAX,CAA6BG,eAA7B,CAA6C;AAC3ChG,gBAAM,KAAKiG,iBAAL,EADqC;AAE3CnG,oBAAUuE,MAAMvE;AAF2B,SAA7C;AAID;AACF,K,CAED;;;;0CACsB4F,Q,EAAUlD,S,EAAW;AACzC,aAAO,IAAIjD,iBAAJ,CAAsB;AAACmG,0BAAD;AAAWlD,mBAAW,KAAKiC,KAAL,CAAWjC;AAAjC,OAAtB,CAAP;AACD;;;qCAEgB6B,K,EAAO;AACtB,6IAAuBA,KAAvB;;AACA,UAAM6B,aAAa,KAAKrD,mBAAL,GAA2BsD,oBAA3B,CAAgD;AAACC,2BAAmB;AAApB,OAAhD,CAAnB;AAFsB,UAGfC,YAHe,GAGC,KAAK5B,KAHN,CAGf4B,YAHe;;AAKtB,WAAK,IAAMC,SAAX,IAAwBD,YAAxB,EAAsC;AACpC,YAAMzB,QAAQyB,aAAaC,SAAb,CAAd;;AAEA,YAAIA,cAAc,KAAlB,EAAyB;AACvB1B,gBAAM2B,cAAN,CAAqB,KAAK9B,KAAL,CAAW+B,SAAhC;AACD,SAFD,MAEO;AACL5B,gBAAM6B,gBAAN,CAAuB,KAAKhC,KAAL,CAAWlC,YAAlC;AACD;;AAED,YAAMmE,eAAezF,eAAeqF,SAAf,CAArB;AACA,YAAMK,oBAAoB/F,oBAAoB0F,SAApB,CAA1B;AACA,YAAMM,gBAAgB,EAAtB;;AACA,aAAK,IAAMC,aAAX,IAA4BH,YAA5B,EAA0C;AACxC,cAAMI,YAAYZ,WAAWQ,aAAaG,aAAb,CAAX,CAAlB;;AAEA,cAAIC,SAAJ,EAAe;AACb;AACAF,0BAAcC,aAAd,IAA+BF,oBAC3BpC,OAAOC,MAAP,CAAc,EAAd,EAAkBsC,SAAlB,EAA6BH,iBAA7B,EAAgD;AAC9CI,sBAAQD,UAAUE,SAAV;AADsC,aAAhD,CAD2B,GAI3BF,SAJJ;AAKD;AACF;;AACDlC,cAAMqC,aAAN,CAAoBL,aAApB;AACD;AACF;;;+BAEUxE,E,EAAI;AAAA,yBAC6B,KAAKiC,KADlC;AAAA,UACN6C,EADM,gBACNA,EADM;AAAA,UACFrH,MADE,gBACFA,MADE;AAAA,UACMC,QADN,gBACMA,QADN;AAAA,UACgBC,SADhB,gBACgBA,SADhB;AAGb,UAAM2E,SAAS,EAAf;;AAEA,UAAI7E,MAAJ,EAAY;AACV6E,eAAO7D,GAAP,GAAa,IAAI1B,KAAJ,CACXiD,EADW,EAEXmC,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAK2C,UAAL,EAAlB,EAAqC;AACnCD,wBAAOA,EAAP,SADmC;AAEnCE,oBAAU,IAAIhI,QAAJ,CAAa;AACrBiI,sBAAUnI,GAAGoI,SADQ;AAErBpB,wBAAY;AACVqB,+BAAiB;AAACvE,sBAAM,CAAP;AAAUwE,6BAAa,IAAvB;AAA6B5F,uBAAO,IAAIlB,YAAJ,CAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB;AAApC,eADP;AAEVc,6BAAe;AAACwB,sBAAM,CAAP;AAAUwE,6BAAa,IAAvB;AAA6B5F,uBAAO,IAAIlB,YAAJ,CAAiB,CAAjB;AAApC,eAFL;AAGVe,oCAAsB;AAACuB,sBAAM,CAAP;AAAUwE,6BAAa,IAAvB;AAA6B5F,uBAAO,IAAIlB,YAAJ,CAAiB,CAAjB;AAApC;AAHZ;AAFS,WAAb,CAFyB;AAUnC0D,oBAAU;AACRqD,0BAAc;AADN,WAVyB;AAanCC,uBAAa,CAbsB;AAcnCzE,qBAAW,IAdwB;AAenC0E,uBAAa,KAAKtF,OAAL,CAAasF;AAfS,SAArC,CAFW,CAAb;AAoBD;;AACD,UAAI9H,UAAUC,QAAd,EAAwB;AACtB4E,eAAO5D,IAAP,GAAc,IAAI3B,KAAJ,CACZiD,EADY,EAEZmC,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAK2C,UAAL,EAAlB,EAAqC;AACnCD,wBAAOA,EAAP,UADmC;AAEnCE,oBAAU,IAAIhI,QAAJ,CAAa;AACrBiI,sBAAUnI,GAAG0I,cADQ;AAErBF,yBAAa,CAFQ;AAGrBxB,wBAAY;AACVqB,+BAAiB;AAACvE,sBAAM,CAAP;AAAUpB,uBAAOnB;AAAjB;AADP;AAHS,WAAb,CAFyB;AASnC2D,oBAAU;AACRqD,0BAAc;AADN,WATyB;AAYnCD,uBAAa,CAZsB;AAanCG,uBAAa,KAAKtF,OAAL,CAAasF;AAbS,SAArC,CAFY,CAAd;AAkBD;;AACD,UAAI7H,YAAYC,SAAhB,EAA2B;AACzB2E,eAAO1D,IAAP,GAAc,IAAI7B,KAAJ,CACZiD,EADY,EAEZmC,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAK2C,UAAL,EAAlB,EAAqC;AACnCD,wBAAOA,EAAP,UADmC;AAEnCE,oBAAU,IAAIhI,QAAJ,CAAa;AACrBiI,sBAAUnI,GAAG2I,UADQ;AAErBH,yBAAa,CAFQ;AAGrBxB,wBAAY;AACVqB,+BAAiB;AAACvE,sBAAM,CAAP;AAAUpB,uBAAOjB;AAAjB;AADP;AAHS,WAAb,CAFyB;AASnCyD,oBAAU;AACRqD,0BAAc;AADN,WATyB;AAYnCD,uBAAa,CAZsB;AAanCG,uBAAa,KAAKtF,OAAL,CAAasF;AAbS,SAArC,CAFY,CAAd;AAkBD;;AAED,aAAO;AACLjD,gBAAQ,CAACA,OAAO1D,IAAR,EAAc0D,OAAO5D,IAArB,EAA2B4D,OAAO7D,GAAlC,EAAuCiH,MAAvC,CAA8CC,OAA9C,CADH;AAEL1B,sBAAc3B;AAFT,OAAP;AAID;;;qCAEgBoC,S,EAAW;AAC1BA,gBAAUlF,KAAV,GAAkB,KAAK6C,KAAL,CAAWoB,iBAAX,CAA6B3E,OAA7B,EAAlB;AACA,UAAMsF,YAAYM,UAAUlF,KAAV,CAAgBE,MAAhB,GAAyBgF,UAAU9D,IAArD;AACA,WAAKV,QAAL,CAAc;AAACkE;AAAD,OAAd;AACD;;;uCAEkBM,S,EAAW;AAAA,UACrBjB,iBADqB,GACA,KAAKpB,KADL,CACrBoB,iBADqB;AAE5BiB,gBAAUkB,YAAV,GAAyBnC,kBAAkBmC,YAA3C;AACAlB,gBAAUlF,KAAV,GAAkBiE,kBAAkB1E,SAAlB,EAAlB;AACD;;;0CACqB2F,S,EAAW;AAC/B,UAAMmB,SAAS,KAAKhC,iBAAL,EAAf;AACAa,gBAAUoB,QAAV,GAAqB,CAACD,MAAtB;;AAEA,UAAI,CAACA,MAAL,EAAa;AACXnB,kBAAUlF,KAAV,GAAkB,IAAIlB,YAAJ,CAAiB,CAAjB,CAAlB;AACA;AACD;;AAEDoG,gBAAUlF,KAAV,GAAkB,KAAK6C,KAAL,CAAWoB,iBAAX,CAA6BzE,gBAA7B,EAAlB;AACD;;;2CAEsB0F,S,EAAW;AAAA,UACzBjB,iBADyB,GACJ,KAAKpB,KADD,CACzBoB,iBADyB;AAEhCiB,gBAAUkB,YAAV,GAAyBnC,kBAAkBmC,YAA3C;AACAlB,gBAAUlF,KAAV,GAAkBiE,kBAAkBrE,aAAlB,EAAlB;AACD;;;8CACyBsF,S,EAAW;AACnC,UAAMmB,SAAS,KAAKhC,iBAAL,EAAf;AACAa,gBAAUoB,QAAV,GAAqB,CAACD,MAAtB;;AAEA,UAAI,CAACA,MAAL,EAAa;AACXnB,kBAAUlF,KAAV,GAAkB,IAAIlB,YAAJ,CAAiB,CAAjB,CAAlB;AACA;AACD;;AAEDoG,gBAAUlF,KAAV,GAAkB,KAAK6C,KAAL,CAAWoB,iBAAX,CAA6BpE,oBAA7B,EAAlB;AACD;;;wCAEmBqF,S,EAAW;AAAA;;AAAA,UACtBjB,iBADsB,GACD,KAAKpB,KADJ,CACtBoB,iBADsB;AAE7BiB,gBAAUkB,YAAV,GAAyBnC,kBAAkBmC,YAA3C;AAF6B,yBAII,KAAK3D,KAJT;AAAA,UAItBvE,QAJsB,gBAItBA,QAJsB;AAAA,UAIZO,aAJY,gBAIZA,YAJY;;AAK7B,UAAIP,YAAY,OAAOO,aAAP,KAAwB,UAAxC,EAAoD;AAClDyG,kBAAUoB,QAAV,GAAqB,KAArB;AACApB,kBAAUlF,KAAV,GAAkBiE,kBAAkBxE,UAAlB,CAA6B;AAC7ChB,wBAAc;AAAA,mBAAgBA,cAAa,MAAKgE,KAAL,CAAWsB,IAAX,CAAgBwC,YAAhB,CAAb,CAAhB;AAAA;AAD+B,SAA7B,CAAlB;AAGD,OALD,MAKO;AACL,YAAMC,YAAYtI,WAAWO,aAAX,GAA0B,CAA5C;AACAyG,kBAAUoB,QAAV,GAAqB,IAArB;AACApB,kBAAUlF,KAAV,GAAkB,IAAIlB,YAAJ,CAAiB,CAAC0H,SAAD,CAAjB,CAAlB;AACD;AACF;;;wCAEmBtB,S,EAAW;AAAA;;AAAA,UACtBjB,iBADsB,GACD,KAAKpB,KADJ,CACtBoB,iBADsB;AAE7BiB,gBAAUkB,YAAV,GAAyBnC,kBAAkBmC,YAA3C;AACAlB,gBAAUlF,KAAV,GAAkBiE,kBAAkBvE,MAAlB,CAAyB;AACzC+G,aAAK,YADoC;AAEzCC,kBAAU;AAAA,iBAAgB,OAAKjE,KAAL,CAAW/D,YAAX,CAAwB,OAAK+D,KAAL,CAAWsB,IAAX,CAAgBwC,YAAhB,CAAxB,CAAhB;AAAA;AAF+B,OAAzB,CAAlB;AAID;;;wCACmBrB,S,EAAW;AAAA;;AAAA,UACtBjB,iBADsB,GACD,KAAKpB,KADJ,CACtBoB,iBADsB;AAE7BiB,gBAAUkB,YAAV,GAAyBnC,kBAAkBmC,YAA3C;AACAlB,gBAAUlF,KAAV,GAAkBiE,kBAAkBvE,MAAlB,CAAyB;AACzC+G,aAAK,YADoC;AAEzCC,kBAAU;AAAA,iBAAgB,OAAKjE,KAAL,CAAW9D,YAAX,CAAwB,OAAK8D,KAAL,CAAWsB,IAAX,CAAgBwC,YAAhB,CAAxB,CAAhB;AAAA;AAF+B,OAAzB,CAAlB;AAID,K,CAED;;;;2CACuBrB,S,EAAW;AAChCA,gBAAUlF,KAAV,GAAkB,KAAK6C,KAAL,CAAWoB,iBAAX,CAA6BtE,aAA7B,EAAlB;AACD;;;;EArU4CtC,K;;SAA1B+C,iB;AAwUrBA,kBAAkBuG,SAAlB,GAA8B,mBAA9B;AACAvG,kBAAkBpC,YAAlB,GAAiCA,YAAjC","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from '@deck.gl/core';\nimport GL from 'luma.gl/constants';\nimport {Model, Geometry, hasFeature, FEATURES} from 'luma.gl';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport {PolygonTesselator} from './polygon-tesselator';\n\nimport vs from './solid-polygon-layer-vertex.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\n\nconst defaultProps = {\n  filled: true,\n  // Whether to extrude\n  extruded: false,\n  // Whether to draw a GL.LINES wireframe of the polygon\n  wireframe: false,\n  fp64: false,\n\n  // elevation multiplier\n  elevationScale: 1,\n\n  // Accessor for polygon geometry\n  getPolygon: f => f.polygon,\n  // Accessor for extrusion height\n  getElevation: 1000,\n  // Accessor for colors\n  getFillColor: defaultFillColor,\n  getLineColor: defaultLineColor,\n\n  // Optional settings for 'lighting' shader module\n  lightSettings: {}\n};\n\n// Side model attributes\nconst SIDE_FILL_POSITIONS = new Float32Array([\n  // top left corner\n  0,\n  1,\n  // bottom left corner\n  0,\n  0,\n  // top right corner\n  1,\n  1,\n  // bottom right corner\n  1,\n  0\n]);\nconst SIDE_WIRE_POSITIONS = new Float32Array([\n  // top right corner\n  1,\n  1,\n  // top left corner\n  0,\n  1,\n  // bottom left corner\n  0,\n  0,\n  // bottom right corner\n  1,\n  0\n]);\n\n// Model types\nconst ATTRIBUTE_OVERRIDES = {\n  TOP: null,\n  SIDE: {instanced: 1},\n  WIRE: {instanced: 1}\n};\n\nconst ATTRIBUTE_MAPS = {\n  TOP: {\n    indices: 'indices',\n    positions: 'positions',\n    positions64xyLow: 'positions64xyLow',\n    elevations: 'elevations',\n    colors: 'fillColors',\n    pickingColors: 'pickingColors'\n  },\n  SIDE: {\n    positions: 'positions',\n    positions64xyLow: 'positions64xyLow',\n    nextPositions: 'nextPositions',\n    nextPositions64xyLow: 'nextPositions64xyLow',\n    elevations: 'elevations',\n    colors: 'fillColors',\n    pickingColors: 'pickingColors'\n  },\n  WIRE: {\n    positions: 'positions',\n    positions64xyLow: 'positions64xyLow',\n    nextPositions: 'nextPositions',\n    nextPositions64xyLow: 'nextPositions64xyLow',\n    elevations: 'elevations',\n    colors: 'lineColors',\n    pickingColors: 'pickingColors'\n  }\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class SolidPolygonLayer extends Layer {\n  getShaders() {\n    const projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'lighting', 'picking']};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    this.setState({\n      numInstances: 0,\n      IndexType: hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n    });\n\n    const attributeManager = this.getAttributeManager();\n    const noAlloc = true;\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {size: 1, isIndexed: true, update: this.calculateIndices, noAlloc},\n      positions: {\n        size: 3,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        update: this.calculatePositions,\n        noAlloc\n      },\n      positions64xyLow: {size: 2, update: this.calculatePositionsLow},\n      nextPositions: {\n        size: 3,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        update: this.calculateNextPositions,\n        noAlloc\n      },\n      nextPositions64xyLow: {size: 2, update: this.calculateNextPositionsLow},\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        update: this.calculateElevations,\n        noAlloc\n      },\n      fillColors: {\n        alias: 'colors',\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        update: this.calculateFillColors,\n        defaultValue: defaultFillColor,\n        noAlloc\n      },\n      lineColors: {\n        alias: 'colors',\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        update: this.calculateLineColors,\n        defaultValue: defaultLineColor,\n        noAlloc\n      },\n      pickingColors: {size: 3, type: GL.UNSIGNED_BYTE, update: this.calculatePickingColors, noAlloc}\n    });\n    /* eslint-enable max-len */\n  }\n\n  draw({uniforms}) {\n    const {extruded, elevationScale} = this.props;\n\n    const renderUniforms = Object.assign({}, uniforms, {\n      extruded: extruded ? 1.0 : 0.0,\n      elevationScale\n    });\n\n    this.state.models.forEach(model => {\n      model.render(renderUniforms);\n    });\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps} = updateParams;\n    const attributeManager = this.getAttributeManager();\n\n    const regenerateModels =\n      props.fp64 !== oldProps.fp64 ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded ||\n      props.wireframe !== oldProps.wireframe;\n\n    if (regenerateModels) {\n      if (this.state.models) {\n        this.state.models.forEach(model => model.delete());\n      }\n\n      this.setState(this._getModels(this.context.gl));\n      attributeManager.invalidateAll();\n    }\n  }\n\n  updateGeometry({props, oldProps, changeFlags}) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      // TODO - avoid creating a temporary array here: let the tesselator iterate\n      const polygons = props.data.map(props.getPolygon);\n      const polygonTesselator = this._getPolygonTesselator(polygons, this.state.IndexType);\n\n      this.setState({\n        polygonTesselator,\n        numInstances: polygonTesselator.pointCount\n      });\n\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (\n      geometryConfigChanged ||\n      props.extruded !== oldProps.extruded ||\n      props.fp64 !== oldProps.fp64\n    ) {\n      this.state.polygonTesselator.updatePositions({\n        fp64: this.use64bitPositions(),\n        extruded: props.extruded\n      });\n    }\n  }\n\n  // \"Experimental\" method indended to make it easier to support non-nested arrays in subclasses\n  _getPolygonTesselator(polygons, IndexType) {\n    return new PolygonTesselator({polygons, IndexType: this.state.IndexType});\n  }\n\n  updateAttributes(props) {\n    super.updateAttributes(props);\n    const attributes = this.getAttributeManager().getChangedAttributes({clearChangedFlags: true});\n    const {modelsByName} = this.state;\n\n    for (const modelName in modelsByName) {\n      const model = modelsByName[modelName];\n\n      if (modelName === 'TOP') {\n        model.setVertexCount(this.state.numVertex);\n      } else {\n        model.setInstanceCount(this.state.numInstances);\n      }\n\n      const attributeMap = ATTRIBUTE_MAPS[modelName];\n      const attributeOverride = ATTRIBUTE_OVERRIDES[modelName];\n      const newAttributes = {};\n      for (const attributeName in attributeMap) {\n        const attribute = attributes[attributeMap[attributeName]];\n\n        if (attribute) {\n          // Apply layout override to the attribute.\n          newAttributes[attributeName] = attributeOverride\n            ? Object.assign({}, attribute, attributeOverride, {\n                buffer: attribute.getBuffer()\n              })\n            : attribute;\n        }\n      }\n      model.setAttributes(newAttributes);\n    }\n  }\n\n  _getModels(gl) {\n    const {id, filled, extruded, wireframe} = this.props;\n\n    const models = {};\n\n    if (filled) {\n      models.TOP = new Model(\n        gl,\n        Object.assign({}, this.getShaders(), {\n          id: `${id}-top`,\n          geometry: new Geometry({\n            drawMode: GL.TRIANGLES,\n            attributes: {\n              vertexPositions: {size: 2, isInstanced: true, value: new Float32Array([0, 1])},\n              nextPositions: {size: 3, isInstanced: true, value: new Float32Array(3)},\n              nextPositions64xyLow: {size: 2, isInstanced: true, value: new Float32Array(2)}\n            }\n          }),\n          uniforms: {\n            isSideVertex: 0\n          },\n          vertexCount: 0,\n          isIndexed: true,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n    if (filled && extruded) {\n      models.SIDE = new Model(\n        gl,\n        Object.assign({}, this.getShaders(), {\n          id: `${id}-side`,\n          geometry: new Geometry({\n            drawMode: GL.TRIANGLE_STRIP,\n            vertexCount: 4,\n            attributes: {\n              vertexPositions: {size: 2, value: SIDE_FILL_POSITIONS}\n            }\n          }),\n          uniforms: {\n            isSideVertex: 1\n          },\n          isInstanced: 1,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n    if (extruded && wireframe) {\n      models.WIRE = new Model(\n        gl,\n        Object.assign({}, this.getShaders(), {\n          id: `${id}-wire`,\n          geometry: new Geometry({\n            drawMode: GL.LINE_STRIP,\n            vertexCount: 4,\n            attributes: {\n              vertexPositions: {size: 2, value: SIDE_WIRE_POSITIONS}\n            }\n          }),\n          uniforms: {\n            isSideVertex: 1\n          },\n          isInstanced: 1,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n\n    return {\n      models: [models.WIRE, models.SIDE, models.TOP].filter(Boolean),\n      modelsByName: models\n    };\n  }\n\n  calculateIndices(attribute) {\n    attribute.value = this.state.polygonTesselator.indices();\n    const numVertex = attribute.value.length / attribute.size;\n    this.setState({numVertex});\n  }\n\n  calculatePositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n    attribute.value = polygonTesselator.positions();\n  }\n  calculatePositionsLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    attribute.value = this.state.polygonTesselator.positions64xyLow();\n  }\n\n  calculateNextPositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n    attribute.value = polygonTesselator.nextPositions();\n  }\n  calculateNextPositionsLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    attribute.value = this.state.polygonTesselator.nextPositions64xyLow();\n  }\n\n  calculateElevations(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n\n    const {extruded, getElevation} = this.props;\n    if (extruded && typeof getElevation === 'function') {\n      attribute.constant = false;\n      attribute.value = polygonTesselator.elevations({\n        getElevation: polygonIndex => getElevation(this.props.data[polygonIndex])\n      });\n    } else {\n      const elevation = extruded ? getElevation : 0;\n      attribute.constant = true;\n      attribute.value = new Float32Array([elevation]);\n    }\n  }\n\n  calculateFillColors(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n    attribute.value = polygonTesselator.colors({\n      key: 'fillColors',\n      getColor: polygonIndex => this.props.getFillColor(this.props.data[polygonIndex])\n    });\n  }\n  calculateLineColors(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n    attribute.value = polygonTesselator.colors({\n      key: 'lineColors',\n      getColor: polygonIndex => this.props.getLineColor(this.props.data[polygonIndex])\n    });\n  }\n\n  // Override the default picking colors calculation\n  calculatePickingColors(attribute) {\n    attribute.value = this.state.polygonTesselator.pickingColors();\n  }\n}\n\nSolidPolygonLayer.layerName = 'SolidPolygonLayer';\nSolidPolygonLayer.defaultProps = defaultProps;\n"],"file":"solid-polygon-layer.js"}