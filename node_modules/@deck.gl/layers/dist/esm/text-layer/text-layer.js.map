{"version":3,"sources":["../../../src/text-layer/text-layer.js"],"names":["CompositeLayer","log","MultiIconLayer","makeFontAtlas","DEFAULT_CHAR_SET","TEXT_ANCHOR","start","middle","end","ALIGNMENT_BASELINE","top","center","bottom","DEFAULT_FONT_FAMILY","DEFAULT_COLOR","MISSING_CHAR_WIDTH","defaultProps","fp64","sizeScale","fontFamily","characterSet","getText","x","text","getPosition","position","getColor","getSize","getAngle","getTextAnchor","getAlignmentBaseline","getPixelOffset","TextLayer","props","oldProps","changeFlags","fontChanged","updateFontAtlas","dataChanged","updateTriggersChanged","all","transformStringToLetters","gl","context","scale","mapping","texture","setState","iconAtlas","iconMapping","info","Object","assign","object","data","state","length","transformedData","forEach","val","letters","Array","from","offsets","offsetLeft","letter","i","datum","index","len","frame","width","warn","push","accessor","textAnchor","hasOwnProperty","Error","alignmentBaseline","transitions","updateTriggers","getSubLayerProps","id","getIcon","d","getShiftInQueue","getLetterOffset","getLengthOfQueue","getTextLength","_getAccessor","getAnchorX","getAnchorXFromTextAnchor","getAnchorY","getAnchorYFromAlignmentBaseline","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, log} from '@deck.gl/core';\nimport MultiIconLayer from './multi-icon-layer/multi-icon-layer';\nimport {makeFontAtlas, DEFAULT_CHAR_SET} from './font-atlas';\n\nconst TEXT_ANCHOR = {\n  start: 1,\n  middle: 0,\n  end: -1\n};\n\nconst ALIGNMENT_BASELINE = {\n  top: 1,\n  center: 0,\n  bottom: -1\n};\n\nconst DEFAULT_FONT_FAMILY = 'Monaco, monospace';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst MISSING_CHAR_WIDTH = 32;\n\nconst defaultProps = {\n  fp64: false,\n  sizeScale: 1,\n  fontFamily: DEFAULT_FONT_FAMILY,\n  characterSet: DEFAULT_CHAR_SET,\n\n  getText: x => x.text,\n  getPosition: x => x.position,\n  getColor: DEFAULT_COLOR,\n  getSize: 32,\n  getAngle: 0,\n  getTextAnchor: 'middle',\n  getAlignmentBaseline: 'center',\n  getPixelOffset: [0, 0]\n};\n\nexport default class TextLayer extends CompositeLayer {\n  updateState({props, oldProps, changeFlags}) {\n    const fontChanged =\n      oldProps.fontFamily !== props.fontFamily || oldProps.characterSet !== props.characterSet;\n\n    if (fontChanged) {\n      this.updateFontAtlas(props.fontFamily, props.characterSet);\n    }\n\n    if (\n      changeFlags.dataChanged ||\n      fontChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText))\n    ) {\n      this.transformStringToLetters();\n    }\n  }\n\n  updateFontAtlas(fontFamily, characterSet) {\n    const {gl} = this.context;\n    const {scale, mapping, texture} = makeFontAtlas(gl, {fontFamily, characterSet});\n    this.setState({\n      scale,\n      iconAtlas: texture,\n      iconMapping: mapping\n    });\n  }\n\n  getPickingInfo({info}) {\n    return Object.assign(info, {\n      // override object with original data\n      object: info.object && info.object.object\n    });\n  }\n\n  transformStringToLetters() {\n    const {data, getText} = this.props;\n    const {iconMapping} = this.state;\n    if (!data || data.length === 0) {\n      return;\n    }\n    const transformedData = [];\n    data.forEach(val => {\n      const text = getText(val);\n      if (text) {\n        const letters = Array.from(text);\n        const offsets = [0];\n        let offsetLeft = 0;\n\n        letters.forEach((letter, i) => {\n          const datum = {text: letter, index: i, offsets, len: text.length, object: val};\n          const frame = iconMapping[letter];\n          if (frame) {\n            offsetLeft += frame.width;\n          } else {\n            log.warn(`Missing character: ${letter}`)();\n            offsetLeft += MISSING_CHAR_WIDTH;\n          }\n          offsets.push(offsetLeft);\n          transformedData.push(datum);\n        });\n      }\n    });\n\n    this.setState({data: transformedData});\n  }\n\n  getLetterOffset(datum) {\n    return datum.offsets[datum.index];\n  }\n\n  getTextLength(datum) {\n    return datum.offsets[datum.offsets.length - 1];\n  }\n\n  _getAccessor(accessor) {\n    if (typeof accessor === 'function') {\n      return x => accessor(x.object);\n    }\n    return accessor;\n  }\n\n  getAnchorXFromTextAnchor(getTextAnchor) {\n    return x => {\n      const textAnchor =\n        typeof getTextAnchor === 'function' ? getTextAnchor(x.object) : getTextAnchor;\n      if (!TEXT_ANCHOR.hasOwnProperty(textAnchor)) {\n        throw new Error(`Invalid text anchor parameter: ${textAnchor}`);\n      }\n      return TEXT_ANCHOR[textAnchor];\n    };\n  }\n\n  getAnchorYFromAlignmentBaseline(getAlignmentBaseline) {\n    return x => {\n      const alignmentBaseline =\n        typeof getAlignmentBaseline === 'function'\n          ? getAlignmentBaseline(x.object)\n          : getAlignmentBaseline;\n      if (!ALIGNMENT_BASELINE.hasOwnProperty(alignmentBaseline)) {\n        throw new Error(`Invalid alignment baseline parameter: ${alignmentBaseline}`);\n      }\n      return ALIGNMENT_BASELINE[alignmentBaseline];\n    };\n  }\n\n  renderLayers() {\n    const {data, scale, iconAtlas, iconMapping} = this.state;\n\n    if (!iconMapping || !iconAtlas || !data) {\n      return null;\n    }\n\n    const {\n      getPosition,\n      getColor,\n      getSize,\n      getAngle,\n      getTextAnchor,\n      getAlignmentBaseline,\n      getPixelOffset,\n      fp64,\n      sizeScale,\n      transitions,\n      updateTriggers\n    } = this.props;\n\n    return [\n      new MultiIconLayer(\n        this.getSubLayerProps({\n          id: 'text-multi-icon-layer',\n          data,\n          iconAtlas,\n          iconMapping,\n          getIcon: d => d.text,\n          getPosition: d => getPosition(d.object),\n          getShiftInQueue: d => this.getLetterOffset(d),\n          getLengthOfQueue: d => this.getTextLength(d),\n          getColor: this._getAccessor(getColor),\n          getSize: this._getAccessor(getSize),\n          getAngle: this._getAccessor(getAngle),\n          getAnchorX: this.getAnchorXFromTextAnchor(getTextAnchor),\n          getAnchorY: this.getAnchorYFromAlignmentBaseline(getAlignmentBaseline),\n          getPixelOffset: this._getAccessor(getPixelOffset),\n          fp64,\n          sizeScale: sizeScale * scale,\n          transitions: transitions && {\n            getPosition: transitions.getPosition,\n            getAngle: transitions.getAngle,\n            getColor: transitions.getColor,\n            getSize: transitions.getSize,\n            getPixelOffset: updateTriggers.getPixelOffset\n          },\n          updateTriggers: {\n            getPosition: updateTriggers.getPosition,\n            getAngle: updateTriggers.getAngle,\n            getColor: updateTriggers.getColor,\n            getSize: updateTriggers.getSize,\n            getPixelOffset: updateTriggers.getPixelOffset,\n            getAnchorX: updateTriggers.getTextAnchor,\n            getAnchorY: updateTriggers.getAlignmentBaseline\n          }\n        })\n      )\n    ];\n  }\n}\n\nTextLayer.layerName = 'TextLayer';\nTextLayer.defaultProps = defaultProps;\n"],"file":"text-layer.js"}