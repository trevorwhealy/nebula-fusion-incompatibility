{"version":3,"sources":["../../../src/polygon-layer/polygon-layer.js"],"names":["CompositeLayer","SolidPolygonLayer","PathLayer","Polygon","defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","elevationScale","wireframe","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","lineDashJustified","fp64","getPolygon","f","polygon","getFillColor","getLineColor","getLineWidth","getLineDashArray","getElevation","lightSettings","PolygonLayer","state","paths","oldProps","props","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","data","forEach","complexPolygon","normalize","object","push","path","info","Object","assign","accessor","x","transitions","updateTriggers","hasData","length","polygonLayer","getSubLayerProps","id","polygonLineLayer","getWidth","getColor","getDashArray","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","dashJustified","getPath","_getAccessor","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer} from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n  lineDashJustified: false,\n  fp64: false,\n\n  getPolygon: f => f.polygon,\n  // Polygon fill color\n  getFillColor: defaultFillColor,\n  // Point, line and polygon outline color\n  getLineColor: defaultLineColor,\n  // Line and polygon outline accessors\n  getLineWidth: 1,\n  // Line dash array accessor\n  getLineDashArray: null,\n  // Polygon extrusion accessor\n  getElevation: 1000,\n\n  // Optional settings for 'lighting' shader module\n  lightSettings: {}\n};\n\nexport default class PolygonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      paths: []\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    if (geometryChanged) {\n      const {data, getPolygon} = this.props;\n      this.state.paths = [];\n      data.forEach(object => {\n        const complexPolygon = Polygon.normalize(getPolygon(object));\n        complexPolygon.forEach(polygon =>\n          this.state.paths.push({\n            path: polygon,\n            object\n          })\n        );\n      });\n    }\n  }\n\n  getPickingInfo({info}) {\n    return Object.assign(info, {\n      // override object with picked data\n      object: (info.object && info.object.object) || info.object\n    });\n  }\n\n  _getAccessor(accessor) {\n    if (typeof accessor === 'function') {\n      return x => accessor(x.object);\n    }\n    return accessor;\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    // Layer composition props\n    const {data, stroked, filled, extruded, wireframe, elevationScale, transitions} = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      fp64\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      lightSettings\n    } = this.props;\n\n    const {paths} = this.state;\n\n    const hasData = data && data.length > 0;\n\n    // Filled Polygon Layer\n    const polygonLayer =\n      hasData &&\n      new SolidPolygonLayer(\n        this.getSubLayerProps({\n          id: 'fill',\n          updateTriggers: {\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data,\n          extruded,\n          elevationScale,\n\n          fp64,\n          filled,\n          wireframe,\n\n          getPolygon,\n          getElevation,\n          getFillColor,\n          getLineColor,\n\n          lightSettings,\n          transitions\n        }\n      );\n\n    // Polygon line layer\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      hasData &&\n      new PathLayer(\n        this.getSubLayerProps({\n          id: 'stroke',\n          updateTriggers: {\n            getWidth: updateTriggers.getLineWidth,\n            getColor: updateTriggers.getLineColor,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: paths,\n\n          fp64,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          transitions: transitions && {\n            getWidth: transitions.getLineWidth,\n            getColor: transitions.getLineColor,\n            getPath: transitions.getPolygon\n          },\n\n          getPath: x => x.path,\n          getColor: this._getAccessor(getLineColor),\n          getWidth: this._getAccessor(getLineWidth),\n          getDashArray: this._getAccessor(getLineDashArray)\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer,\n      polygonLineLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n\nPolygonLayer.layerName = 'PolygonLayer';\nPolygonLayer.defaultProps = defaultProps;\n"],"file":"polygon-layer.js"}