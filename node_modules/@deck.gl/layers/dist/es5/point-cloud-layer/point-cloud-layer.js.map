{"version":3,"sources":["../../../src/point-cloud-layer/point-cloud-layer.js"],"names":["fp64LowPart","fp64","DEFAULT_COLOR","DEFAULT_NORMAL","defaultProps","radiusPixels","getPosition","x","position","getNormal","getColor","lightSettings","PointCloudLayer","id","projectModule","use64bitProjection","vs","fs","modules","getAttributeManager","addInstanced","instancePositions","size","transition","accessor","instancePositions64xyLow","update","calculateInstancePositions64xyLow","instanceNormals","defaultValue","instanceColors","type","GL","UNSIGNED_BYTE","props","oldProps","changeFlags","gl","context","state","model","delete","setState","_getModel","invalidateAll","uniforms","render","Object","assign","positions","i","angle","Math","PI","push","cos","sin","Model","getShaders","geometry","Geometry","drawMode","TRIANGLES","attributes","Float32Array","isInstanced","shaderCache","attribute","isFP64","use64bitPositions","constant","value","data","point","Layer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from '@deck.gl/core';\nimport GL from 'luma.gl/constants';\nimport {Model, Geometry, fp64} from 'luma.gl';\nconst {fp64LowPart} = fp64;\n\nimport vs from './point-cloud-layer-vertex.glsl';\nimport fs from './point-cloud-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst DEFAULT_NORMAL = [0, 0, 1];\n\nconst defaultProps = {\n  radiusPixels: 10, //  point radius in pixels\n  fp64: false,\n\n  getPosition: x => x.position,\n  getNormal: DEFAULT_NORMAL,\n  getColor: DEFAULT_COLOR,\n\n  lightSettings: {}\n};\n\nexport default class PointCloudLayer extends Layer {\n  getShaders(id) {\n    const projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'lighting', 'picking']};\n  }\n\n  initializeState() {\n    /* eslint-disable max-len */\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instancePositions64xyLow: {\n        size: 2,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceNormals: {\n        size: 3,\n        transition: true,\n        accessor: 'getNormal',\n        defaultValue: DEFAULT_NORMAL\n      },\n      instanceColors: {\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {radiusPixels} = this.props;\n    this.state.model.render(\n      Object.assign({}, uniforms, {\n        radiusPixels\n      })\n    );\n  }\n\n  _getModel(gl) {\n    // a triangle that minimally cover the unit circle\n    const positions = [];\n    for (let i = 0; i < 3; i++) {\n      const angle = (i / 3) * Math.PI * 2;\n      positions.push(Math.cos(angle) * 2, Math.sin(angle) * 2, 0);\n    }\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLES,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  calculateInstancePositions64xyLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getPosition} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const position = getPosition(point);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n}\n\nPointCloudLayer.layerName = 'PointCloudLayer';\nPointCloudLayer.defaultProps = defaultProps;\n"],"file":"point-cloud-layer.js"}