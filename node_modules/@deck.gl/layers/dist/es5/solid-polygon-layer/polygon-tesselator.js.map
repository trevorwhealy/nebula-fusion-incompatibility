{"version":3,"sources":["../../../src/solid-polygon-layer/polygon-tesselator.js"],"names":["fillArray","experimental","fp64LowPart","fp64Module","getPickingColor","index","DEFAULT_COLOR","PolygonTesselator","polygons","IndexType","map","Polygon","normalize","polygon","pointCount","getPointCount","bufferLayout","getVertexCount","Uint16Array","Error","attributes","pickingColors","calculatePickingColors","fp64","extruded","positions","Float32Array","nextPositions","positions64xyLow","nextPositions64xyLow","updatePositions","cache","calculateIndices","key","getElevation","values","updateElevations","getColor","updateColors","reduce","points","getTriangleCount","triangles","getPolygonOffsets","offsets","Array","length","offset","forEach","i","Uint32Array","indexCount","attribute","polygonIndex","getSurfaceIndices","nextI","startVertex","pushStartVertex","x","y","z","xLow","yLow","popStartVertex","forEachVertex","vertex","vertexIndex","elevations","complexPolygon","height","vertexCount","target","source","start","count","colors","Uint8ClampedArray","color","isNaN"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Handles tesselation of polygons with holes\n// - 2D surfaces\n// - 2D outlines\n// - 3D surfaces (top and sides only)\n// - 3D wireframes (not yet)\nimport * as Polygon from './polygon';\nimport {experimental} from '@deck.gl/core';\nconst {fillArray} = experimental;\nimport {fp64 as fp64Module} from 'luma.gl';\nconst {fp64LowPart} = fp64Module;\n\n// Maybe deck.gl or luma.gl needs to export this\nfunction getPickingColor(index) {\n  index++;\n  return [index & 255, (index >> 8) & 255, (index >> 16) & 255];\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255]; // Black\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport class PolygonTesselator {\n  constructor({polygons, IndexType}) {\n    // Normalize all polygons\n    polygons = polygons.map(polygon => Polygon.normalize(polygon));\n\n    // Count all polygon vertices\n    const pointCount = getPointCount(polygons);\n\n    this.polygons = polygons;\n    this.pointCount = pointCount;\n    this.bufferLayout = polygons.map(polygon => Polygon.getVertexCount(polygon));\n    this.IndexType = IndexType;\n\n    // TODO: dynamically decide IndexType in tesselator?\n    // Check if the vertex count excedes index type limit\n    if (IndexType === Uint16Array && pointCount > 65535) {\n      throw new Error(\"Vertex count exceeds browser's limit\");\n    }\n\n    this.attributes = {\n      pickingColors: calculatePickingColors({polygons, pointCount})\n    };\n  }\n\n  updatePositions({fp64, extruded}) {\n    const {attributes, polygons, pointCount} = this;\n\n    attributes.positions = attributes.positions || new Float32Array(pointCount * 3);\n    attributes.nextPositions = attributes.nextPositions || new Float32Array(pointCount * 3);\n\n    if (fp64) {\n      // We only need x, y component\n      attributes.positions64xyLow = attributes.positions64xyLow || new Float32Array(pointCount * 2);\n      attributes.nextPositions64xyLow =\n        attributes.nextPositions64xyLow || new Float32Array(pointCount * 2);\n    }\n\n    updatePositions({cache: attributes, polygons, extruded, fp64});\n  }\n\n  indices() {\n    const {polygons, IndexType} = this;\n    return calculateIndices({polygons, IndexType});\n  }\n\n  positions() {\n    return this.attributes.positions;\n  }\n  positions64xyLow() {\n    return this.attributes.positions64xyLow;\n  }\n\n  nextPositions() {\n    return this.attributes.nextPositions;\n  }\n  nextPositions64xyLow() {\n    return this.attributes.nextPositions64xyLow;\n  }\n\n  elevations({key = 'elevations', getElevation = x => 100} = {}) {\n    const {attributes, polygons, pointCount} = this;\n    const values = updateElevations({cache: attributes[key], polygons, pointCount, getElevation});\n    attributes[key] = values;\n    return values;\n  }\n\n  colors({key = 'colors', getColor = x => DEFAULT_COLOR} = {}) {\n    const {attributes, polygons, pointCount} = this;\n    const values = updateColors({cache: attributes[key], polygons, pointCount, getColor});\n    attributes[key] = values;\n    return values;\n  }\n\n  pickingColors() {\n    return this.attributes.pickingColors;\n  }\n}\n\n// Count number of points in a list of complex polygons\nfunction getPointCount(polygons) {\n  return polygons.reduce((points, polygon) => points + Polygon.getVertexCount(polygon), 0);\n}\n\n// COunt number of triangles in a list of complex polygons\nfunction getTriangleCount(polygons) {\n  return polygons.reduce((triangles, polygon) => triangles + Polygon.getTriangleCount(polygon), 0);\n}\n\n// Returns the offsets of each complex polygon in the combined array of all polygons\nfunction getPolygonOffsets(polygons) {\n  const offsets = new Array(polygons.length + 1);\n  offsets[0] = 0;\n  let offset = 0;\n  polygons.forEach((polygon, i) => {\n    offset += Polygon.getVertexCount(polygon);\n    offsets[i + 1] = offset;\n  });\n  return offsets;\n}\n\nfunction calculateIndices({polygons, IndexType = Uint32Array}) {\n  // Calculate length of index array (3 * number of triangles)\n  const indexCount = 3 * getTriangleCount(polygons);\n  const offsets = getPolygonOffsets(polygons);\n\n  // Allocate the attribute\n  const attribute = new IndexType(indexCount);\n\n  // 1. get triangulated indices for the internal areas\n  // 2. offset them by the number of indices in previous polygons\n  let i = 0;\n  polygons.forEach((polygon, polygonIndex) => {\n    for (const index of Polygon.getSurfaceIndices(polygon)) {\n      attribute[i++] = index + offsets[polygonIndex];\n    }\n  });\n\n  return attribute;\n}\n\nfunction updatePositions({\n  cache: {positions, positions64xyLow, nextPositions, nextPositions64xyLow},\n  polygons,\n  extruded,\n  fp64\n}) {\n  // Flatten out all the vertices of all the sub subPolygons\n  let i = 0;\n  let nextI = 0;\n  let startVertex = null;\n\n  const pushStartVertex = (x, y, z, xLow, yLow) => {\n    if (extruded) {\n      // Save first vertex for setting nextPositions at the end of the loop\n      startVertex = {x, y, z, xLow, yLow};\n    }\n  };\n\n  const popStartVertex = () => {\n    if (startVertex) {\n      nextPositions[nextI * 3] = startVertex.x;\n      nextPositions[nextI * 3 + 1] = startVertex.y;\n      nextPositions[nextI * 3 + 2] = startVertex.z;\n      if (fp64) {\n        nextPositions64xyLow[nextI * 2] = startVertex.xLow;\n        nextPositions64xyLow[nextI * 2 + 1] = startVertex.yLow;\n      }\n      nextI++;\n    }\n    startVertex = null;\n  };\n\n  polygons.forEach((polygon, polygonIndex) => {\n    Polygon.forEachVertex(polygon, (vertex, vertexIndex) => {\n      // eslint-disable-line\n      const x = vertex[0];\n      const y = vertex[1];\n      const z = vertex[2] || 0;\n      let xLow;\n      let yLow;\n\n      positions[i * 3] = x;\n      positions[i * 3 + 1] = y;\n      positions[i * 3 + 2] = z;\n      if (fp64) {\n        xLow = fp64LowPart(x);\n        yLow = fp64LowPart(y);\n        positions64xyLow[i * 2] = xLow;\n        positions64xyLow[i * 2 + 1] = yLow;\n      }\n      i++;\n\n      if (extruded && vertexIndex > 0) {\n        nextPositions[nextI * 3] = x;\n        nextPositions[nextI * 3 + 1] = y;\n        nextPositions[nextI * 3 + 2] = z;\n        if (fp64) {\n          nextPositions64xyLow[nextI * 2] = xLow;\n          nextPositions64xyLow[nextI * 2 + 1] = yLow;\n        }\n        nextI++;\n      }\n      if (vertexIndex === 0) {\n        popStartVertex();\n        pushStartVertex(x, y, z, xLow, yLow);\n      }\n    });\n  });\n  popStartVertex();\n}\n\nfunction updateElevations({cache, polygons, pointCount, getElevation}) {\n  const elevations = cache || new Float32Array(pointCount);\n  let i = 0;\n  polygons.forEach((complexPolygon, polygonIndex) => {\n    // Calculate polygon color\n    const height = getElevation(polygonIndex);\n\n    const vertexCount = Polygon.getVertexCount(complexPolygon);\n    fillArray({target: elevations, source: [height], start: i, count: vertexCount});\n    i += vertexCount;\n  });\n  return elevations;\n}\n\nfunction updateColors({cache, polygons, pointCount, getColor}) {\n  const colors = cache || new Uint8ClampedArray(pointCount * 4);\n  let i = 0;\n  polygons.forEach((complexPolygon, polygonIndex) => {\n    // Calculate polygon color\n    const color = getColor(polygonIndex);\n    if (isNaN(color[3])) {\n      color[3] = 255;\n    }\n\n    const vertexCount = Polygon.getVertexCount(complexPolygon);\n    fillArray({target: colors, source: color, start: i, count: vertexCount});\n    i += color.length * vertexCount;\n  });\n  return colors;\n}\n\nfunction calculatePickingColors({polygons, pointCount}) {\n  const attribute = new Uint8ClampedArray(pointCount * 3);\n  let i = 0;\n  polygons.forEach((complexPolygon, polygonIndex) => {\n    const color = getPickingColor(polygonIndex);\n    const vertexCount = Polygon.getVertexCount(complexPolygon);\n    fillArray({target: attribute, source: color, start: i, count: vertexCount});\n    i += color.length * vertexCount;\n  });\n  return attribute;\n}\n"],"file":"polygon-tesselator.js"}