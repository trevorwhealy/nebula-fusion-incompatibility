"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pointToDensityGridData = pointToDensityGridData;
exports.alignToCellBoundary = alignToCellBoundary;

var _math = require("math.gl");

var _luma = require("luma.gl");

// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
var R_EARTH = 6378000;
var fp64LowPart = _luma.fp64.fp64LowPart;
/**
 * Calculate density grid from an array of points
 * @param {array} points
 * @param {function} getPosition - position accessor
 * @param {number} cellSizeMeters - cell size in meters
 * @param {object} gpuGridAggregator - gpu aggregator
 * @param {bool} gpuAggregation - flag to enable gpu aggregation
 * @returns {object} - grid data, cell dimension
 */

function pointToDensityGridData(_ref) {
  var data = _ref.data,
      getPosition = _ref.getPosition,
      cellSizeMeters = _ref.cellSizeMeters,
      gpuGridAggregator = _ref.gpuGridAggregator,
      gpuAggregation = _ref.gpuAggregation,
      _ref$fp = _ref.fp64,
      fp64 = _ref$fp === void 0 ? false : _ref$fp;

  var gridData = _parseData(data, getPosition);

  var gridOffset = _getGridOffset(gridData, cellSizeMeters);

  var opts = _getGPUAggregationParams(gridData, gridOffset);

  var aggregatedData = gpuGridAggregator.run({
    positions: opts.positions,
    positions64xyLow: opts.positions64xyLow,
    weights: opts.weights,
    cellSize: opts.cellSize,
    width: opts.width,
    height: opts.height,
    gridTransformMatrix: opts.gridTransformMatrix,
    useGPU: gpuAggregation,
    fp64: fp64
  });
  var gridSizeX = Math.ceil(opts.width / opts.cellSize[0]);
  var gridSizeY = Math.ceil(opts.height / opts.cellSize[1]);
  return {
    countsBuffer: aggregatedData.countsBuffer,
    maxCountBuffer: aggregatedData.maxCountBuffer,
    gridSize: [gridSizeX, gridSizeY],
    gridOrigin: opts.gridOrigin,
    gridOffset: [opts.gridOffset.xOffset, opts.gridOffset.yOffset]
  };
} // Aligns `inValue` to given `cellSize`


function alignToCellBoundary(inValue, cellSize) {
  var sign = inValue < 0 ? -1 : 1;
  var value = sign < 0 ? Math.abs(inValue) + cellSize : Math.abs(inValue);
  value = Math.floor(value / cellSize) * cellSize;
  return value * sign;
} // Calculate grid parameters


function _getGPUAggregationParams(gridData, gridOffset) {
  var latMin = gridData.latMin,
      latMax = gridData.latMax,
      lngMin = gridData.lngMin,
      lngMax = gridData.lngMax,
      positions = gridData.positions,
      positions64xyLow = gridData.positions64xyLow,
      weights = gridData.weights; // NOTE: this alignment will match grid cell boundaries with existing CPU implementation
  // this gurantees identical aggregation results between current and new layer.
  // We align the origin to cellSize in positive space lng:[0 360], lat:[0 180]
  // After alignment we move it back to original range
  // Origin = [minX, minY]
  // Origin = Origin + [180, 90] // moving to +ve space
  // Origin = Align(Origin, cellSize) //Align to cell boundary
  // Origin = Origin - [180, 90]

  var originY = alignToCellBoundary(latMin + 90, gridOffset.yOffset) - 90;
  var originX = alignToCellBoundary(lngMin + 180, gridOffset.xOffset) - 180; // Setup transformation matrix so that every point is in +ve range

  var gridTransformMatrix = new _math.Matrix4().translate([-1 * originX, -1 * originY, 0]);
  var cellSize = [gridOffset.xOffset, gridOffset.yOffset];
  var gridOrigin = [originX, originY];
  var width = lngMax - lngMin + gridOffset.xOffset;
  var height = latMax - latMin + gridOffset.yOffset;
  return {
    positions: positions,
    positions64xyLow: positions64xyLow,
    weights: weights,
    cellSize: cellSize,
    gridOrigin: gridOrigin,
    width: width,
    height: height,
    gridTransformMatrix: gridTransformMatrix,
    gridOffset: gridOffset
  };
}
/**
 * Based on geometric center of sample points, calculate cellSize in lng/lat (degree) space
 * @param {array} points
 * @param {number} cellSize - unit size in meters
 * @param {function} getPosition - position accessor
 * @returns {yOffset, xOffset} - cellSize size lng/lat (degree) space.
 */


function _getGridOffset(gridData, cellSize) {
  var latMin = gridData.latMin,
      latMax = gridData.latMax;
  var centerLat = (latMin + latMax) / 2;
  return _calculateGridLatLonOffset(cellSize, centerLat);
}
/**
 * calculate grid layer cell size in lat lon based on world unit size
 * and current latitude
 * @param {number} cellSize
 * @param {number} latitude
 * @returns {object} - lat delta and lon delta
 */


function _calculateGridLatLonOffset(cellSize, latitude) {
  var yOffset = _calculateLatOffset(cellSize);

  var xOffset = _calculateLonOffset(latitude, cellSize);

  return {
    yOffset: yOffset,
    xOffset: xOffset
  };
}
/**
 * with a given x-km change, calculate the increment of latitude
 * based on stackoverflow http://stackoverflow.com/questions/7477003
 * @param {number} dy - change in km
 * @return {number} - increment in latitude
 */


function _calculateLatOffset(dy) {
  return dy / R_EARTH * (180 / Math.PI);
}
/**
 * with a given x-km change, and current latitude
 * calculate the increment of longitude
 * based on stackoverflow http://stackoverflow.com/questions/7477003
 * @param {number} lat - latitude of current location (based on city)
 * @param {number} dx - change in km
 * @return {number} - increment in longitude
 */


function _calculateLonOffset(lat, dx) {
  return dx / R_EARTH * (180 / Math.PI) / Math.cos(lat * Math.PI / 180);
} // Parse input data to build positions and boundaries.


function _parseData(data, getPosition) {
  var positions = [];
  var positions64xyLow = [];
  var weights = [];
  var latMin = Infinity;
  var latMax = -Infinity;
  var lngMin = Infinity;
  var lngMax = -Infinity;
  var pLat;
  var pLng;

  for (var p = 0; p < data.length; p++) {
    pLng = getPosition(data[p])[0];
    pLat = getPosition(data[p])[1];
    positions.push(pLng, pLat);
    positions64xyLow.push(fp64LowPart(pLng), fp64LowPart(pLat));
    weights.push(1.0);

    if (Number.isFinite(pLat) && Number.isFinite(pLng)) {
      latMin = pLat < latMin ? pLat : latMin;
      latMax = pLat > latMax ? pLat : latMax;
      lngMin = pLng < lngMin ? pLng : lngMin;
      lngMax = pLng > lngMax ? pLng : lngMax;
    }
  }

  return {
    positions: positions,
    positions64xyLow: positions64xyLow,
    weights: weights,
    latMin: latMin,
    latMax: latMax,
    lngMin: lngMin,
    lngMax: lngMax
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,