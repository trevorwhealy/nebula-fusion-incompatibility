"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _core = require("@deck.gl/core");

var _gpuGridCellLayer = _interopRequireDefault(require("./gpu-grid-cell-layer"));

var _gpuGridUtils = require("./gpu-grid-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return right[Symbol.hasInstance](left); } else { return left instanceof right; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var MINCOLOR = [0, 0, 0, 255];
var MAXCOLOR = [0, 255, 0, 255];
var defaultProps = {
  // elevation
  elevationScale: 1,
  // grid
  cellSize: {
    type: 'number',
    min: 0,
    max: 1000,
    value: 1000
  },
  coverage: {
    type: 'number',
    min: 0,
    max: 1,
    value: 1
  },
  getPosition: function getPosition(x) {
    return x.position;
  },
  extruded: false,
  fp64: false,
  pickable: false,
  // TODO: Enable picking with GPU Aggregation
  // Optional settings for 'lighting' shader module
  lightSettings: {},
  // GPU Aggregation
  gpuAggregation: true
};

var GPUGridLayer =
/*#__PURE__*/
function (_CompositeLayer) {
  _inherits(GPUGridLayer, _CompositeLayer);

  function GPUGridLayer() {
    _classCallCheck(this, GPUGridLayer);

    return _possibleConstructorReturn(this, (GPUGridLayer.__proto__ || Object.getPrototypeOf(GPUGridLayer)).apply(this, arguments));
  }

  _createClass(GPUGridLayer, [{
    key: "initializeState",
    value: function initializeState() {
      var gl = this.context.gl;
      var options = {
        id: "".concat(this.id, "-gpu-aggregator"),
        shaderCache: this.context.shaderCache
      };
      this.state = {
        gpuGridAggregator: new _core._GPUGridAggregator(gl, options)
      };
    }
  }, {
    key: "updateState",
    value: function updateState(_ref) {
      var oldProps = _ref.oldProps,
          props = _ref.props,
          changeFlags = _ref.changeFlags;
      var reprojectNeeded = this.needsReProjectPoints(oldProps, props);

      if (changeFlags.dataChanged || reprojectNeeded) {
        // project data into hexagons, and get sortedBins
        this.getLayerData();
      }
    }
  }, {
    key: "needsReProjectPoints",
    value: function needsReProjectPoints(oldProps, props) {
      return oldProps.cellSize !== props.cellSize || oldProps.gpuAggregation !== props.gpuAggregation || oldProps.getPosition !== props.getPosition;
    }
  }, {
    key: "getLayerData",
    value: function getLayerData() {
      var _this$props = this.props,
          data = _this$props.data,
          cellSize = _this$props.cellSize,
          getPosition = _this$props.getPosition,
          gpuAggregation = _this$props.gpuAggregation;

      var _pointToDensityGridDa = (0, _gpuGridUtils.pointToDensityGridData)({
        data: data,
        cellSizeMeters: cellSize,
        getPosition: getPosition,
        gpuAggregation: gpuAggregation,
        gpuGridAggregator: this.state.gpuGridAggregator
      }),
          countsBuffer = _pointToDensityGridDa.countsBuffer,
          maxCountBuffer = _pointToDensityGridDa.maxCountBuffer,
          gridSize = _pointToDensityGridDa.gridSize,
          gridOrigin = _pointToDensityGridDa.gridOrigin,
          gridOffset = _pointToDensityGridDa.gridOffset;

      this.setState({
        countsBuffer: countsBuffer,
        maxCountBuffer: maxCountBuffer,
        gridSize: gridSize,
        gridOrigin: gridOrigin,
        gridOffset: gridOffset
      });
    } // for subclassing, override this method to return
    // customized sub layer props

  }, {
    key: "getSubLayerProps",
    value: function getSubLayerProps() {
      var _this$props2 = this.props,
          elevationScale = _this$props2.elevationScale,
          fp64 = _this$props2.fp64,
          extruded = _this$props2.extruded,
          cellSize = _this$props2.cellSize,
          coverage = _this$props2.coverage,
          lightSettings = _this$props2.lightSettings;
      var _this$state = this.state,
          countsBuffer = _this$state.countsBuffer,
          maxCountBuffer = _this$state.maxCountBuffer,
          gridSize = _this$state.gridSize,
          gridOrigin = _this$state.gridOrigin,
          gridOffset = _this$state.gridOffset;
      var minColor = MINCOLOR;
      var maxColor = MAXCOLOR; // return props to the sublayer constructor

      return _get(GPUGridLayer.prototype.__proto__ || Object.getPrototypeOf(GPUGridLayer.prototype), "getSubLayerProps", this).call(this, {
        id: 'grid-cell',
        data: this.state.layerData,
        countsBuffer: countsBuffer,
        maxCountBuffer: maxCountBuffer,
        gridSize: gridSize,
        gridOrigin: gridOrigin,
        gridOffset: gridOffset,
        numInstances: gridSize[0] * gridSize[1],
        minColor: minColor,
        maxColor: maxColor,
        fp64: fp64,
        cellSize: cellSize,
        coverage: coverage,
        lightSettings: lightSettings,
        elevationScale: elevationScale,
        extruded: extruded,
        pickable: false
      });
    } // for subclassing, override this method to return
    // customized sub layer class

  }, {
    key: "getSubLayerClass",
    value: function getSubLayerClass() {
      return _gpuGridCellLayer.default;
    }
  }, {
    key: "renderLayers",
    value: function renderLayers() {
      var SubLayerClass = this.getSubLayerClass();
      return new SubLayerClass(this.getSubLayerProps());
    }
  }]);

  return GPUGridLayer;
}(_core.CompositeLayer);

exports.default = GPUGridLayer;
GPUGridLayer.layerName = 'GridLayer';
GPUGridLayer.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ncHUtZ3JpZC1sYXllci9ncHUtZ3JpZC1sYXllci5qcyJdLCJuYW1lcyI6WyJNSU5DT0xPUiIsIk1BWENPTE9SIiwiZGVmYXVsdFByb3BzIiwiZWxldmF0aW9uU2NhbGUiLCJjZWxsU2l6ZSIsInR5cGUiLCJtaW4iLCJtYXgiLCJ2YWx1ZSIsImNvdmVyYWdlIiwiZ2V0UG9zaXRpb24iLCJ4IiwicG9zaXRpb24iLCJleHRydWRlZCIsImZwNjQiLCJwaWNrYWJsZSIsImxpZ2h0U2V0dGluZ3MiLCJncHVBZ2dyZWdhdGlvbiIsIkdQVUdyaWRMYXllciIsImdsIiwiY29udGV4dCIsIm9wdGlvbnMiLCJpZCIsInNoYWRlckNhY2hlIiwic3RhdGUiLCJncHVHcmlkQWdncmVnYXRvciIsIkdQVUdyaWRBZ2dyZWdhdG9yIiwib2xkUHJvcHMiLCJwcm9wcyIsImNoYW5nZUZsYWdzIiwicmVwcm9qZWN0TmVlZGVkIiwibmVlZHNSZVByb2plY3RQb2ludHMiLCJkYXRhQ2hhbmdlZCIsImdldExheWVyRGF0YSIsImRhdGEiLCJjZWxsU2l6ZU1ldGVycyIsImNvdW50c0J1ZmZlciIsIm1heENvdW50QnVmZmVyIiwiZ3JpZFNpemUiLCJncmlkT3JpZ2luIiwiZ3JpZE9mZnNldCIsInNldFN0YXRlIiwibWluQ29sb3IiLCJtYXhDb2xvciIsImxheWVyRGF0YSIsIm51bUluc3RhbmNlcyIsIkdQVUdyaWRDZWxsTGF5ZXIiLCJTdWJMYXllckNsYXNzIiwiZ2V0U3ViTGF5ZXJDbGFzcyIsImdldFN1YkxheWVyUHJvcHMiLCJDb21wb3NpdGVMYXllciIsImxheWVyTmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQW9CQTs7QUFFQTs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLFdBQVcsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxHQUFWLENBQWpCO0FBQ0EsSUFBTUMsV0FBVyxDQUFDLENBQUQsRUFBSSxHQUFK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N0Q7QUFBQSxVQUdWWSxZQUhVLGVBR1ZBLFlBSFU7QUFBQSxVQUdJQyxjQUhKLGVBR0lBLGNBSEo7QUFBQSxVQUdvQkMsUUFIcEIsZUFHb0JBLFFBSHBCO0FBQUEsVUFHOEJDLFVBSDlCLGVBRzhCQSxVQUg5QjtBQUFBLFVBRzBDQyxVQUgxQyxlQUcwQ0EsVUFIMUM7QUFJakIsVUFBTUUsV0FBVzFDLFFBQWpCO0FBQ0EsVUFBTTJDLFdBQVcxQyxRQUFqQixDQUxpQixDQU9qQjs7QUFDQSwwSUFBOEI7QUFDNUJxQixZQUFJLFdBRHdCO0FBRTVCWSxjQUFNLEtBQUtWLEtBQUwsQ0FBV29CLFNBRlc7QUFJNUJSLGtDQUo0QjtBQUs1QkMsc0NBTDRCO0FBTTVCQywwQkFONEI7QUFPNUJDLDhCQVA0QjtBQVE1QkMsOEJBUjRCO0FBUzVCSyxzQkFBY1AsU0FBUyxDQUFULElBQWNBLFNBQVMsQ0FBVCxDQVRBO0FBVTVCSSwwQkFWNEI7QUFXNUJDLDBCQVg0QjtBQWE1QjdCLGtCQWI0QjtBQWM1QlYsMEJBZDRCO0FBZTVCSywwQkFmNEI7QUFnQjVCTyxvQ0FoQjRCO0FBaUI1QmIsc0NBakI0QjtBQWtCNUJVLDBCQWxCNEI7QUFtQjVCRSxrQkFBVTtBQW5Ca0IsT0FBOUI7QUFxQkQsSyxDQUVEO0FBQ0E7Ozs7dUNBQ21CO0FBQ2pCLGFBQU8rQix5QkFBUDtBQUNEOzs7bUNBRWM7QUFDYixVQUFNQyxnQkFBZ0IsS0FBS0MsZ0JBQUwsRUFBdEI7QUFFQSxhQUFPLElBQUlELGFBQUosQ0FBa0IsS0FBS0UsZ0JBQUwsRUFBbEIsQ0FBUDtBQUNEOzs7O0VBdkZ1Q0Msb0I7OztBQTBGMUNoQyxhQUFhaUMsU0FBYixHQUF5QixXQUF6QjtBQUNBakMsYUFBYWhCLFlBQWIsR0FBNEJBLFlBQTVCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE1IC0gMjAxNyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCB7Q29tcG9zaXRlTGF5ZXIsIF9HUFVHcmlkQWdncmVnYXRvciBhcyBHUFVHcmlkQWdncmVnYXRvcn0gZnJvbSAnQGRlY2suZ2wvY29yZSc7XG5cbmltcG9ydCBHUFVHcmlkQ2VsbExheWVyIGZyb20gJy4vZ3B1LWdyaWQtY2VsbC1sYXllcic7XG5cbmltcG9ydCB7cG9pbnRUb0RlbnNpdHlHcmlkRGF0YX0gZnJvbSAnLi9ncHUtZ3JpZC11dGlscyc7XG5cbmNvbnN0IE1JTkNPTE9SID0gWzAsIDAsIDAsIDI1NV07XG5jb25zdCBNQVhDT0xPUiA9IFswLCAyNTUsIDAsIDI1NV07XG5cbmNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgLy8gZWxldmF0aW9uXG4gIGVsZXZhdGlvblNjYWxlOiAxLFxuXG4gIC8vIGdyaWRcbiAgY2VsbFNpemU6IHt0eXBlOiAnbnVtYmVyJywgbWluOiAwLCBtYXg6IDEwMDAsIHZhbHVlOiAxMDAwfSxcbiAgY292ZXJhZ2U6IHt0eXBlOiAnbnVtYmVyJywgbWluOiAwLCBtYXg6IDEsIHZhbHVlOiAxfSxcbiAgZ2V0UG9zaXRpb246IHggPT4geC5wb3NpdGlvbixcbiAgZXh0cnVkZWQ6IGZhbHNlLFxuICBmcDY0OiBmYWxzZSxcbiAgcGlja2FibGU6IGZhbHNlLCAvLyBUT0RPOiBFbmFibGUgcGlja2luZyB3aXRoIEdQVSBBZ2dyZWdhdGlvblxuXG4gIC8vIE9wdGlvbmFsIHNldHRpbmdzIGZvciAnbGlnaHRpbmcnIHNoYWRlciBtb2R1bGVcbiAgbGlnaHRTZXR0aW5nczoge30sXG5cbiAgLy8gR1BVIEFnZ3JlZ2F0aW9uXG4gIGdwdUFnZ3JlZ2F0aW9uOiB0cnVlXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHUFVHcmlkTGF5ZXIgZXh0ZW5kcyBDb21wb3NpdGVMYXllciB7XG4gIGluaXRpYWxpemVTdGF0ZSgpIHtcbiAgICBjb25zdCB7Z2x9ID0gdGhpcy5jb250ZXh0O1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBpZDogYCR7dGhpcy5pZH0tZ3B1LWFnZ3JlZ2F0b3JgLFxuICAgICAgc2hhZGVyQ2FjaGU6IHRoaXMuY29udGV4dC5zaGFkZXJDYWNoZVxuICAgIH07XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGdwdUdyaWRBZ2dyZWdhdG9yOiBuZXcgR1BVR3JpZEFnZ3JlZ2F0b3IoZ2wsIG9wdGlvbnMpXG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZVN0YXRlKHtvbGRQcm9wcywgcHJvcHMsIGNoYW5nZUZsYWdzfSkge1xuICAgIGNvbnN0IHJlcHJvamVjdE5lZWRlZCA9IHRoaXMubmVlZHNSZVByb2plY3RQb2ludHMob2xkUHJvcHMsIHByb3BzKTtcblxuICAgIGlmIChjaGFuZ2VGbGFncy5kYXRhQ2hhbmdlZCB8fCByZXByb2plY3ROZWVkZWQpIHtcbiAgICAgIC8vIHByb2plY3QgZGF0YSBpbnRvIGhleGFnb25zLCBhbmQgZ2V0IHNvcnRlZEJpbnNcbiAgICAgIHRoaXMuZ2V0TGF5ZXJEYXRhKCk7XG4gICAgfVxuICB9XG5cbiAgbmVlZHNSZVByb2plY3RQb2ludHMob2xkUHJvcHMsIHByb3BzKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIG9sZFByb3BzLmNlbGxTaXplICE9PSBwcm9wcy5jZWxsU2l6ZSB8fFxuICAgICAgb2xkUHJvcHMuZ3B1QWdncmVnYXRpb24gIT09IHByb3BzLmdwdUFnZ3JlZ2F0aW9uIHx8XG4gICAgICBvbGRQcm9wcy5nZXRQb3NpdGlvbiAhPT0gcHJvcHMuZ2V0UG9zaXRpb25cbiAgICApO1xuICB9XG5cbiAgZ2V0TGF5ZXJEYXRhKCkge1xuICAgIGNvbnN0IHtkYXRhLCBjZWxsU2l6ZSwgZ2V0UG9zaXRpb24sIGdwdUFnZ3JlZ2F0aW9ufSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qge2NvdW50c0J1ZmZlciwgbWF4Q291bnRCdWZmZXIsIGdyaWRTaXplLCBncmlkT3JpZ2luLCBncmlkT2Zmc2V0fSA9IHBvaW50VG9EZW5zaXR5R3JpZERhdGEoXG4gICAgICB7XG4gICAgICAgIGRhdGEsXG4gICAgICAgIGNlbGxTaXplTWV0ZXJzOiBjZWxsU2l6ZSxcbiAgICAgICAgZ2V0UG9zaXRpb24sXG4gICAgICAgIGdwdUFnZ3JlZ2F0aW9uLFxuICAgICAgICBncHVHcmlkQWdncmVnYXRvcjogdGhpcy5zdGF0ZS5ncHVHcmlkQWdncmVnYXRvclxuICAgICAgfVxuICAgICk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtjb3VudHNCdWZmZXIsIG1heENvdW50QnVmZmVyLCBncmlkU2l6ZSwgZ3JpZE9yaWdpbiwgZ3JpZE9mZnNldH0pO1xuICB9XG5cbiAgLy8gZm9yIHN1YmNsYXNzaW5nLCBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byByZXR1cm5cbiAgLy8gY3VzdG9taXplZCBzdWIgbGF5ZXIgcHJvcHNcbiAgZ2V0U3ViTGF5ZXJQcm9wcygpIHtcbiAgICBjb25zdCB7ZWxldmF0aW9uU2NhbGUsIGZwNjQsIGV4dHJ1ZGVkLCBjZWxsU2l6ZSwgY292ZXJhZ2UsIGxpZ2h0U2V0dGluZ3N9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHtjb3VudHNCdWZmZXIsIG1heENvdW50QnVmZmVyLCBncmlkU2l6ZSwgZ3JpZE9yaWdpbiwgZ3JpZE9mZnNldH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IG1pbkNvbG9yID0gTUlOQ09MT1I7XG4gICAgY29uc3QgbWF4Q29sb3IgPSBNQVhDT0xPUjtcblxuICAgIC8vIHJldHVybiBwcm9wcyB0byB0aGUgc3VibGF5ZXIgY29uc3RydWN0b3JcbiAgICByZXR1cm4gc3VwZXIuZ2V0U3ViTGF5ZXJQcm9wcyh7XG4gICAgICBpZDogJ2dyaWQtY2VsbCcsXG4gICAgICBkYXRhOiB0aGlzLnN0YXRlLmxheWVyRGF0YSxcblxuICAgICAgY291bnRzQnVmZmVyLFxuICAgICAgbWF4Q291bnRCdWZmZXIsXG4gICAgICBncmlkU2l6ZSxcbiAgICAgIGdyaWRPcmlnaW4sXG4gICAgICBncmlkT2Zmc2V0LFxuICAgICAgbnVtSW5zdGFuY2VzOiBncmlkU2l6ZVswXSAqIGdyaWRTaXplWzFdLFxuICAgICAgbWluQ29sb3IsXG4gICAgICBtYXhDb2xvcixcblxuICAgICAgZnA2NCxcbiAgICAgIGNlbGxTaXplLFxuICAgICAgY292ZXJhZ2UsXG4gICAgICBsaWdodFNldHRpbmdzLFxuICAgICAgZWxldmF0aW9uU2NhbGUsXG4gICAgICBleHRydWRlZCxcbiAgICAgIHBpY2thYmxlOiBmYWxzZVxuICAgIH0pO1xuICB9XG5cbiAgLy8gZm9yIHN1YmNsYXNzaW5nLCBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byByZXR1cm5cbiAgLy8gY3VzdG9taXplZCBzdWIgbGF5ZXIgY2xhc3NcbiAgZ2V0U3ViTGF5ZXJDbGFzcygpIHtcbiAgICByZXR1cm4gR1BVR3JpZENlbGxMYXllcjtcbiAgfVxuXG4gIHJlbmRlckxheWVycygpIHtcbiAgICBjb25zdCBTdWJMYXllckNsYXNzID0gdGhpcy5nZXRTdWJMYXllckNsYXNzKCk7XG5cbiAgICByZXR1cm4gbmV3IFN1YkxheWVyQ2xhc3ModGhpcy5nZXRTdWJMYXllclByb3BzKCkpO1xuICB9XG59XG5cbkdQVUdyaWRMYXllci5sYXllck5hbWUgPSAnR3JpZExheWVyJztcbkdQVUdyaWRMYXllci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG4iXX0=