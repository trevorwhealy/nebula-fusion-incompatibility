"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _core = require("@deck.gl/core");

var _layers = require("@deck.gl/layers");

var _gpuGridUtils = require("../gpu-grid-layer/gpu-grid-utils");

var _contourUtils = require("./contour-utils");

function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return right[Symbol.hasInstance](left); } else { return left instanceof right; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var DEFAULT_COLOR = [255, 255, 255];
var DEFAULT_THRESHOLD = 1;
var defaultProps = {
  // grid aggregation
  cellSize: {
    type: 'number',
    min: 0,
    max: 1000,
    value: 1000
  },
  getPosition: function getPosition(x) {
    return x.position;
  },
  // TODO: support for custom weights, defaults to 1
  // contour lines
  contours: [{
    threshold: DEFAULT_THRESHOLD,
    color: DEFAULT_COLOR
  }],
  getStrokeWidth: 1,
  fp64: false
};

var ContourLayer =
/*#__PURE__*/
function (_CompositeLayer) {
  _inherits(ContourLayer, _CompositeLayer);

  function ContourLayer() {
    _classCallCheck(this, ContourLayer);

    return _possibleConstructorReturn(this, (ContourLayer.__proto__ || Object.getPrototypeOf(ContourLayer)).apply(this, arguments));
  }

  _createClass(ContourLayer, [{
    key: "initializeState",
    value: function initializeState() {
      var gl = this.context.gl;
      var options = {
        id: "".concat(this.id, "-gpu-aggregator"),
        shaderCache: this.context.shaderCache
      };
      this.state = {
        contourData: [],
        gridAggregator: new _core._GPUGridAggregator(gl, options)
      };
    }
  }, {
    key: "updateState",
    value: function updateState(_ref) {
      var oldProps = _ref.oldProps,
          props = _ref.props,
          changeFlags = _ref.changeFlags;
      var contoursDirty = false;

      if (changeFlags.dataChanged || oldProps.cellSize !== props.cellSize) {
        contoursDirty = true; // Clear countsData cache

        this.setState({
          countsData: null
        });
        this.aggregateData();
      }

      contoursDirty = contoursDirty || this.rebuildContours({
        oldProps: oldProps,
        props: props
      });

      if (contoursDirty) {
        this.generateContours();
      }
    }
  }, {
    key: "getSubLayerClass",
    value: function getSubLayerClass() {
      return _layers.LineLayer;
    }
  }, {
    key: "getSubLayerProps",
    value: function getSubLayerProps() {
      var _this$props = this.props,
          getStrokeWidth = _this$props.getStrokeWidth,
          fp64 = _this$props.fp64;
      return _get(ContourLayer.prototype.__proto__ || Object.getPrototypeOf(ContourLayer.prototype), "getSubLayerProps", this).call(this, {
        id: 'contour-line-layer',
        data: this.state.contourData,
        fp64: fp64,
        getSourcePosition: function getSourcePosition(d) {
          return d.start;
        },
        getTargetPosition: function getTargetPosition(d) {
          return d.end;
        },
        getColor: this.onGetSublayerColor.bind(this),
        getStrokeWidth: getStrokeWidth
      });
    }
  }, {
    key: "renderLayers",
    value: function renderLayers() {
      var SubLayerClass = this.getSubLayerClass();
      return new SubLayerClass(this.getSubLayerProps());
    } // Private

  }, {
    key: "aggregateData",
    value: function aggregateData() {
      var _this$props2 = this.props,
          data = _this$props2.data,
          cellSize = _this$props2.cellSize,
          getPosition = _this$props2.getPosition,
          gpuAggregation = _this$props2.gpuAggregation,
          fp64 = _this$props2.fp64;

      var _pointToDensityGridDa = (0, _gpuGridUtils.pointToDensityGridData)({
        data: data,
        cellSizeMeters: cellSize,
        getPosition: getPosition,
        gpuAggregation: gpuAggregation,
        gpuGridAggregator: this.state.gridAggregator,
        fp64: fp64
      }),
          countsBuffer = _pointToDensityGridDa.countsBuffer,
          maxCountBuffer = _pointToDensityGridDa.maxCountBuffer,
          gridSize = _pointToDensityGridDa.gridSize,
          gridOrigin = _pointToDensityGridDa.gridOrigin,
          gridOffset = _pointToDensityGridDa.gridOffset;

      this.setState({
        countsBuffer: countsBuffer,
        maxCountBuffer: maxCountBuffer,
        gridSize: gridSize,
        gridOrigin: gridOrigin,
        gridOffset: gridOffset
      });
    }
  }, {
    key: "generateContours",
    value: function generateContours() {
      var _this$state = this.state,
          gridSize = _this$state.gridSize,
          gridOrigin = _this$state.gridOrigin,
          gridOffset = _this$state.gridOffset;
      var countsData = this.state.countsData;

      if (!countsData) {
        var countsBuffer = this.state.countsBuffer;
        countsData = countsBuffer.getData();
        this.setState({
          countsData: countsData
        });
      }

      var _GPUGridAggregator$ge = _core._GPUGridAggregator.getCellData({
        countsData: countsData
      }),
          cellWeights = _GPUGridAggregator$ge.cellWeights;

      var thresholds = this.props.contours.map(function (x) {
        return x.threshold;
      });
      var contourData = (0, _contourUtils.generateContours)({
        thresholds: thresholds,
        cellWeights: cellWeights,
        gridSize: gridSize,
        gridOrigin: gridOrigin,
        cellSize: gridOffset
      });
      this.setState({
        contourData: contourData
      });
    }
  }, {
    key: "onGetSublayerColor",
    value: function onGetSublayerColor(segment) {
      var contours = this.props.contours;
      var color = DEFAULT_COLOR;
      contours.forEach(function (data) {
        if (data.threshold === segment.threshold) {
          color = data.color;
        }
      });
      return color;
    }
  }, {
    key: "rebuildContours",
    value: function rebuildContours(_ref2) {
      var oldProps = _ref2.oldProps,
          props = _ref2.props;

      if (oldProps.contours.length !== props.contours.length) {
        return true;
      }

      var oldThresholds = oldProps.contours.map(function (x) {
        return x.threshold;
      });
      var thresholds = props.contours.map(function (x) {
        return x.threshold;
      });
      return thresholds.some(function (_, i) {
        return thresholds[i] !== oldThresholds[i];
      });
    }
  }]);

  return ContourLayer;
}(_core.CompositeLayer);

exports.default = ContourLayer;
ContourLayer.layerName = 'ContourLayer';
ContourLayer.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,