"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCode = getCode;
exports.getVertices = getVertices;

var _assert = _interopRequireDefault(require("assert"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// All utility mehtods needed to implement Marching Squres algorithm
// Ref: https://en.wikipedia.org/wiki/Marching_squares
// Table to map code to the intersection offsets
// All offsets are relative to the center of marching cell (which is top right corner of grid-cell)
var OFFSET = {
  N: [0, 0.5],
  E: [0.5, 0],
  S: [0, -0.5],
  W: [-0.5, 0]
}; // Note: above wiki page invertes white/black dots for generating the code, we don't

var CODE_OFFSET_MAP = {
  0: [],
  1: [[OFFSET.W, OFFSET.S]],
  2: [[OFFSET.S, OFFSET.E]],
  3: [[OFFSET.W, OFFSET.E]],
  4: [[OFFSET.N, OFFSET.E]],
  5: [[OFFSET.W, OFFSET.N], [OFFSET.S, OFFSET.E]],
  6: [[OFFSET.N, OFFSET.S]],
  7: [[OFFSET.W, OFFSET.N]],
  8: [[OFFSET.W, OFFSET.N]],
  9: [[OFFSET.N, OFFSET.S]],
  10: [[OFFSET.W, OFFSET.S], [OFFSET.N, OFFSET.E]],
  11: [[OFFSET.N, OFFSET.E]],
  12: [[OFFSET.W, OFFSET.E]],
  13: [[OFFSET.S, OFFSET.E]],
  14: [[OFFSET.W, OFFSET.S]],
  15: []
}; // Returns marching square code for given cell

function getCode(params) {
  // Assumptions
  // Origin is on bottom-left , and X increase to right, Y to top
  // When processing one cell, we process 4 cells, by extending row to top and on column to right
  // to create a 2X2 cell grid
  var cellWeights = params.cellWeights,
      thresholdValue = params.thresholdValue,
      cellIndex = params.cellIndex,
      gridSize = params.gridSize;
  var numRows = gridSize[1];
  var numCols = gridSize[0]; // TODO: duplicate top row and right column
  // We shouldn't process the right column

  (0, _assert.default)((cellIndex + 1) % numCols); // We shouldn't process the topmost row

  (0, _assert.default)(cellIndex + 1 < (numRows - 1) * numCols);
  var top = cellWeights[cellIndex + numCols] - thresholdValue >= 0 ? 1 : 0;
  var topRight = cellWeights[cellIndex + numCols + 1] - thresholdValue >= 0 ? 1 : 0;
  var right = cellWeights[cellIndex + 1] - thresholdValue >= 0 ? 1 : 0;
  var current = cellWeights[cellIndex] - thresholdValue >= 0 ? 1 : 0;
  var code = top << 3 | topRight << 2 | right << 1 | current;
  (0, _assert.default)(code >= 0 && code < 16);
  return code;
} // Returns intersection vertices for given cellindex


function getVertices(params) {
  var gridOrigin = params.gridOrigin,
      cellIndex = params.cellIndex,
      cellSize = params.cellSize,
      gridSize = params.gridSize,
      code = params.code;
  var offsets = CODE_OFFSET_MAP[code]; // Reference vertex is top-right its co-ordinates are stored at index 0(X) and 1(Y)

  var row = Math.floor(cellIndex / gridSize[0]);
  var col = cellIndex - row * gridSize[0]; // Move to top-right corner

  var rX = (col + 1) * cellSize[0];
  var rY = (row + 1) * cellSize[1];
  var refVertexX = gridOrigin[0] + rX;
  var refVertexY = gridOrigin[1] + rY;
  var vertices = [];
  offsets.forEach(function (xyOffsets) {
    xyOffsets.forEach(function (offset) {
      var x = refVertexX + offset[0] * cellSize[0];
      var y = refVertexY + offset[1] * cellSize[1];
      vertices.push([x, y]);
    });
  });
  return vertices;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,