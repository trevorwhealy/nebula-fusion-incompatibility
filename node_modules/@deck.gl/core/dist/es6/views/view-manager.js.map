{"version":3,"sources":["../../../src/views/view-manager.js"],"names":["assert","deepEqual","View","Viewport","log","flatten","ViewManager","constructor","props","views","width","height","viewState","controllers","_viewports","_viewportMap","_isUpdating","_needsRedraw","_needsUpdate","_eventManager","eventManager","_eventCallbacks","onViewStateChange","onInteractiveStateChange","Object","seal","setProps","finalize","key","needsRedraw","clearRedrawFlags","redraw","setNeedsRedraw","reason","setNeedsUpdate","getViewports","rect","filter","viewport","containsPixel","getViewport","viewId","getViewState","project","xyz","opts","topLeft","viewports","i","length","contains","unproject","_setViews","_setViewState","_setSize","_update","_rebuildViewports","Number","isFinite","Boolean","map","view","viewportInstance","viewsChanged","_diffViews","viewStateChanged","warn","_onViewStateChange","event","_createController","Controller","type","controller","assign","bind","id","onStateChange","oldControllers","makeViewport","controllerProps","defaultState","x","y","_buildViewportMap","forEach","newViews","oldViews","some","_","equals"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport assert from '../utils/assert';\nimport {deepEqual} from '../utils/deep-equal';\nimport View from '../views/view';\nimport Viewport from '../viewports/viewport';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\n\nexport default class ViewManager {\n  constructor(props = {}) {\n    // List of view descriptors, gets re-evaluated when width/height changes\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n\n    this._viewports = []; // Generated viewports\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = true;\n\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractiveStateChange: props.onInteractiveStateChange\n    };\n\n    Object.seal(this);\n\n    // Init with default map viewport\n    this.setProps(props);\n  }\n\n  finalize() {\n    for (const key in this.controllers) {\n      this.controllers[key].finalize();\n    }\n    this.controllers = {};\n  }\n\n  // Check if a redraw is needed\n  needsRedraw({clearRedrawFlags = true} = {}) {\n    const redraw = this._needsRedraw;\n    if (clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  // Layers will be redrawn (in next animation frame)\n  setNeedsRedraw(reason) {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  /** Get a set of viewports for a given width and height\n   * TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props\n   * @param rect (object, optional) - filter the viewports\n   *   + not provided - return all viewports\n   *   + {x, y} - only return viewports that contain this pixel\n   *   + {x, y, width, height} - only return viewports that overlap with this rectangle\n   */\n  getViewports(rect) {\n    if (rect) {\n      return this._viewports.filter(viewport => viewport.containsPixel(rect));\n    }\n    return this._viewports;\n  }\n\n  getViewport(viewId) {\n    return this._viewportMap[viewId];\n  }\n\n  getViewState(viewId) {\n    // Backward compatibility: view state for single view\n    return this.viewState[viewId] || this.viewState;\n  }\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @return {Array} - [x, y] or [x, y, z] in top left coords\n   */\n  project(xyz, opts = {topLeft: true}) {\n    const viewports = this.getViewports();\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.contains(xyz, opts)) {\n        return viewport.project(xyz, opts);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, opts) {\n    const viewports = this.getViewports();\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.containsPixel(xyz, opts)) {\n        return viewport.unproject(xyz);\n      }\n    }\n    return null;\n  }\n\n  setProps(props) {\n    if ('views' in props) {\n      this._setViews(props.views);\n    }\n\n    // TODO - support multiple view states\n    if ('viewState' in props) {\n      this._setViewState(props.viewState);\n    }\n\n    if ('width' in props || 'height' in props) {\n      this._setSize(props.width, props.height);\n    }\n\n    // Important: avoid invoking _update() inside itself\n    // Nested updates result in unexpected side effects inside _rebuildViewports()\n    // when using auto control in pure-js\n    if (!this._isUpdating) {\n      this._update();\n    }\n  }\n\n  _update() {\n    this._isUpdating = true;\n\n    // Only rebuild viewports if the update flag is set\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    // If viewport transition(s) are triggered during viewports update, controller(s)\n    // will immediately call `onViewStateChange` which calls `viewManager.setProps` again.\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    this._isUpdating = false;\n  }\n\n  _setSize(width, height) {\n    assert(Number.isFinite(width) && Number.isFinite(height));\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.setNeedsUpdate('Size changed');\n    }\n  }\n\n  // Update the view descriptor list and set change flag if needed\n  // Does not actually rebuild the `Viewport`s until `getViewports` is called\n  _setViews(views) {\n    // DEPRECATED: Ensure any \"naked\" Viewports are wrapped in View instances\n    views = flatten(views, {filter: Boolean}).map(\n      view => (view instanceof Viewport ? new View({viewportInstance: view}) : view)\n    );\n\n    const viewsChanged = this._diffViews(views, this.views);\n    if (viewsChanged) {\n      this.setNeedsUpdate('views changed');\n    }\n\n    this.views = views;\n  }\n\n  _setViewState(viewState) {\n    if (viewState) {\n      const viewStateChanged = !deepEqual(viewState, this.viewState);\n\n      if (viewStateChanged) {\n        this.setNeedsUpdate('viewState changed');\n      }\n\n      this.viewState = viewState;\n    } else {\n      log.warn('setting null viewState')();\n    }\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  _onViewStateChange(viewId, event) {\n    event.viewId = viewId;\n    this._eventCallbacks.onViewStateChange(event);\n  }\n\n  _createController(props) {\n    const Controller = props.type;\n\n    const controller = new Controller(\n      Object.assign(\n        {\n          eventManager: this._eventManager,\n          // Set an internal callback that calls the prop callback if provided\n          onViewStateChange: this._onViewStateChange.bind(this, props.id),\n          onStateChange: this._eventCallbacks.onInteractiveStateChange\n        },\n        props\n      )\n    );\n\n    return controller;\n  }\n\n  // Rebuilds viewports from descriptors towards a certain window size\n  _rebuildViewports() {\n    const {width, height, views} = this;\n\n    const oldControllers = this.controllers;\n    this.controllers = {};\n\n    this._viewports = views.map(view => {\n      const viewState = this.getViewState(view.id);\n      const viewport = view.makeViewport({width, height, viewState});\n\n      // Update the controller\n      if (view.controller) {\n        const controllerProps = Object.assign({}, view.controller, view.defaultState, viewState, {\n          id: view.id,\n          x: viewport.x,\n          y: viewport.y,\n          width: viewport.width,\n          height: viewport.height\n        });\n\n        let controller = oldControllers[view.id];\n        if (controller) {\n          controller.setProps(controllerProps);\n        } else {\n          controller = this._createController(controllerProps);\n        }\n        this.controllers[view.id] = controller;\n      }\n\n      return viewport;\n    });\n\n    // Remove unused controllers\n    for (const id in oldControllers) {\n      if (!this.controllers[id]) {\n        oldControllers[id].finalize();\n      }\n    }\n\n    this._buildViewportMap();\n  }\n\n  _buildViewportMap() {\n    // Build a view id to view index\n    this._viewportMap = {};\n    this._viewports.forEach(viewport => {\n      if (viewport.id) {\n        // TODO - issue warning if multiple viewports use same id\n        this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;\n      }\n    });\n  }\n\n  // Check if viewport array has changed, returns true if any change\n  // Note that descriptors can be the same\n  _diffViews(newViews, oldViews) {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n}\n"],"file":"view-manager.js"}