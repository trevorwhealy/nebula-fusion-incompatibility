{"version":3,"sources":["../../../src/views/orbit-view.js"],"names":["View","Viewport","createMat4","transformVector","mat4_multiply","mat4_lookAt","mat4_scale","mat4_perspective","mat4_translate","mat4_rotateX","mat4_rotateY","mat4_rotateZ","OrbitController","DEGREES_TO_RADIANS","Math","PI","OrbitViewport","project","xyz","topLeft","v","pixelProjectionMatrix","x","y","z","y2","height","unproject","pixelUnprojectionMatrix","OrbitView","getDistance","boundingBox","fov","halfMaxSide","max","distance","tan","controller","_getControllerProps","type","_getViewport","props","viewState","width","fovy","near","far","aspect","Number","isFinite","fovyRadians","id","viewMatrix","_getViewMatrix","projectionMatrix","rotationX","rotationOrbit","orbitAxis","lookAt","up","zoom","rotationMatrix","translateMatrix","fitBounds","displayName"],"mappings":"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","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\n\n// TODO - use math.gl\nimport {createMat4, transformVector} from '../utils/math-utils';\nimport mat4_multiply from 'gl-mat4/multiply';\nimport mat4_lookAt from 'gl-mat4/lookAt';\nimport mat4_scale from 'gl-mat4/scale';\nimport mat4_perspective from 'gl-mat4/perspective';\nimport mat4_translate from 'gl-mat4/translate';\nimport mat4_rotateX from 'gl-mat4/rotateX';\nimport mat4_rotateY from 'gl-mat4/rotateY';\nimport mat4_rotateZ from 'gl-mat4/rotateZ';\nimport OrbitController from '../controllers/orbit-controller';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\n// TODO - remove need for custom project overrides\nclass OrbitViewport extends Viewport {\n  project(xyz, {topLeft = false} = {}) {\n    const v = transformVector(this.pixelProjectionMatrix, [...xyz, 1]);\n    const [x, y, z] = v;\n    const y2 = topLeft ? this.height - y : y;\n    return [x, y2, z];\n  }\n\n  unproject(xyz, {topLeft = false} = {}) {\n    const [x, y, z] = xyz;\n    const y2 = topLeft ? this.height - y : y;\n    return transformVector(this.pixelUnprojectionMatrix, [x, y2, z, 1]);\n  }\n}\n\nexport default class OrbitView extends View {\n  // Get camera `distance` to make view fit a box centered at lookat position in the viewport.\n  // @param {Array} boundingBox - [sizeX, sizeY, sizeZ]], defines the dimensions of bounding box\n  static getDistance({boundingBox, fov}) {\n    const halfMaxSide = Math.max(boundingBox[0], boundingBox[1], boundingBox[2]) / 2;\n    const distance = halfMaxSide / Math.tan(((fov / 180) * Math.PI) / 2);\n    return distance;\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: OrbitController\n    });\n  }\n\n  /* eslint-disable complexity, max-statements */\n  _getViewport(props) {\n    const {viewState} = props;\n    const width = props.width || 1;\n    const height = props.height || 1;\n\n    // Get view matrix parameters from view state\n    // Projection matrix arguments\n    // TODO - Extracting from viewState is deprecated\n    const fovy = props.fov || props.fovy || viewState.fovy || 75; // Field of view covered by camera\n    const near = props.near || viewState.near || 1; // Distance of near clipping plane\n    const far = props.far || viewState.far || 100; // Distance of far clipping plane\n    const aspect = Number.isFinite(viewState.aspect) ? viewState.aspect : width / height;\n\n    const fovyRadians = fovy * DEGREES_TO_RADIANS;\n\n    return new OrbitViewport({\n      id: this.id,\n      viewMatrix: this._getViewMatrix(props.viewState),\n      projectionMatrix: mat4_perspective([], fovyRadians, aspect, near, far),\n      x: props.x,\n      y: props.y,\n      width,\n      height\n    });\n  }\n  /* eslint-enable complexity, max-statements */\n\n  _getViewMatrix(viewState) {\n    const {\n      distance, // From eye position to lookAt\n      rotationX = 0, // Rotating angle around X axis\n      rotationOrbit = 0, // Rotating angle around orbit axis\n      orbitAxis = 'Z', // Orbit axis with 360 degrees rotating freedom, can only be 'Y' or 'Z'\n\n      lookAt = [0, 0, 0], // Which point is camera looking at, default origin\n      up = [0, 1, 0], // Defines up direction, default positive y axis\n      zoom = 1\n    } = viewState;\n\n    const rotationMatrix = mat4_rotateX([], createMat4(), (-rotationX / 180) * Math.PI);\n    if (orbitAxis === 'Z') {\n      mat4_rotateZ(rotationMatrix, rotationMatrix, (-rotationOrbit / 180) * Math.PI);\n    } else {\n      mat4_rotateY(rotationMatrix, rotationMatrix, (-rotationOrbit / 180) * Math.PI);\n    }\n\n    const translateMatrix = createMat4();\n    mat4_scale(translateMatrix, translateMatrix, [zoom, zoom, zoom]);\n    mat4_translate(translateMatrix, translateMatrix, [-lookAt[0], -lookAt[1], -lookAt[2]]);\n\n    const viewMatrix = mat4_lookAt([], [0, 0, distance], [0, 0, 0], up);\n    mat4_multiply(\n      viewMatrix,\n      viewMatrix,\n      mat4_multiply(rotationMatrix, rotationMatrix, translateMatrix)\n    );\n\n    return viewMatrix;\n  }\n\n  /** Move camera to make a model bounding box centered at lookat position fit in the viewport.\n   * @param {Array} boundingBox - [sizeX, sizeY, sizeZ]], define the dimensions of bounding box\n   * @returns a new OrbitViewport object\n   */\n  fitBounds(boundingBox, viewState) {\n    const {width, height, fov, near, far} = this;\n\n    return this._getViewport({\n      width,\n      height,\n      fov,\n      near,\n      far\n    });\n  }\n}\n\nOrbitView.displayName = 'OrbitView';\n"],"file":"orbit-view.js"}