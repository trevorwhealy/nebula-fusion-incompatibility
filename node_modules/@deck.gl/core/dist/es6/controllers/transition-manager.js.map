{"version":3,"sources":["../../../src/controllers/transition-manager.js"],"names":["LinearInterpolator","Transition","assert","noop","TRANSITION_EVENTS","BREAK","SNAP_TO_END","IGNORE","DEFAULT_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","transitionInterruption","onTransitionStart","onTransitionInterrupt","onTransitionEnd","TransitionManager","constructor","ControllerState","props","Object","assign","animation","propsInTransition","transition","onViewStateChange","_onTransitionFrame","bind","_onTransitionUpdate","finalize","cancelAnimationFrame","getViewportInTransition","processViewStateChange","nextProps","transitionTriggered","currentProps","_shouldIgnoreViewportChange","_isTransitionEnabled","startProps","interruption","endProps","_triggerTransition","cancel","_isUpdateDueToCurrentTransition","inProgress","interpolator","arePropsEqual","startViewstate","endViewStateProps","shortestPathFrom","initialProps","initializeProps","start","duration","easing","end","onStart","onUpdate","onInterrupt","_onTransitionEnd","onEnd","requestAnimationFrame","update","Date","now","callback","time","viewport","interpolateProps","getViewportProps","viewState","interactionState","inTransition","defaultProps"],"mappings":"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","sourcesContent":["/* global requestAnimationFrame, cancelAnimationFrame */\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport Transition from '../transitions/transition';\nimport assert from '../utils/assert';\n\nconst noop = () => {};\n\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3\n};\n\nconst DEFAULT_PROPS = {\n  transitionDuration: 0,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop\n};\n\nexport default class TransitionManager {\n  constructor(ControllerState, props = {}) {\n    assert(ControllerState);\n    this.ControllerState = ControllerState;\n    this.props = Object.assign({}, DEFAULT_PROPS, props);\n    this.animation = null;\n    this.propsInTransition = null;\n    this.transition = new Transition();\n\n    this.onViewStateChange = props.onViewStateChange;\n\n    this._onTransitionFrame = this._onTransitionFrame.bind(this);\n    this._onTransitionUpdate = this._onTransitionUpdate.bind(this);\n  }\n\n  finalize() {\n    cancelAnimationFrame(this.animation);\n  }\n\n  // Returns current transitioned viewport.\n  getViewportInTransition() {\n    return this.propsInTransition;\n  }\n\n  // Process the vewiport change, either ignore or trigger a new transition.\n  // Return true if a new transition is triggered, false otherwise.\n  processViewStateChange(nextProps) {\n    let transitionTriggered = false;\n    const currentProps = this.props;\n    // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n    nextProps = Object.assign({}, DEFAULT_PROPS, nextProps);\n    this.props = nextProps;\n\n    // NOTE: Be cautious re-ordering statements in this function.\n    if (this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return transitionTriggered;\n    }\n\n    if (this._isTransitionEnabled(nextProps)) {\n      const startProps = Object.assign(\n        {},\n        currentProps,\n        this.transition.interruption === TRANSITION_EVENTS.SNAP_TO_END\n          ? this.transition.endProps\n          : this.propsInTransition || currentProps\n      );\n\n      this._triggerTransition(startProps, nextProps);\n\n      transitionTriggered = true;\n    } else {\n      this.transition.cancel();\n    }\n\n    return transitionTriggered;\n  }\n\n  // Helper methods\n\n  _isTransitionEnabled(props) {\n    return props.transitionDuration > 0 && props.transitionInterpolator;\n  }\n\n  _isUpdateDueToCurrentTransition(props) {\n    if (this.transition.inProgress) {\n      return this.transition.interpolator.arePropsEqual(props, this.propsInTransition);\n    }\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps, nextProps) {\n    if (this.transition.inProgress) {\n      // Ignore update if it is requested to be ignored\n      return (\n        this.transition.interruption === TRANSITION_EVENTS.IGNORE ||\n        // Ignore update if it is due to current active transition.\n        this._isUpdateDueToCurrentTransition(nextProps)\n      );\n    } else if (this._isTransitionEnabled(nextProps)) {\n      // Ignore if none of the viewport props changed.\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n    return true;\n  }\n\n  _triggerTransition(startProps, endProps) {\n    assert(this._isTransitionEnabled(endProps), 'Transition is not enabled');\n\n    cancelAnimationFrame(this.animation);\n\n    const startViewstate = new this.ControllerState(startProps);\n    const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n\n    const initialProps = endProps.transitionInterpolator.initializeProps(\n      startProps,\n      endViewStateProps\n    );\n\n    this.propsInTransition = {};\n    this.transition.start({\n      duration: endProps.transitionDuration,\n      easing: endProps.transitionEasing,\n      interpolator: endProps.transitionInterpolator,\n      interruption: endProps.transitionInterruption,\n\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n\n      onStart: endProps.onTransitionStart,\n      onUpdate: this._onTransitionUpdate,\n      onInterrupt: this._onTransitionEnd(endProps.onTransitionInterrupt),\n      onEnd: this._onTransitionEnd(endProps.onTransitionEnd)\n    });\n\n    this._onTransitionFrame();\n  }\n\n  _onTransitionFrame() {\n    // _updateViewport() may cancel the animation\n    this.animation = requestAnimationFrame(this._onTransitionFrame);\n    this.transition.update(Date.now());\n  }\n\n  _onTransitionEnd(callback) {\n    return transition => {\n      cancelAnimationFrame(this.animation);\n      this.propsInTransition = null;\n      callback(transition);\n    };\n  }\n\n  _onTransitionUpdate(transition) {\n    // NOTE: Be cautious re-ordering statements in this function.\n    const {interpolator, startProps, endProps, time} = transition;\n\n    const viewport = interpolator.interpolateProps(startProps, endProps, time);\n\n    // This gurantees all props (e.g. bearing, longitude) are normalized\n    // So when viewports are compared they are in same range.\n    this.propsInTransition = new this.ControllerState(\n      Object.assign({}, this.props, viewport)\n    ).getViewportProps();\n\n    if (this.onViewStateChange) {\n      this.onViewStateChange({\n        viewState: this.propsInTransition,\n        interactionState: {inTransition: true}\n      });\n    }\n  }\n}\n\nTransitionManager.defaultProps = DEFAULT_PROPS;\n"],"file":"transition-manager.js"}