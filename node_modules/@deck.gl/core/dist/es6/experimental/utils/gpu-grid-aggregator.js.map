{"version":3,"sources":["../../../../src/experimental/utils/gpu-grid-aggregator.js"],"names":["GL","Buffer","Model","Framebuffer","Texture2D","FEATURES","hasFeatures","isWebGL2","log","assert","fp64","fp64Utils","worldToPixels","fp64ifyMatrix4","IDENTITY_MATRIX","PIXEL_SIZE","AGGREGATE_TO_GRID_VS","AGGREGATE_TO_GRID_VS_FP64","AGGREGATE_TO_GRID_FS","AGGREGATE_ALL_VS_FP64","AGGREGATE_ALL_FS","DEFAULT_CHANGE_FLAGS","dataChanged","viewportChanged","cellSizeChanged","GPUGridAggregator","getAggregationData","countsData","maxCountData","pixelIndex","length","index","cellCount","cellWeight","totalCount","totalWeight","maxCellWieght","getCellData","cellWeights","cellCounts","push","constructor","gl","opts","id","shaderCache","state","_hasGPUSupport","BLEND_EQUATION_MINMAX","COLOR_ATTACHMENT_RGBA32F","TEXTURE_FILTER_LINEAR_FLOAT","_setupGPUResources","run","positions","positions64xyLow","weights","changeFlags","cellSize","viewport","width","height","countsBuffer","maxCountBuffer","gridTransformMatrix","projectPoints","useGPU","_setState","transformMatrix","pixelProjectionMatrix","aggregationParams","_updateGridSize","_runAggregationOnGPU","warn","_runAggregationOnCPU","_getAggregateData","gridAggregationFramebuffer","readPixelsToBuffer","buffer","type","FLOAT","allAggregrationFramebuffer","countsTexture","texture","maxCountTexture","_getAggregationModel","vs","fs","modules","vertexCount","drawMode","POINTS","_getAllAggregationModel","isInstanced","instanceCount","attributes","position","size","data","Float32Array","_projectPositions","projectedPositions","projectFlat","x","y","_renderAggregateData","numCol","numRow","windowSize","gridAggregationModel","allAggregationModel","uProjectionMatrixFP64","gridSize","bind","clear","COLOR_BUFFER_BIT","draw","parameters","clearColor","clearDepth","blend","depthTest","blendEquation","FUNC_ADD","blendFunc","ONE","moduleSettings","uniforms","uProjectionMatrix","unbind","MAX","uSampler","ELEMENTCOUNT","counts","pos","fill","maxWeight","gridPos","weight","Number","isFinite","colId","Math","floor","rowId","i","maxCountBufferData","subData","_updateModels","updateObject","Object","assign","setupFramebuffer","_setupModels","delete","positionsBuffer","positions64xyLowBuffer","weightsBuffer","aggregationModelAttributes","createPos64xyLow","setVertexCount","setAttributes","setInstanceCount","framebufferSize","resize","ceil","format","RGBA32F","border","mipmaps","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","dataFormat","RGBA","fb","attachments","COLOR_ATTACHMENT0"],"mappings":"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","sourcesContent":["import GL from 'luma.gl/constants';\nimport {Buffer, Model, Framebuffer, Texture2D, FEATURES, hasFeatures, isWebGL2} from 'luma.gl';\nimport {log} from '@deck.gl/core';\nimport assert from 'assert';\nimport {fp64 as fp64Utils} from 'luma.gl';\nimport {worldToPixels} from 'viewport-mercator-project';\nconst {fp64ifyMatrix4} = fp64Utils;\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\nconst PIXEL_SIZE = 4; // RGBA32F\nconst AGGREGATE_TO_GRID_VS = `\\\nattribute vec2 positions;\nattribute vec2 positions64xyLow;\nattribute float weights;\nuniform vec2 windowSize;\nuniform vec2 cellSize;\nuniform vec2 gridSize;\nuniform mat4 uProjectionMatrix;\nuniform bool projectPoints;\n\nvarying float vWeights;\n\nvec2 project_to_pixel(vec2 pos) {\n  vec4 position = vec4(pos, 0., 1.);\n  vec4 result =  uProjectionMatrix * position;\n  return result.xy/result.w;\n}\n\nvoid main(void) {\n\n  vWeights = weights;\n\n  vec2 windowPos = positions;\n  vec2 windowPos64xyLow = positions64xyLow;\n  if (projectPoints) {\n    windowPos = project_position(windowPos);\n  }\n\n  windowPos = project_to_pixel(windowPos);\n\n  // Transform (0,0):windowSize -> (0, 0): gridSize\n  vec2 pos = floor(windowPos / cellSize);\n\n  // Transform (0,0):gridSize -> (-1, -1):(1,1)\n  pos = (pos * (2., 2.) / (gridSize)) - (1., 1.);\n\n  // Move to pixel center, pixel-size in screen sapce (2/gridSize) * 0.5 => 1/gridSize\n  vec2 offset = 1.0 / gridSize;\n  pos = pos + offset;\n\n  gl_Position = vec4(pos, 0.0, 1.0);\n}\n`;\n\nconst AGGREGATE_TO_GRID_VS_FP64 = `\\\nattribute vec2 positions;\nattribute vec2 positions64xyLow;\nattribute float weights;\nuniform vec2 windowSize;\nuniform vec2 cellSize;\nuniform vec2 gridSize;\nuniform vec2 uProjectionMatrixFP64[16];\nuniform bool projectPoints;\n\nvarying float vWeights;\n\nvoid project_to_pixel(vec2 pos, vec2 pos64xyLow, out vec2 pixelXY64[2]) {\n\n  vec2 result64[4];\n  vec2 position64[4];\n  position64[0] = vec2(pos.x, pos64xyLow.x);\n  position64[1] = vec2(pos.y, pos64xyLow.y);\n  position64[2] = vec2(0., 0.);\n  position64[3] = vec2(1., 0.);\n  mat4_vec4_mul_fp64(uProjectionMatrixFP64, position64,\n  result64);\n\n  pixelXY64[0] = div_fp64(result64[0], result64[3]);\n  pixelXY64[1] = div_fp64(result64[1], result64[3]);\n}\n\nvoid main(void) {\n\n  vWeights = weights;\n\n  vec2 windowPos = positions;\n  vec2 windowPos64xyLow = positions64xyLow;\n  if (projectPoints) {\n    vec2 projectedXY[2];\n    project_position_fp64(windowPos, windowPos64xyLow, projectedXY);\n    windowPos.x = projectedXY[0].x;\n    windowPos.y = projectedXY[1].x;\n    windowPos64xyLow.x = projectedXY[0].y;\n    windowPos64xyLow.y = projectedXY[1].y;\n  }\n\n  vec2 pixelXY64[2];\n  project_to_pixel(windowPos, windowPos64xyLow, pixelXY64);\n\n  // Transform (0,0):windowSize -> (0, 0): gridSize\n  vec2 gridXY64[2];\n  gridXY64[0] = div_fp64(pixelXY64[0], vec2(cellSize.x, 0));\n  gridXY64[1] = div_fp64(pixelXY64[1], vec2(cellSize.y, 0));\n  float x = floor(gridXY64[0].x);\n  float y = floor(gridXY64[1].x);\n  vec2 pos = vec2(x, y);\n\n  // Transform (0,0):gridSize -> (-1, -1):(1,1)\n  pos = (pos * (2., 2.) / (gridSize)) - (1., 1.);\n\n  // Move to pixel center, pixel-size in screen sapce (2/gridSize) * 0.5 => 1/gridSize\n  vec2 offset = 1.0 / gridSize;\n  pos = pos + offset;\n\n  gl_Position = vec4(pos, 0.0, 1.0);\n}\n`;\n\nconst AGGREGATE_TO_GRID_FS = `\\\nprecision highp float;\n\nvarying float vWeights;\n\nvoid main(void) {\n  gl_FragColor = vec4(1., vWeights, 0, 0.0);\n}\n`;\n\nconst AGGREGATE_ALL_VS_FP64 = `\\\n#version 300 es\n\nin vec2 position;\nuniform vec2 gridSize;\n\nout vec2 vTextureCoord;\nvoid main(void) {\n  // Map each position to single pixel\n  vec2 pos = vec2(-1.0, -1.0);\n\n  // Move to pixel center, pixel-size in screen sapce (2/gridSize) * 0.5 => 1/gridSize\n  vec2 offset = 1.0 / gridSize;\n  pos = pos + offset;\n\n  gl_Position = vec4(pos, 0.0, 1.0);\n\n  float yIndex = floor(float(gl_InstanceID) / gridSize[0]);\n  float xIndex = float(gl_InstanceID) - (yIndex * gridSize[0]);\n\n  vec2 yIndexFP64 = vec2(yIndex, 0.);\n  vec2 xIndexFP64 = vec2(xIndex, 0.);\n  vec2 gridSizeYFP64 = vec2(gridSize[1], 0.);\n  vec2 gridSizeXFP64 = vec2(gridSize[0], 0.);\n\n  vec2 texCoordXFP64 = div_fp64(yIndexFP64, gridSizeYFP64);\n  vec2 texCoordYFP64 = div_fp64(xIndexFP64, gridSizeXFP64);\n\n  vTextureCoord = vec2(texCoordYFP64.x, texCoordXFP64.x);\n}\n`;\n\nconst AGGREGATE_ALL_FS = `\\\n#version 300 es\nprecision highp float;\n\nin vec2 vTextureCoord;\nuniform sampler2D uSampler;\nout vec4 fragColor;\nvoid main(void) {\n  vec4 textureColor = texture(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\n  // Red: total count, Green: total weight, Alpha: maximum wieght\n  fragColor = vec4(textureColor.r, textureColor.g, 0., textureColor.g);\n}\n`;\n\nconst DEFAULT_CHANGE_FLAGS = {\n  dataChanged: true,\n  viewportChanged: true,\n  cellSizeChanged: true\n};\n\nexport default class GPUGridAggregator {\n  // Decode and return aggregation data of given pixel.\n  static getAggregationData({countsData, maxCountData, pixelIndex}) {\n    assert(countsData.length >= (pixelIndex + 1) * PIXEL_SIZE);\n    assert(maxCountData.length === PIXEL_SIZE);\n    const index = pixelIndex * PIXEL_SIZE;\n    const cellCount = countsData[index];\n    const cellWeight = countsData[index + 1];\n    const totalCount = maxCountData[0];\n    const totalWeight = maxCountData[1];\n    const maxCellWieght = maxCountData[3];\n    return {\n      cellCount,\n      cellWeight,\n      totalCount,\n      totalWeight,\n      maxCellWieght\n    };\n  }\n\n  // Decodes and retuns counts and weights of all cells\n  static getCellData({countsData}) {\n    const cellWeights = [];\n    const cellCounts = [];\n    for (let index = 0; index < countsData.length; index += 4) {\n      cellCounts.push(countsData[index]);\n      cellWeights.push(countsData[index + 1]);\n    }\n    return {cellCounts, cellWeights};\n  }\n\n  constructor(gl, opts = {}) {\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.shaderCache = opts.shaderCache || null;\n    this.gl = gl;\n    this.state = {};\n    this._hasGPUSupport =\n      isWebGL2(gl) &&\n      hasFeatures(\n        this.gl,\n        FEATURES.BLEND_EQUATION_MINMAX,\n        FEATURES.COLOR_ATTACHMENT_RGBA32F,\n        FEATURES.TEXTURE_FILTER_LINEAR_FLOAT\n      );\n    if (this._hasGPUSupport) {\n      this._setupGPUResources();\n    }\n  }\n\n  // Perform aggregation and retun the results\n  run({\n    positions,\n    positions64xyLow,\n    weights,\n    changeFlags = DEFAULT_CHANGE_FLAGS,\n    cellSize,\n    viewport,\n    width,\n    height,\n    countsBuffer = null,\n    maxCountBuffer = null,\n    gridTransformMatrix = null,\n    projectPoints = false,\n    useGPU = true,\n    fp64 = false\n  } = {}) {\n    if (this.state.useGPU !== useGPU) {\n      changeFlags = DEFAULT_CHANGE_FLAGS;\n    }\n    this._setState({useGPU});\n    const transformMatrix =\n      gridTransformMatrix || (viewport && viewport.pixelProjectionMatrix) || IDENTITY_MATRIX;\n    const aggregationParams = {\n      positions,\n      positions64xyLow,\n      weights,\n      changeFlags,\n      cellSize,\n      viewport,\n      gridTransformMatrix: transformMatrix,\n      countsBuffer,\n      maxCountBuffer,\n      projectPoints,\n      fp64\n    };\n\n    this._updateGridSize({viewport, cellSize, width, height});\n    if (this._hasGPUSupport && useGPU) {\n      return this._runAggregationOnGPU(aggregationParams);\n    }\n    if (useGPU) {\n      log.warn('ScreenGridAggregator: GPU Aggregation not supported, falling back to CPU');\n    }\n    return this._runAggregationOnCPU(aggregationParams);\n  }\n\n  // PRIVATE\n\n  _getAggregateData(opts) {\n    let {countsBuffer, maxCountBuffer} = opts;\n    countsBuffer = this.gridAggregationFramebuffer.readPixelsToBuffer({\n      buffer: countsBuffer,\n      type: GL.FLOAT\n    });\n    maxCountBuffer = this.allAggregrationFramebuffer.readPixelsToBuffer({\n      width: 1,\n      height: 1,\n      type: GL.FLOAT,\n      buffer: maxCountBuffer\n    });\n    return {\n      countsBuffer,\n      countsTexture: this.gridAggregationFramebuffer.texture,\n      maxCountBuffer,\n      maxCountTexture: this.allAggregrationFramebuffer.texture\n    };\n  }\n\n  _getAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'Gird-Aggregation-Model',\n      vs: fp64 ? AGGREGATE_TO_GRID_VS_FP64 : AGGREGATE_TO_GRID_VS,\n      fs: AGGREGATE_TO_GRID_FS,\n      modules: fp64 ? ['fp64', 'project64'] : ['project32'],\n      shaderCache,\n      vertexCount: 0,\n      drawMode: GL.POINTS\n    });\n  }\n\n  _getAllAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'All-Aggregation-Model',\n      vs: AGGREGATE_ALL_VS_FP64,\n      fs: AGGREGATE_ALL_FS,\n      modules: ['fp64'],\n      shaderCache,\n      vertexCount: 1,\n      drawMode: GL.POINTS,\n      isInstanced: true,\n      instanceCount: 0,\n      attributes: {position: new Buffer(gl, {size: 2, data: new Float32Array([0, 0])})}\n    });\n  }\n\n  _projectPositions(opts) {\n    let {projectedPositions} = this.state;\n    if (!projectedPositions || opts.changeFlags.dataChanged || opts.changeFlags.viewportChanged) {\n      const {positions, viewport} = opts;\n      projectedPositions = [];\n      for (let index = 0; index < positions.length; index += 2) {\n        const [x, y] = viewport.projectFlat([positions[index], positions[index + 1]]);\n        projectedPositions.push(x, y);\n      }\n      this._setState({projectedPositions});\n    }\n  }\n\n  _renderAggregateData(opts) {\n    const {cellSize, viewport, gridTransformMatrix, projectPoints} = opts;\n    const {numCol, numRow, windowSize} = this.state;\n    const {\n      gl,\n      gridAggregationFramebuffer,\n      gridAggregationModel,\n      allAggregrationFramebuffer,\n      allAggregationModel\n    } = this;\n\n    const uProjectionMatrixFP64 = fp64ifyMatrix4(gridTransformMatrix);\n    const gridSize = [numCol, numRow];\n\n    gridAggregationFramebuffer.bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gridAggregationModel.draw({\n      parameters: {\n        clearColor: [0, 0, 0, 0],\n        clearDepth: 0,\n        blend: true,\n        depthTest: false,\n        blendEquation: GL.FUNC_ADD,\n        blendFunc: [GL.ONE, GL.ONE]\n      },\n      moduleSettings: {\n        viewport\n      },\n      uniforms: {\n        windowSize,\n        cellSize,\n        gridSize,\n        uProjectionMatrix: gridTransformMatrix,\n        uProjectionMatrixFP64,\n        projectPoints,\n        ONE: 1.0\n      }\n    });\n    gridAggregationFramebuffer.unbind();\n\n    allAggregrationFramebuffer.bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    allAggregationModel.draw({\n      parameters: {\n        clearColor: [0, 0, 0, 0],\n        clearDepth: 0,\n        blend: true,\n        depthTest: false,\n        blendEquation: [GL.FUNC_ADD, GL.MAX],\n        blendFunc: [GL.ONE, GL.ONE]\n      },\n      uniforms: {\n        uSampler: gridAggregationFramebuffer.texture,\n        gridSize,\n        ONE: 1.0\n      }\n    });\n    allAggregrationFramebuffer.unbind();\n  }\n\n  /* eslint-disable max-statements */\n  _runAggregationOnCPU(opts) {\n    const ELEMENTCOUNT = 4;\n    const {positions, weights, cellSize, projectPoints, gridTransformMatrix} = opts;\n    let {countsBuffer, maxCountBuffer} = opts;\n    const {numCol, numRow} = this.state;\n    // Each element contains 4 floats to match with GPU ouput\n    const counts = new Float32Array(numCol * numRow * ELEMENTCOUNT);\n\n    let pos = positions;\n    if (projectPoints) {\n      this._projectPositions(opts);\n      pos = this.state.projectedPositions;\n    }\n\n    counts.fill(0);\n    let maxWeight = 0;\n    let totalCount = 0;\n    let totalWeight = 0;\n    for (let index = 0; index < pos.length; index += 2) {\n      const gridPos = worldToPixels([pos[index], pos[index + 1], 0], gridTransformMatrix);\n      const x = gridPos[0];\n      const y = gridPos[1];\n      const weight = weights ? weights[index / 2] : 1;\n      assert(Number.isFinite(weight));\n      const colId = Math.floor(x / cellSize[0]);\n      const rowId = Math.floor(y / cellSize[1]);\n      if (colId >= 0 && colId < numCol && rowId >= 0 && rowId < numRow) {\n        const i = (colId + rowId * numCol) * ELEMENTCOUNT;\n        counts[i]++;\n        counts[i + 1] += weight;\n        totalCount += 1;\n        totalWeight += weight;\n        if (counts[i + 1] > maxWeight) {\n          maxWeight = counts[i + 1];\n        }\n      }\n    }\n    const maxCountBufferData = new Float32Array(ELEMENTCOUNT);\n    // Store total count value in Red/X channel\n    maxCountBufferData[0] = totalCount;\n    // Store total weight value in Green/Y channel\n    maxCountBufferData[1] = totalWeight;\n    // Store max weight value in alpha/W channel.\n    maxCountBufferData[3] = maxWeight;\n\n    // Load data to WebGL buffer.\n    if (countsBuffer) {\n      countsBuffer.subData({data: counts});\n    } else {\n      countsBuffer = new Buffer(this.gl, {data: counts});\n    }\n    if (maxCountBuffer) {\n      maxCountBuffer.subData({data: maxCountBufferData});\n    } else {\n      maxCountBuffer = new Buffer(this.gl, {data: maxCountBufferData});\n    }\n    return {\n      countsBuffer,\n      maxCountBuffer,\n      // Return total aggregaton values to avoid UBO setup for WebGL1 cases\n      totalCount,\n      totalWeight,\n      maxWeight\n    };\n  }\n  /* eslint-enable max-statements */\n\n  _runAggregationOnGPU(opts) {\n    this._updateModels(opts);\n    this._renderAggregateData(opts);\n    return this._getAggregateData(opts);\n  }\n\n  // Update priveate state\n  _setState(updateObject) {\n    Object.assign(this.state, updateObject);\n  }\n\n  _setupGPUResources() {\n    const {gl} = this;\n\n    this.gridAggregationFramebuffer = setupFramebuffer(gl, {id: 'GridAggregation'});\n    this.allAggregrationFramebuffer = setupFramebuffer(gl, {id: 'AllAggregation'});\n  }\n\n  _setupModels(fp64 = false) {\n    if (this.gridAggregationModel) {\n      this.gridAggregationModel.delete();\n    }\n    this.gridAggregationModel = this._getAggregationModel(fp64);\n    if (this.allAggregationModel) {\n      this.allAggregationModel.delete();\n    }\n    this.allAggregationModel = this._getAllAggregationModel(fp64);\n  }\n\n  /* eslint-disable max-statements */\n  _updateModels(opts) {\n    const {gl} = this;\n    const {positions, positions64xyLow, weights, changeFlags} = opts;\n    const {numCol, numRow} = this.state;\n\n    let {positionsBuffer, positions64xyLowBuffer, weightsBuffer} = this.state;\n\n    const aggregationModelAttributes = {};\n\n    let createPos64xyLow = false;\n    if (opts.fp64 !== this.state.fp64) {\n      this._setupModels(opts.fp64);\n      this._setState({fp64: opts.fp64});\n      if (opts.fp64) {\n        createPos64xyLow = true;\n      }\n    }\n\n    if (changeFlags.dataChanged || !positionsBuffer) {\n      if (positionsBuffer) {\n        positionsBuffer.delete();\n      }\n      if (weightsBuffer) {\n        weightsBuffer.delete();\n      }\n      positionsBuffer = new Buffer(gl, {size: 2, data: new Float32Array(positions)});\n      weightsBuffer = new Buffer(gl, {size: 1, data: new Float32Array(weights)});\n      createPos64xyLow = opts.fp64;\n      Object.assign(aggregationModelAttributes, {\n        positions: positionsBuffer,\n        weights: weightsBuffer\n      });\n      this.gridAggregationModel.setVertexCount(positions.length / 2);\n      this._setState({positionsBuffer, weightsBuffer});\n    }\n\n    if (createPos64xyLow) {\n      assert(positions64xyLow);\n      if (positions64xyLowBuffer) {\n        positions64xyLowBuffer.delete();\n      }\n      positions64xyLowBuffer = new Buffer(gl, {size: 2, data: new Float32Array(positions64xyLow)});\n      Object.assign(aggregationModelAttributes, {\n        positions64xyLow: positions64xyLowBuffer\n      });\n      this._setState({positions64xyLowBuffer});\n    }\n\n    this.gridAggregationModel.setAttributes(aggregationModelAttributes);\n\n    if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n      this.allAggregationModel.setInstanceCount(numCol * numRow);\n\n      const framebufferSize = {width: numCol, height: numRow};\n      this.gridAggregationFramebuffer.resize(framebufferSize);\n      this.allAggregrationFramebuffer.resize(framebufferSize);\n    }\n  }\n  /* eslint-enable max-statements */\n\n  _updateGridSize(opts) {\n    const {viewport, cellSize} = opts;\n    const width = opts.width || viewport.width;\n    const height = opts.height || viewport.height;\n    const numCol = Math.ceil(width / cellSize[0]);\n    const numRow = Math.ceil(height / cellSize[1]);\n    this._setState({numCol, numRow, windowSize: [width, height]});\n  }\n}\n\n// Helper methods.\n\nfunction setupFramebuffer(gl, opts) {\n  const {id} = opts;\n  const texture = new Texture2D(gl, {\n    data: null,\n    format: GL.RGBA32F,\n    type: GL.FLOAT,\n    border: 0,\n    mipmaps: false,\n    parameters: {\n      [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n      [GL.TEXTURE_MIN_FILTER]: GL.NEAREST\n    },\n    dataFormat: GL.RGBA\n  });\n\n  const fb = new Framebuffer(gl, {\n    id,\n    attachments: {\n      [GL.COLOR_ATTACHMENT0]: texture\n    }\n  });\n\n  return fb;\n}\n"],"file":"gpu-grid-aggregator.js"}