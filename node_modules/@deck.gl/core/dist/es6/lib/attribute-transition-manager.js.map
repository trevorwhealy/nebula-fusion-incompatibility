{"version":3,"sources":["../../../src/lib/attribute-transition-manager.js"],"names":["GL","Buffer","_Transform","Transform","getShaders","getBuffers","padBuffer","Attribute","Transition","log","assert","noop","DEFAULT_TRANSITION_SETTINGS","duration","easing","t","onStart","onEnd","onInterrupt","AttributeTransitionManager","constructor","gl","id","attributeTransitions","needsRedraw","transform","numInstances","isSupported","warn","finalize","delete","attributeName","_removeTransition","update","attributes","transitions","opts","changedTransitions","hasChanged","_updateAttribute","attribute","supportsTransition","_createModel","sourceBuffers","feedbackBuffers","elementCount","hasAttribute","getAttributes","animatedAttributes","transition","buffer","attributeInTransition","setCurrentTime","currentTime","uniforms","updated","time","run","_createTransition","name","bufferLayout","_invalidateModel","_swapBuffer","settings","getTransitionSetting","_triggerTransition","Object","keys","length","assign","_getNextTransitionStates","size","toState","constant","value","getBuffer","externalBuffer","fromState","toLength","fromLength","getElementCount","data","Float32Array","usage","DYNAMIC_COPY","setData","fromBufferLayout","toBufferLayout","getData","enter","transitionSettings","start"],"mappings":"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","sourcesContent":["import GL from 'luma.gl/constants';\nimport {Buffer, _Transform as Transform} from 'luma.gl';\nimport {getShaders, getBuffers, padBuffer} from './attribute-transition-utils';\nimport Attribute from './attribute';\nimport Transition from '../transitions/transition';\nimport log from '../utils/log';\nimport assert from '../utils/assert';\n\nconst noop = () => {};\nconst DEFAULT_TRANSITION_SETTINGS = {\n  duration: 0,\n  easing: t => t,\n  onStart: noop,\n  onEnd: noop,\n  onInterrupt: noop\n};\n\nexport default class AttributeTransitionManager {\n  constructor(gl, {id}) {\n    this.id = id;\n    this.gl = gl;\n\n    this.attributeTransitions = {};\n    this.needsRedraw = false;\n    this.transform = null;\n    this.numInstances = 0;\n\n    if (Transform.isSupported(gl)) {\n      this.isSupported = true;\n    } else {\n      log.warn('WebGL2 not supported by this browser. Transition animation is disabled.')();\n    }\n  }\n\n  finalize() {\n    if (this.transform) {\n      this.transform.delete();\n    }\n    for (const attributeName in this.attributeTransitions) {\n      this._removeTransition(attributeName);\n    }\n  }\n\n  /* Public methods */\n\n  // Called when attribute manager updates\n  // Check the latest attributes for updates.\n  update({attributes, transitions = {}, numInstances}) {\n    this.opts = transitions;\n    this.numInstances = numInstances;\n\n    if (!this.isSupported) {\n      return;\n    }\n\n    const {attributeTransitions} = this;\n    const changedTransitions = {};\n\n    for (const attributeName in attributes) {\n      const hasChanged = this._updateAttribute(attributeName, attributes[attributeName]);\n\n      if (hasChanged) {\n        changedTransitions[attributeName] = attributeTransitions[attributeName];\n      }\n    }\n\n    for (const attributeName in attributeTransitions) {\n      const attribute = attributes[attributeName];\n\n      if (!attribute || !attribute.supportsTransition()) {\n        // Animated attribute has been removed\n        this._removeTransition(attributeName);\n      }\n    }\n\n    if (!this.transform) {\n      this._createModel();\n    } else if (this.transform) {\n      const {sourceBuffers, feedbackBuffers} = getBuffers(changedTransitions);\n      this.transform.update({\n        elementCount: this.numInstances,\n        sourceBuffers,\n        feedbackBuffers\n      });\n    }\n  }\n\n  // Returns `true` if attribute is transition-enabled\n  hasAttribute(attributeName) {\n    return attributeName in this.attributeTransitions;\n  }\n\n  // Get all the animated attributes\n  getAttributes() {\n    const animatedAttributes = {};\n\n    for (const attributeName in this.attributeTransitions) {\n      const transition = this.attributeTransitions[attributeName];\n\n      if (transition.buffer) {\n        animatedAttributes[attributeName] = transition.attributeInTransition;\n      }\n    }\n\n    return animatedAttributes;\n  }\n\n  /* eslint-disable max-statements */\n  // Called every render cycle, run transform feedback\n  // Returns `true` if anything changes\n  setCurrentTime(currentTime) {\n    if (!this.transform || this.numInstances === 0) {\n      return false;\n    }\n\n    const uniforms = {};\n\n    let needsRedraw = this.needsRedraw;\n    this.needsRedraw = false;\n\n    for (const attributeName in this.attributeTransitions) {\n      const transition = this.attributeTransitions[attributeName];\n      const updated = transition.update(currentTime);\n      if (updated) {\n        uniforms[`${attributeName}Time`] = transition.time;\n        needsRedraw = true;\n      }\n    }\n\n    if (needsRedraw) {\n      this.transform.run({uniforms});\n    }\n\n    return needsRedraw;\n  }\n  /* eslint-enable max-statements */\n\n  /* Private methods */\n  _createTransition(attributeName, attribute) {\n    let transition = this.attributeTransitions[attributeName];\n    if (!transition) {\n      transition = new Transition({\n        name: attributeName,\n        attribute,\n        attributeInTransition: new Attribute(this.gl, attribute),\n        bufferLayout: attribute.bufferLayout\n      });\n      this.attributeTransitions[attributeName] = transition;\n      this._invalidateModel();\n      return transition;\n    }\n    return null;\n  }\n\n  _removeTransition(attributeName) {\n    const transition = this.attributeTransitions[attributeName];\n    if (transition) {\n      if (transition.buffer) {\n        transition.buffer.delete();\n      }\n      if (transition._swapBuffer) {\n        transition._swapBuffer.delete();\n      }\n      delete this.attributeTransitions[attributeName];\n      this._invalidateModel();\n    }\n  }\n\n  // Check an attributes for updates\n  // Returns a transition object if a new transition is triggered.\n  _updateAttribute(attributeName, attribute) {\n    const settings = attribute.getTransitionSetting(this.opts);\n\n    if (settings) {\n      let hasChanged;\n      let transition = this.attributeTransitions[attributeName];\n      if (transition) {\n        hasChanged = attribute.needsRedraw();\n      } else {\n        // New animated attributes have been added\n        transition = this._createTransition(attributeName, attribute);\n        hasChanged = true;\n      }\n\n      if (hasChanged) {\n        this._triggerTransition(transition, settings);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // Invalidates the current model\n  _invalidateModel() {\n    if (this.transform) {\n      this.transform.delete();\n      this.transform = null;\n    }\n  }\n\n  // Create a model for the transform feedback\n  _createModel() {\n    if (Object.keys(this.attributeTransitions).length === 0) {\n      // no transitions\n      return;\n    }\n    this.transform = new Transform(\n      this.gl,\n      Object.assign(\n        {\n          elementCount: this.numInstances\n        },\n        getBuffers(this.attributeTransitions),\n        getShaders(this.attributeTransitions)\n      )\n    );\n  }\n\n  // get current values of an attribute, clipped/padded to the size of the new buffer\n  _getNextTransitionStates(transition, settings) {\n    const {attribute} = transition;\n    const {size} = attribute;\n\n    let toState;\n    if (attribute.constant) {\n      toState = {constant: true, value: attribute.value, size};\n    } else {\n      toState = {\n        constant: false,\n        buffer: attribute.getBuffer(),\n        size,\n        // attribute's `value` does not match the content of external buffer,\n        // will need to call buffer.getData if needed\n        value: attribute.externalBuffer ? null : attribute.value\n      };\n    }\n    const fromState = transition.buffer || toState;\n    const toLength = this.numInstances * size;\n    const fromLength = (fromState instanceof Buffer && fromState.getElementCount()) || toLength;\n\n    // Alternate between two buffers when new transitions start.\n    // Last destination buffer is used as an attribute (from state),\n    // And the other buffer is now the destination buffer.\n    let buffer = transition._swapBuffer;\n    transition._swapBuffer = transition.buffer;\n\n    if (!buffer) {\n      buffer = new Buffer(this.gl, {\n        data: new Float32Array(toLength),\n        usage: GL.DYNAMIC_COPY\n      });\n    } else if (buffer.getElementCount() < toLength) {\n      // Pad buffers to be the same length\n      buffer.setData({\n        data: new Float32Array(toLength)\n      });\n    }\n\n    transition.attributeInTransition.update({buffer});\n\n    padBuffer({\n      fromState,\n      toState,\n      fromLength,\n      toLength,\n      fromBufferLayout: transition.bufferLayout,\n      toBufferLayout: attribute.bufferLayout,\n      getData: settings.enter\n    });\n\n    transition.bufferLayout = attribute.bufferLayout;\n\n    return {fromState, toState, buffer};\n  }\n\n  // Start a new transition using the current settings\n  // Updates transition state and from/to buffer\n  _triggerTransition(transition, settings) {\n    // Check if settings is valid\n    assert(settings && settings.duration > 0);\n\n    this.needsRedraw = true;\n\n    const transitionSettings = Object.assign({}, DEFAULT_TRANSITION_SETTINGS, settings);\n\n    // Attribute descriptor to transition from\n    transition.start(\n      Object.assign({}, this._getNextTransitionStates(transition, settings), transitionSettings)\n    );\n  }\n}\n"],"file":"attribute-transition-manager.js"}