{"version":3,"sources":["../../../src/lib/attribute.js"],"names":["assert","GL","Buffer","_Attribute","Attribute","DEFAULT_STATE","isExternalBuffer","needsUpdate","needsRedraw","allocedInstances","LayerAttribute","constructor","gl","opts","transition","noAlloc","update","accessor","bufferLayout","defaultValue","Array","isArray","Object","assign","userData","seal","_validateAttributeUpdaters","layout","clearChangedFlags","getInstanceCount","value","length","size","getUpdateTriggers","id","concat","getAccessor","supportsTransition","getTransitionSetting","settings","find","a","Number","isFinite","duration","setNeedsUpdate","reason","setNeedsRedraw","allocate","numInstances","state","instanceCount","needsAlloc","allocCount","Math","max","ArrayType","glArrayFromType","type","FLOAT","constant","updateBuffer","data","props","context","updated","call","_checkAttributeArray","_updateBufferViaStandardAccessor","setGenericValue","undefined","_normalizeValue","hasChanged","_areValuesEqual","setExternalBuffer","buffer","externalBuffer","Error","name","auto","out","start","ArrayBuffer","isView","value1","value2","i","accessorFunc","object","objectValue","hasUpdater","valid","glType","clamped","Float32Array","UNSIGNED_SHORT","UNSIGNED_SHORT_5_6_5","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","Uint16Array","UNSIGNED_INT","Uint32Array","UNSIGNED_BYTE","Uint8ClampedArray","Uint8Array","BYTE","Int8Array","SHORT","Int16Array","INT","Int32Array"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport assert from '../utils/assert';\nimport GL from 'luma.gl/constants';\nimport {Buffer, _Attribute as Attribute} from 'luma.gl';\n\nconst DEFAULT_STATE = {\n  isExternalBuffer: false,\n  needsUpdate: true,\n  needsRedraw: false,\n  allocedInstances: -1\n};\n\nexport default class LayerAttribute extends Attribute {\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    const {\n      // deck.gl fields\n      transition = false,\n      noAlloc = false,\n      update = null,\n      accessor = null,\n      bufferLayout = null\n    } = opts;\n\n    let {defaultValue = [0, 0, 0, 0]} = opts;\n    defaultValue = Array.isArray(defaultValue) ? defaultValue : [defaultValue];\n\n    Object.assign(this.userData, DEFAULT_STATE, opts, {\n      transition,\n      noAlloc,\n      update,\n      accessor,\n      defaultValue,\n      bufferLayout\n    });\n\n    Object.seal(this.userData);\n\n    // Check all fields and generate helpful error messages\n    this._validateAttributeUpdaters();\n  }\n\n  get bufferLayout() {\n    return this.userData.bufferLayout;\n  }\n\n  set bufferLayout(layout) {\n    this.userData.bufferLayout = layout;\n  }\n\n  needsUpdate() {\n    return this.userData.needsUpdate;\n  }\n\n  needsRedraw({clearChangedFlags = false} = {}) {\n    const needsRedraw = this.userData.needsRedraw;\n    this.userData.needsRedraw = this.userData.needsRedraw && !clearChangedFlags;\n    return needsRedraw;\n  }\n\n  getInstanceCount() {\n    return this.value !== null ? this.value.length / this.size : 0;\n  }\n\n  getUpdateTriggers() {\n    const {accessor} = this.userData;\n\n    // Backards compatibility: allow attribute name to be used as update trigger key\n    return [this.id].concat(accessor || []);\n  }\n\n  getAccessor() {\n    return this.userData.accessor;\n  }\n\n  supportsTransition() {\n    return this.userData.transition;\n  }\n\n  // Resolve transition settings object if transition is enabled, otherwise `null`\n  getTransitionSetting(opts) {\n    const {transition, accessor} = this.userData;\n    if (!transition) {\n      return null;\n    }\n    let settings = Array.isArray(accessor) ? opts[accessor.find(a => opts[a])] : opts[accessor];\n\n    // Shorthand: use duration instead of parameter object\n    if (Number.isFinite(settings)) {\n      settings = {duration: settings};\n    }\n\n    if (settings && settings.duration > 0) {\n      return Object.assign({}, transition, settings);\n    }\n\n    return null;\n  }\n\n  // Checks that typed arrays for attributes are big enough\n  // sets alloc flag if not\n  // @return {Boolean} whether any updates are needed\n  setNeedsUpdate(reason = this.id) {\n    this.userData.needsUpdate = this.userData.needsUpdate || reason;\n  }\n\n  setNeedsRedraw(reason = this.id) {\n    this.userData.needsRedraw = this.userData.needsRedraw || reason;\n  }\n\n  allocate(numInstances) {\n    const state = this.userData;\n\n    if (state.isExternalBuffer || state.noAlloc) {\n      // Data is provided through a Buffer object.\n      return false;\n    }\n\n    // Do we need to reallocate the attribute's typed array?\n    const instanceCount = this.getInstanceCount();\n    const needsAlloc = instanceCount === 0 || instanceCount < numInstances;\n    if (needsAlloc && (state.update || state.accessor)) {\n      assert(Number.isFinite(numInstances));\n      // Allocate at least one element to ensure a valid buffer\n      const allocCount = Math.max(numInstances, 1);\n      const ArrayType = glArrayFromType(this.type || GL.FLOAT);\n\n      this.constant = false;\n      this.value = new ArrayType(this.size * allocCount);\n      state.needsUpdate = true;\n      state.allocedInstances = allocCount;\n      return true;\n    }\n\n    return false;\n  }\n\n  updateBuffer({numInstances, data, props, context}) {\n    if (!this.needsUpdate()) {\n      return false;\n    }\n\n    const state = this.userData;\n\n    const {update, accessor} = state;\n\n    let updated = true;\n    if (update) {\n      // Custom updater - typically for non-instanced layers\n      update.call(context, this, {data, props, numInstances});\n      this.update({\n        value: this.value,\n        constant: this.constant\n      });\n      this._checkAttributeArray();\n    } else if (accessor) {\n      // Standard updater\n      this._updateBufferViaStandardAccessor(data, props);\n      this._checkAttributeArray();\n    } else {\n      updated = false;\n    }\n\n    state.needsUpdate = false;\n    state.needsRedraw = true;\n\n    return updated;\n  }\n\n  // Use generic value\n  // Returns true if successful\n  setGenericValue(value) {\n    const state = this.userData;\n\n    if (value === undefined || typeof value === 'function') {\n      // ignore if this attribute has no accessor\n      // ignore if accessor is function, will be used in updateBuffer\n      state.isExternalBuffer = false;\n      return false;\n    }\n\n    value = this._normalizeValue(value);\n    const hasChanged = !this.constant || !this._areValuesEqual(value, this.value);\n\n    if (hasChanged) {\n      this.update({constant: true, value});\n    }\n    state.needsRedraw = state.needsUpdate || hasChanged;\n    state.needsUpdate = false;\n    state.isExternalBuffer = true;\n    return true;\n  }\n\n  // Use external buffer\n  // Returns true if successful\n  setExternalBuffer(buffer, numInstances) {\n    const state = this.userData;\n\n    if (buffer) {\n      state.isExternalBuffer = true;\n      state.needsUpdate = false;\n\n      if (buffer instanceof Buffer) {\n        if (this.externalBuffer !== buffer) {\n          this.update({constant: false, buffer});\n          state.needsRedraw = true;\n        }\n      } else {\n        const ArrayType = glArrayFromType(this.type || GL.FLOAT);\n        if (!(buffer instanceof ArrayType)) {\n          throw new Error(`Attribute ${this.id} must be of type ${ArrayType.name}`);\n        }\n        if (state.auto && buffer.length <= numInstances * this.size) {\n          throw new Error('Attribute prop array must match length and size');\n        }\n        if (this.value !== buffer) {\n          this.update({constant: false, value: buffer});\n          state.needsRedraw = true;\n        }\n      }\n      return true;\n    }\n\n    state.isExternalBuffer = false;\n    return false;\n  }\n\n  // PRIVATE HELPER METHODS\n\n  /* check user supplied values and apply fallback */\n  _normalizeValue(value, out = [], start = 0) {\n    const {defaultValue} = this.userData;\n\n    if (!Array.isArray(value) && !ArrayBuffer.isView(value)) {\n      out[start] = Number.isFinite(value) ? value : defaultValue[0];\n      return out;\n    }\n\n    /* eslint-disable no-fallthrough, default-case */\n    switch (this.size) {\n      case 4:\n        out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];\n      case 3:\n        out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];\n      case 2:\n        out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];\n      case 1:\n        out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];\n    }\n\n    return out;\n  }\n\n  _areValuesEqual(value1, value2, size = this.size) {\n    for (let i = 0; i < size; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  _updateBufferViaStandardAccessor(data, props) {\n    const state = this.userData;\n\n    const {accessor} = state;\n    const {value, size} = this;\n    const accessorFunc = props[accessor];\n\n    assert(typeof accessorFunc === 'function', `accessor \"${accessor}\" is not a function`);\n\n    let i = 0;\n    for (const object of data) {\n      const objectValue = accessorFunc(object);\n      this._normalizeValue(objectValue, value, i);\n      i += size;\n    }\n    this.update({value});\n  }\n\n  // Validate deck.gl level fields\n  _validateAttributeUpdaters() {\n    const state = this.userData;\n\n    // Check that either 'accessor' or 'update' is a valid function\n    const hasUpdater =\n      state.noAlloc || typeof state.update === 'function' || typeof state.accessor === 'string';\n    if (!hasUpdater) {\n      throw new Error(`Attribute ${this.id} missing update or accessor`);\n    }\n  }\n\n  _checkAttributeArray() {\n    const {value} = this;\n    if (value && value.length >= 4) {\n      const valid =\n        Number.isFinite(value[0]) &&\n        Number.isFinite(value[1]) &&\n        Number.isFinite(value[2]) &&\n        Number.isFinite(value[3]);\n      if (!valid) {\n        throw new Error(`Illegal attribute generated for ${this.id}`);\n      }\n    }\n  }\n}\n\n/* eslint-disable complexity */\nexport function glArrayFromType(glType, {clamped = true} = {}) {\n  // Sorted in some order of likelihood to reduce amount of comparisons\n  switch (glType) {\n    case GL.FLOAT:\n      return Float32Array;\n    case GL.UNSIGNED_SHORT:\n    case GL.UNSIGNED_SHORT_5_6_5:\n    case GL.UNSIGNED_SHORT_4_4_4_4:\n    case GL.UNSIGNED_SHORT_5_5_5_1:\n      return Uint16Array;\n    case GL.UNSIGNED_INT:\n      return Uint32Array;\n    case GL.UNSIGNED_BYTE:\n      return clamped ? Uint8ClampedArray : Uint8Array;\n    case GL.BYTE:\n      return Int8Array;\n    case GL.SHORT:\n      return Int16Array;\n    case GL.INT:\n      return Int32Array;\n    default:\n      throw new Error('Failed to deduce type from array');\n  }\n}\n/* eslint-enable complexity */\n"],"file":"attribute.js"}