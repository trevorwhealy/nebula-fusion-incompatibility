{"version":3,"sources":["../../../../src/experimental/utils/gpu-grid-aggregator.js"],"names":["fp64ifyMatrix4","fp64Utils","IDENTITY_MATRIX","PIXEL_SIZE","AGGREGATE_TO_GRID_VS","AGGREGATE_TO_GRID_VS_FP64","AGGREGATE_TO_GRID_FS","AGGREGATE_ALL_VS_FP64","AGGREGATE_ALL_FS","DEFAULT_CHANGE_FLAGS","dataChanged","viewportChanged","cellSizeChanged","GPUGridAggregator","countsData","maxCountData","pixelIndex","length","index","cellCount","cellWeight","totalCount","totalWeight","maxCellWieght","cellWeights","cellCounts","push","gl","opts","id","shaderCache","state","_hasGPUSupport","FEATURES","BLEND_EQUATION_MINMAX","COLOR_ATTACHMENT_RGBA32F","TEXTURE_FILTER_LINEAR_FLOAT","_setupGPUResources","positions","positions64xyLow","weights","changeFlags","cellSize","viewport","width","height","countsBuffer","maxCountBuffer","gridTransformMatrix","projectPoints","useGPU","fp64","_setState","transformMatrix","pixelProjectionMatrix","aggregationParams","_updateGridSize","_runAggregationOnGPU","log","warn","_runAggregationOnCPU","gridAggregationFramebuffer","readPixelsToBuffer","buffer","type","GL","FLOAT","allAggregrationFramebuffer","countsTexture","texture","maxCountTexture","Model","vs","fs","modules","vertexCount","drawMode","POINTS","isInstanced","instanceCount","attributes","position","Buffer","size","data","Float32Array","projectedPositions","projectFlat","x","y","numCol","numRow","windowSize","gridAggregationModel","allAggregationModel","uProjectionMatrixFP64","gridSize","bind","clear","COLOR_BUFFER_BIT","draw","parameters","clearColor","clearDepth","blend","depthTest","blendEquation","FUNC_ADD","blendFunc","ONE","moduleSettings","uniforms","uProjectionMatrix","unbind","MAX","uSampler","ELEMENTCOUNT","counts","pos","_projectPositions","fill","maxWeight","gridPos","weight","Number","isFinite","colId","Math","floor","rowId","i","maxCountBufferData","subData","_updateModels","_renderAggregateData","_getAggregateData","updateObject","Object","assign","setupFramebuffer","delete","_getAggregationModel","_getAllAggregationModel","positionsBuffer","positions64xyLowBuffer","weightsBuffer","aggregationModelAttributes","createPos64xyLow","_setupModels","setVertexCount","setAttributes","setInstanceCount","framebufferSize","resize","ceil","Texture2D","format","RGBA32F","border","mipmaps","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","dataFormat","RGBA","fb","Framebuffer","attachments","COLOR_ATTACHMENT0"],"mappings":"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","sourcesContent":["import GL from 'luma.gl/constants';\nimport {Buffer, Model, Framebuffer, Texture2D, FEATURES, hasFeatures, isWebGL2} from 'luma.gl';\nimport {log} from '@deck.gl/core';\nimport assert from 'assert';\nimport {fp64 as fp64Utils} from 'luma.gl';\nimport {worldToPixels} from 'viewport-mercator-project';\nconst {fp64ifyMatrix4} = fp64Utils;\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\nconst PIXEL_SIZE = 4; // RGBA32F\nconst AGGREGATE_TO_GRID_VS = `\\\nattribute vec2 positions;\nattribute vec2 positions64xyLow;\nattribute float weights;\nuniform vec2 windowSize;\nuniform vec2 cellSize;\nuniform vec2 gridSize;\nuniform mat4 uProjectionMatrix;\nuniform bool projectPoints;\n\nvarying float vWeights;\n\nvec2 project_to_pixel(vec2 pos) {\n  vec4 position = vec4(pos, 0., 1.);\n  vec4 result =  uProjectionMatrix * position;\n  return result.xy/result.w;\n}\n\nvoid main(void) {\n\n  vWeights = weights;\n\n  vec2 windowPos = positions;\n  vec2 windowPos64xyLow = positions64xyLow;\n  if (projectPoints) {\n    windowPos = project_position(windowPos);\n  }\n\n  windowPos = project_to_pixel(windowPos);\n\n  // Transform (0,0):windowSize -> (0, 0): gridSize\n  vec2 pos = floor(windowPos / cellSize);\n\n  // Transform (0,0):gridSize -> (-1, -1):(1,1)\n  pos = (pos * (2., 2.) / (gridSize)) - (1., 1.);\n\n  // Move to pixel center, pixel-size in screen sapce (2/gridSize) * 0.5 => 1/gridSize\n  vec2 offset = 1.0 / gridSize;\n  pos = pos + offset;\n\n  gl_Position = vec4(pos, 0.0, 1.0);\n}\n`;\n\nconst AGGREGATE_TO_GRID_VS_FP64 = `\\\nattribute vec2 positions;\nattribute vec2 positions64xyLow;\nattribute float weights;\nuniform vec2 windowSize;\nuniform vec2 cellSize;\nuniform vec2 gridSize;\nuniform vec2 uProjectionMatrixFP64[16];\nuniform bool projectPoints;\n\nvarying float vWeights;\n\nvoid project_to_pixel(vec2 pos, vec2 pos64xyLow, out vec2 pixelXY64[2]) {\n\n  vec2 result64[4];\n  vec2 position64[4];\n  position64[0] = vec2(pos.x, pos64xyLow.x);\n  position64[1] = vec2(pos.y, pos64xyLow.y);\n  position64[2] = vec2(0., 0.);\n  position64[3] = vec2(1., 0.);\n  mat4_vec4_mul_fp64(uProjectionMatrixFP64, position64,\n  result64);\n\n  pixelXY64[0] = div_fp64(result64[0], result64[3]);\n  pixelXY64[1] = div_fp64(result64[1], result64[3]);\n}\n\nvoid main(void) {\n\n  vWeights = weights;\n\n  vec2 windowPos = positions;\n  vec2 windowPos64xyLow = positions64xyLow;\n  if (projectPoints) {\n    vec2 projectedXY[2];\n    project_position_fp64(windowPos, windowPos64xyLow, projectedXY);\n    windowPos.x = projectedXY[0].x;\n    windowPos.y = projectedXY[1].x;\n    windowPos64xyLow.x = projectedXY[0].y;\n    windowPos64xyLow.y = projectedXY[1].y;\n  }\n\n  vec2 pixelXY64[2];\n  project_to_pixel(windowPos, windowPos64xyLow, pixelXY64);\n\n  // Transform (0,0):windowSize -> (0, 0): gridSize\n  vec2 gridXY64[2];\n  gridXY64[0] = div_fp64(pixelXY64[0], vec2(cellSize.x, 0));\n  gridXY64[1] = div_fp64(pixelXY64[1], vec2(cellSize.y, 0));\n  float x = floor(gridXY64[0].x);\n  float y = floor(gridXY64[1].x);\n  vec2 pos = vec2(x, y);\n\n  // Transform (0,0):gridSize -> (-1, -1):(1,1)\n  pos = (pos * (2., 2.) / (gridSize)) - (1., 1.);\n\n  // Move to pixel center, pixel-size in screen sapce (2/gridSize) * 0.5 => 1/gridSize\n  vec2 offset = 1.0 / gridSize;\n  pos = pos + offset;\n\n  gl_Position = vec4(pos, 0.0, 1.0);\n}\n`;\n\nconst AGGREGATE_TO_GRID_FS = `\\\nprecision highp float;\n\nvarying float vWeights;\n\nvoid main(void) {\n  gl_FragColor = vec4(1., vWeights, 0, 0.0);\n}\n`;\n\nconst AGGREGATE_ALL_VS_FP64 = `\\\n#version 300 es\n\nin vec2 position;\nuniform vec2 gridSize;\n\nout vec2 vTextureCoord;\nvoid main(void) {\n  // Map each position to single pixel\n  vec2 pos = vec2(-1.0, -1.0);\n\n  // Move to pixel center, pixel-size in screen sapce (2/gridSize) * 0.5 => 1/gridSize\n  vec2 offset = 1.0 / gridSize;\n  pos = pos + offset;\n\n  gl_Position = vec4(pos, 0.0, 1.0);\n\n  float yIndex = floor(float(gl_InstanceID) / gridSize[0]);\n  float xIndex = float(gl_InstanceID) - (yIndex * gridSize[0]);\n\n  vec2 yIndexFP64 = vec2(yIndex, 0.);\n  vec2 xIndexFP64 = vec2(xIndex, 0.);\n  vec2 gridSizeYFP64 = vec2(gridSize[1], 0.);\n  vec2 gridSizeXFP64 = vec2(gridSize[0], 0.);\n\n  vec2 texCoordXFP64 = div_fp64(yIndexFP64, gridSizeYFP64);\n  vec2 texCoordYFP64 = div_fp64(xIndexFP64, gridSizeXFP64);\n\n  vTextureCoord = vec2(texCoordYFP64.x, texCoordXFP64.x);\n}\n`;\n\nconst AGGREGATE_ALL_FS = `\\\n#version 300 es\nprecision highp float;\n\nin vec2 vTextureCoord;\nuniform sampler2D uSampler;\nout vec4 fragColor;\nvoid main(void) {\n  vec4 textureColor = texture(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\n  // Red: total count, Green: total weight, Alpha: maximum wieght\n  fragColor = vec4(textureColor.r, textureColor.g, 0., textureColor.g);\n}\n`;\n\nconst DEFAULT_CHANGE_FLAGS = {\n  dataChanged: true,\n  viewportChanged: true,\n  cellSizeChanged: true\n};\n\nexport default class GPUGridAggregator {\n  // Decode and return aggregation data of given pixel.\n  static getAggregationData({countsData, maxCountData, pixelIndex}) {\n    assert(countsData.length >= (pixelIndex + 1) * PIXEL_SIZE);\n    assert(maxCountData.length === PIXEL_SIZE);\n    const index = pixelIndex * PIXEL_SIZE;\n    const cellCount = countsData[index];\n    const cellWeight = countsData[index + 1];\n    const totalCount = maxCountData[0];\n    const totalWeight = maxCountData[1];\n    const maxCellWieght = maxCountData[3];\n    return {\n      cellCount,\n      cellWeight,\n      totalCount,\n      totalWeight,\n      maxCellWieght\n    };\n  }\n\n  // Decodes and retuns counts and weights of all cells\n  static getCellData({countsData}) {\n    const cellWeights = [];\n    const cellCounts = [];\n    for (let index = 0; index < countsData.length; index += 4) {\n      cellCounts.push(countsData[index]);\n      cellWeights.push(countsData[index + 1]);\n    }\n    return {cellCounts, cellWeights};\n  }\n\n  constructor(gl, opts = {}) {\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.shaderCache = opts.shaderCache || null;\n    this.gl = gl;\n    this.state = {};\n    this._hasGPUSupport =\n      isWebGL2(gl) &&\n      hasFeatures(\n        this.gl,\n        FEATURES.BLEND_EQUATION_MINMAX,\n        FEATURES.COLOR_ATTACHMENT_RGBA32F,\n        FEATURES.TEXTURE_FILTER_LINEAR_FLOAT\n      );\n    if (this._hasGPUSupport) {\n      this._setupGPUResources();\n    }\n  }\n\n  // Perform aggregation and retun the results\n  run({\n    positions,\n    positions64xyLow,\n    weights,\n    changeFlags = DEFAULT_CHANGE_FLAGS,\n    cellSize,\n    viewport,\n    width,\n    height,\n    countsBuffer = null,\n    maxCountBuffer = null,\n    gridTransformMatrix = null,\n    projectPoints = false,\n    useGPU = true,\n    fp64 = false\n  } = {}) {\n    if (this.state.useGPU !== useGPU) {\n      changeFlags = DEFAULT_CHANGE_FLAGS;\n    }\n    this._setState({useGPU});\n    const transformMatrix =\n      gridTransformMatrix || (viewport && viewport.pixelProjectionMatrix) || IDENTITY_MATRIX;\n    const aggregationParams = {\n      positions,\n      positions64xyLow,\n      weights,\n      changeFlags,\n      cellSize,\n      viewport,\n      gridTransformMatrix: transformMatrix,\n      countsBuffer,\n      maxCountBuffer,\n      projectPoints,\n      fp64\n    };\n\n    this._updateGridSize({viewport, cellSize, width, height});\n    if (this._hasGPUSupport && useGPU) {\n      return this._runAggregationOnGPU(aggregationParams);\n    }\n    if (useGPU) {\n      log.warn('ScreenGridAggregator: GPU Aggregation not supported, falling back to CPU');\n    }\n    return this._runAggregationOnCPU(aggregationParams);\n  }\n\n  // PRIVATE\n\n  _getAggregateData(opts) {\n    let {countsBuffer, maxCountBuffer} = opts;\n    countsBuffer = this.gridAggregationFramebuffer.readPixelsToBuffer({\n      buffer: countsBuffer,\n      type: GL.FLOAT\n    });\n    maxCountBuffer = this.allAggregrationFramebuffer.readPixelsToBuffer({\n      width: 1,\n      height: 1,\n      type: GL.FLOAT,\n      buffer: maxCountBuffer\n    });\n    return {\n      countsBuffer,\n      countsTexture: this.gridAggregationFramebuffer.texture,\n      maxCountBuffer,\n      maxCountTexture: this.allAggregrationFramebuffer.texture\n    };\n  }\n\n  _getAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'Gird-Aggregation-Model',\n      vs: fp64 ? AGGREGATE_TO_GRID_VS_FP64 : AGGREGATE_TO_GRID_VS,\n      fs: AGGREGATE_TO_GRID_FS,\n      modules: fp64 ? ['fp64', 'project64'] : ['project32'],\n      shaderCache,\n      vertexCount: 0,\n      drawMode: GL.POINTS\n    });\n  }\n\n  _getAllAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'All-Aggregation-Model',\n      vs: AGGREGATE_ALL_VS_FP64,\n      fs: AGGREGATE_ALL_FS,\n      modules: ['fp64'],\n      shaderCache,\n      vertexCount: 1,\n      drawMode: GL.POINTS,\n      isInstanced: true,\n      instanceCount: 0,\n      attributes: {position: new Buffer(gl, {size: 2, data: new Float32Array([0, 0])})}\n    });\n  }\n\n  _projectPositions(opts) {\n    let {projectedPositions} = this.state;\n    if (!projectedPositions || opts.changeFlags.dataChanged || opts.changeFlags.viewportChanged) {\n      const {positions, viewport} = opts;\n      projectedPositions = [];\n      for (let index = 0; index < positions.length; index += 2) {\n        const [x, y] = viewport.projectFlat([positions[index], positions[index + 1]]);\n        projectedPositions.push(x, y);\n      }\n      this._setState({projectedPositions});\n    }\n  }\n\n  _renderAggregateData(opts) {\n    const {cellSize, viewport, gridTransformMatrix, projectPoints} = opts;\n    const {numCol, numRow, windowSize} = this.state;\n    const {\n      gl,\n      gridAggregationFramebuffer,\n      gridAggregationModel,\n      allAggregrationFramebuffer,\n      allAggregationModel\n    } = this;\n\n    const uProjectionMatrixFP64 = fp64ifyMatrix4(gridTransformMatrix);\n    const gridSize = [numCol, numRow];\n\n    gridAggregationFramebuffer.bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gridAggregationModel.draw({\n      parameters: {\n        clearColor: [0, 0, 0, 0],\n        clearDepth: 0,\n        blend: true,\n        depthTest: false,\n        blendEquation: GL.FUNC_ADD,\n        blendFunc: [GL.ONE, GL.ONE]\n      },\n      moduleSettings: {\n        viewport\n      },\n      uniforms: {\n        windowSize,\n        cellSize,\n        gridSize,\n        uProjectionMatrix: gridTransformMatrix,\n        uProjectionMatrixFP64,\n        projectPoints,\n        ONE: 1.0\n      }\n    });\n    gridAggregationFramebuffer.unbind();\n\n    allAggregrationFramebuffer.bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    allAggregationModel.draw({\n      parameters: {\n        clearColor: [0, 0, 0, 0],\n        clearDepth: 0,\n        blend: true,\n        depthTest: false,\n        blendEquation: [GL.FUNC_ADD, GL.MAX],\n        blendFunc: [GL.ONE, GL.ONE]\n      },\n      uniforms: {\n        uSampler: gridAggregationFramebuffer.texture,\n        gridSize,\n        ONE: 1.0\n      }\n    });\n    allAggregrationFramebuffer.unbind();\n  }\n\n  /* eslint-disable max-statements */\n  _runAggregationOnCPU(opts) {\n    const ELEMENTCOUNT = 4;\n    const {positions, weights, cellSize, projectPoints, gridTransformMatrix} = opts;\n    let {countsBuffer, maxCountBuffer} = opts;\n    const {numCol, numRow} = this.state;\n    // Each element contains 4 floats to match with GPU ouput\n    const counts = new Float32Array(numCol * numRow * ELEMENTCOUNT);\n\n    let pos = positions;\n    if (projectPoints) {\n      this._projectPositions(opts);\n      pos = this.state.projectedPositions;\n    }\n\n    counts.fill(0);\n    let maxWeight = 0;\n    let totalCount = 0;\n    let totalWeight = 0;\n    for (let index = 0; index < pos.length; index += 2) {\n      const gridPos = worldToPixels([pos[index], pos[index + 1], 0], gridTransformMatrix);\n      const x = gridPos[0];\n      const y = gridPos[1];\n      const weight = weights ? weights[index / 2] : 1;\n      assert(Number.isFinite(weight));\n      const colId = Math.floor(x / cellSize[0]);\n      const rowId = Math.floor(y / cellSize[1]);\n      if (colId >= 0 && colId < numCol && rowId >= 0 && rowId < numRow) {\n        const i = (colId + rowId * numCol) * ELEMENTCOUNT;\n        counts[i]++;\n        counts[i + 1] += weight;\n        totalCount += 1;\n        totalWeight += weight;\n        if (counts[i + 1] > maxWeight) {\n          maxWeight = counts[i + 1];\n        }\n      }\n    }\n    const maxCountBufferData = new Float32Array(ELEMENTCOUNT);\n    // Store total count value in Red/X channel\n    maxCountBufferData[0] = totalCount;\n    // Store total weight value in Green/Y channel\n    maxCountBufferData[1] = totalWeight;\n    // Store max weight value in alpha/W channel.\n    maxCountBufferData[3] = maxWeight;\n\n    // Load data to WebGL buffer.\n    if (countsBuffer) {\n      countsBuffer.subData({data: counts});\n    } else {\n      countsBuffer = new Buffer(this.gl, {data: counts});\n    }\n    if (maxCountBuffer) {\n      maxCountBuffer.subData({data: maxCountBufferData});\n    } else {\n      maxCountBuffer = new Buffer(this.gl, {data: maxCountBufferData});\n    }\n    return {\n      countsBuffer,\n      maxCountBuffer,\n      // Return total aggregaton values to avoid UBO setup for WebGL1 cases\n      totalCount,\n      totalWeight,\n      maxWeight\n    };\n  }\n  /* eslint-enable max-statements */\n\n  _runAggregationOnGPU(opts) {\n    this._updateModels(opts);\n    this._renderAggregateData(opts);\n    return this._getAggregateData(opts);\n  }\n\n  // Update priveate state\n  _setState(updateObject) {\n    Object.assign(this.state, updateObject);\n  }\n\n  _setupGPUResources() {\n    const {gl} = this;\n\n    this.gridAggregationFramebuffer = setupFramebuffer(gl, {id: 'GridAggregation'});\n    this.allAggregrationFramebuffer = setupFramebuffer(gl, {id: 'AllAggregation'});\n  }\n\n  _setupModels(fp64 = false) {\n    if (this.gridAggregationModel) {\n      this.gridAggregationModel.delete();\n    }\n    this.gridAggregationModel = this._getAggregationModel(fp64);\n    if (this.allAggregationModel) {\n      this.allAggregationModel.delete();\n    }\n    this.allAggregationModel = this._getAllAggregationModel(fp64);\n  }\n\n  /* eslint-disable max-statements */\n  _updateModels(opts) {\n    const {gl} = this;\n    const {positions, positions64xyLow, weights, changeFlags} = opts;\n    const {numCol, numRow} = this.state;\n\n    let {positionsBuffer, positions64xyLowBuffer, weightsBuffer} = this.state;\n\n    const aggregationModelAttributes = {};\n\n    let createPos64xyLow = false;\n    if (opts.fp64 !== this.state.fp64) {\n      this._setupModels(opts.fp64);\n      this._setState({fp64: opts.fp64});\n      if (opts.fp64) {\n        createPos64xyLow = true;\n      }\n    }\n\n    if (changeFlags.dataChanged || !positionsBuffer) {\n      if (positionsBuffer) {\n        positionsBuffer.delete();\n      }\n      if (weightsBuffer) {\n        weightsBuffer.delete();\n      }\n      positionsBuffer = new Buffer(gl, {size: 2, data: new Float32Array(positions)});\n      weightsBuffer = new Buffer(gl, {size: 1, data: new Float32Array(weights)});\n      createPos64xyLow = opts.fp64;\n      Object.assign(aggregationModelAttributes, {\n        positions: positionsBuffer,\n        weights: weightsBuffer\n      });\n      this.gridAggregationModel.setVertexCount(positions.length / 2);\n      this._setState({positionsBuffer, weightsBuffer});\n    }\n\n    if (createPos64xyLow) {\n      assert(positions64xyLow);\n      if (positions64xyLowBuffer) {\n        positions64xyLowBuffer.delete();\n      }\n      positions64xyLowBuffer = new Buffer(gl, {size: 2, data: new Float32Array(positions64xyLow)});\n      Object.assign(aggregationModelAttributes, {\n        positions64xyLow: positions64xyLowBuffer\n      });\n      this._setState({positions64xyLowBuffer});\n    }\n\n    this.gridAggregationModel.setAttributes(aggregationModelAttributes);\n\n    if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n      this.allAggregationModel.setInstanceCount(numCol * numRow);\n\n      const framebufferSize = {width: numCol, height: numRow};\n      this.gridAggregationFramebuffer.resize(framebufferSize);\n      this.allAggregrationFramebuffer.resize(framebufferSize);\n    }\n  }\n  /* eslint-enable max-statements */\n\n  _updateGridSize(opts) {\n    const {viewport, cellSize} = opts;\n    const width = opts.width || viewport.width;\n    const height = opts.height || viewport.height;\n    const numCol = Math.ceil(width / cellSize[0]);\n    const numRow = Math.ceil(height / cellSize[1]);\n    this._setState({numCol, numRow, windowSize: [width, height]});\n  }\n}\n\n// Helper methods.\n\nfunction setupFramebuffer(gl, opts) {\n  const {id} = opts;\n  const texture = new Texture2D(gl, {\n    data: null,\n    format: GL.RGBA32F,\n    type: GL.FLOAT,\n    border: 0,\n    mipmaps: false,\n    parameters: {\n      [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n      [GL.TEXTURE_MIN_FILTER]: GL.NEAREST\n    },\n    dataFormat: GL.RGBA\n  });\n\n  const fb = new Framebuffer(gl, {\n    id,\n    attachments: {\n      [GL.COLOR_ATTACHMENT0]: texture\n    }\n  });\n\n  return fb;\n}\n"],"file":"gpu-grid-aggregator.js"}