{"version":3,"sources":["../../../src/views/view-manager.js"],"names":["ViewManager","props","views","width","height","viewState","controllers","_viewports","_viewportMap","_isUpdating","_needsRedraw","_needsUpdate","_eventManager","eventManager","_eventCallbacks","onViewStateChange","onInteractiveStateChange","Object","seal","setProps","key","finalize","clearRedrawFlags","redraw","reason","rect","filter","viewport","containsPixel","viewId","xyz","opts","topLeft","viewports","getViewports","i","length","contains","project","unproject","_setViews","_setViewState","_setSize","_update","_rebuildViewports","Number","isFinite","setNeedsUpdate","Boolean","map","Viewport","View","viewportInstance","view","viewsChanged","_diffViews","viewStateChanged","log","warn","event","Controller","type","controller","assign","_onViewStateChange","bind","id","onStateChange","oldControllers","getViewState","makeViewport","controllerProps","defaultState","x","y","_createController","_buildViewportMap","forEach","newViews","oldViews","some","_","equals"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport assert from '../utils/assert';\nimport {deepEqual} from '../utils/deep-equal';\nimport View from '../views/view';\nimport Viewport from '../viewports/viewport';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\n\nexport default class ViewManager {\n  constructor(props = {}) {\n    // List of view descriptors, gets re-evaluated when width/height changes\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n\n    this._viewports = []; // Generated viewports\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = true;\n\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractiveStateChange: props.onInteractiveStateChange\n    };\n\n    Object.seal(this);\n\n    // Init with default map viewport\n    this.setProps(props);\n  }\n\n  finalize() {\n    for (const key in this.controllers) {\n      this.controllers[key].finalize();\n    }\n    this.controllers = {};\n  }\n\n  // Check if a redraw is needed\n  needsRedraw({clearRedrawFlags = true} = {}) {\n    const redraw = this._needsRedraw;\n    if (clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  // Layers will be redrawn (in next animation frame)\n  setNeedsRedraw(reason) {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  /** Get a set of viewports for a given width and height\n   * TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props\n   * @param rect (object, optional) - filter the viewports\n   *   + not provided - return all viewports\n   *   + {x, y} - only return viewports that contain this pixel\n   *   + {x, y, width, height} - only return viewports that overlap with this rectangle\n   */\n  getViewports(rect) {\n    if (rect) {\n      return this._viewports.filter(viewport => viewport.containsPixel(rect));\n    }\n    return this._viewports;\n  }\n\n  getViewport(viewId) {\n    return this._viewportMap[viewId];\n  }\n\n  getViewState(viewId) {\n    // Backward compatibility: view state for single view\n    return this.viewState[viewId] || this.viewState;\n  }\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @return {Array} - [x, y] or [x, y, z] in top left coords\n   */\n  project(xyz, opts = {topLeft: true}) {\n    const viewports = this.getViewports();\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.contains(xyz, opts)) {\n        return viewport.project(xyz, opts);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, opts) {\n    const viewports = this.getViewports();\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.containsPixel(xyz, opts)) {\n        return viewport.unproject(xyz);\n      }\n    }\n    return null;\n  }\n\n  setProps(props) {\n    if ('views' in props) {\n      this._setViews(props.views);\n    }\n\n    // TODO - support multiple view states\n    if ('viewState' in props) {\n      this._setViewState(props.viewState);\n    }\n\n    if ('width' in props || 'height' in props) {\n      this._setSize(props.width, props.height);\n    }\n\n    // Important: avoid invoking _update() inside itself\n    // Nested updates result in unexpected side effects inside _rebuildViewports()\n    // when using auto control in pure-js\n    if (!this._isUpdating) {\n      this._update();\n    }\n  }\n\n  _update() {\n    this._isUpdating = true;\n\n    // Only rebuild viewports if the update flag is set\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    // If viewport transition(s) are triggered during viewports update, controller(s)\n    // will immediately call `onViewStateChange` which calls `viewManager.setProps` again.\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    this._isUpdating = false;\n  }\n\n  _setSize(width, height) {\n    assert(Number.isFinite(width) && Number.isFinite(height));\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.setNeedsUpdate('Size changed');\n    }\n  }\n\n  // Update the view descriptor list and set change flag if needed\n  // Does not actually rebuild the `Viewport`s until `getViewports` is called\n  _setViews(views) {\n    // DEPRECATED: Ensure any \"naked\" Viewports are wrapped in View instances\n    views = flatten(views, {filter: Boolean}).map(\n      view => (view instanceof Viewport ? new View({viewportInstance: view}) : view)\n    );\n\n    const viewsChanged = this._diffViews(views, this.views);\n    if (viewsChanged) {\n      this.setNeedsUpdate('views changed');\n    }\n\n    this.views = views;\n  }\n\n  _setViewState(viewState) {\n    if (viewState) {\n      const viewStateChanged = !deepEqual(viewState, this.viewState);\n\n      if (viewStateChanged) {\n        this.setNeedsUpdate('viewState changed');\n      }\n\n      this.viewState = viewState;\n    } else {\n      log.warn('setting null viewState')();\n    }\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  _onViewStateChange(viewId, event) {\n    event.viewId = viewId;\n    this._eventCallbacks.onViewStateChange(event);\n  }\n\n  _createController(props) {\n    const Controller = props.type;\n\n    const controller = new Controller(\n      Object.assign(\n        {\n          eventManager: this._eventManager,\n          // Set an internal callback that calls the prop callback if provided\n          onViewStateChange: this._onViewStateChange.bind(this, props.id),\n          onStateChange: this._eventCallbacks.onInteractiveStateChange\n        },\n        props\n      )\n    );\n\n    return controller;\n  }\n\n  // Rebuilds viewports from descriptors towards a certain window size\n  _rebuildViewports() {\n    const {width, height, views} = this;\n\n    const oldControllers = this.controllers;\n    this.controllers = {};\n\n    this._viewports = views.map(view => {\n      const viewState = this.getViewState(view.id);\n      const viewport = view.makeViewport({width, height, viewState});\n\n      // Update the controller\n      if (view.controller) {\n        const controllerProps = Object.assign({}, view.controller, view.defaultState, viewState, {\n          id: view.id,\n          x: viewport.x,\n          y: viewport.y,\n          width: viewport.width,\n          height: viewport.height\n        });\n\n        let controller = oldControllers[view.id];\n        if (controller) {\n          controller.setProps(controllerProps);\n        } else {\n          controller = this._createController(controllerProps);\n        }\n        this.controllers[view.id] = controller;\n      }\n\n      return viewport;\n    });\n\n    // Remove unused controllers\n    for (const id in oldControllers) {\n      if (!this.controllers[id]) {\n        oldControllers[id].finalize();\n      }\n    }\n\n    this._buildViewportMap();\n  }\n\n  _buildViewportMap() {\n    // Build a view id to view index\n    this._viewportMap = {};\n    this._viewports.forEach(viewport => {\n      if (viewport.id) {\n        // TODO - issue warning if multiple viewports use same id\n        this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;\n      }\n    });\n  }\n\n  // Check if viewport array has changed, returns true if any change\n  // Note that descriptors can be the same\n  _diffViews(newViews, oldViews) {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n}\n"],"file":"view-manager.js"}