{"version":3,"sources":["../../../src/lib/attribute-transition-utils.js"],"names":["Buffer","padArray","ATTRIBUTE_MAPPING","getShaders","transitions","varyings","attributeDeclarations","uniformsDeclarations","varyingDeclarations","calculations","attributeName","transition","attributeType","attribute","size","bufferIndex","length","push","vs","join","fs","getBuffers","sourceBuffers","feedbackBuffers","fromState","toState","buffer","padBuffer","fromLength","toLength","fromBufferLayout","toBufferLayout","getData","x","hasBufferLayout","data","Float32Array","fromData","value","constant","toData","getMissingData","i","chunk","subarray","source","target","sourceLayout","targetLayout","setData"],"mappings":"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","sourcesContent":["import {Buffer} from 'luma.gl';\nimport {padArray} from '../utils/array-utils';\n\nconst ATTRIBUTE_MAPPING = {\n  1: 'float',\n  2: 'vec2',\n  3: 'vec3',\n  4: 'vec4'\n};\n\nexport function getShaders(transitions) {\n  // Build shaders\n  const varyings = [];\n  const attributeDeclarations = [];\n  const uniformsDeclarations = [];\n  const varyingDeclarations = [];\n  const calculations = [];\n\n  for (const attributeName in transitions) {\n    const transition = transitions[attributeName];\n    const attributeType = ATTRIBUTE_MAPPING[transition.attribute.size];\n\n    if (attributeType) {\n      transition.bufferIndex = varyings.length;\n      varyings.push(attributeName);\n\n      attributeDeclarations.push(`attribute ${attributeType} ${attributeName}From;`);\n      attributeDeclarations.push(`attribute ${attributeType} ${attributeName}To;`);\n      uniformsDeclarations.push(`uniform float ${attributeName}Time;`);\n      varyingDeclarations.push(`varying ${attributeType} ${attributeName};`);\n      calculations.push(`${attributeName} = mix(${attributeName}From, ${attributeName}To,\n        ${attributeName}Time);`);\n    }\n  }\n\n  const vs = `\n#define SHADER_NAME feedback-vertex-shader\n${attributeDeclarations.join('\\n')}\n${uniformsDeclarations.join('\\n')}\n${varyingDeclarations.join('\\n')}\n\nvoid main(void) {\n  ${calculations.join('\\n')}\n  gl_Position = vec4(0.0);\n}\n`;\n\n  const fs = `\\\n#define SHADER_NAME feedback-fragment-shader\n\nprecision highp float;\n\n${varyingDeclarations.join('\\n')}\n\nvoid main(void) {\n  gl_FragColor = vec4(0.0);\n}\n`;\n  return {vs, fs, varyings};\n}\n\nexport function getBuffers(transitions) {\n  const sourceBuffers = {};\n  const feedbackBuffers = {};\n  for (const attributeName in transitions) {\n    const {fromState, toState, buffer} = transitions[attributeName];\n    sourceBuffers[`${attributeName}From`] = fromState;\n    sourceBuffers[`${attributeName}To`] = toState;\n    feedbackBuffers[`${attributeName}`] = buffer;\n  }\n  return {sourceBuffers, feedbackBuffers};\n}\n\nexport function padBuffer({\n  fromState,\n  toState,\n  fromLength,\n  toLength,\n  fromBufferLayout,\n  toBufferLayout,\n  getData = x => x\n}) {\n  const hasBufferLayout = fromBufferLayout && toBufferLayout;\n\n  // check if buffer needs to be padded\n  if ((!hasBufferLayout && fromLength >= toLength) || !(fromState instanceof Buffer)) {\n    return;\n  }\n\n  const data = new Float32Array(toLength);\n  const fromData = fromState.getData({});\n\n  const {value, buffer, size, constant} = toState;\n  const toData = value || buffer.getData({});\n\n  const getMissingData = constant\n    ? (i, chunk) => getData(value, chunk)\n    : (i, chunk) => getData(toData.subarray(i, i + size), chunk);\n\n  padArray({\n    source: fromData,\n    target: data,\n    sourceLayout: fromBufferLayout,\n    targetLayout: toBufferLayout,\n    size: toState.size,\n    getData: getMissingData\n  });\n\n  fromState.setData({data});\n}\n"],"file":"attribute-transition-utils.js"}