{"version":3,"sources":["../../../src/lib/attribute-manager.js"],"names":["Attribute","log","AttributeTransitionManager","LOG_START_END_PRIORITY","LOG_DETAIL_PRIORITY","noop","logFunctions","savedMessages","timeStart","onLog","level","message","onUpdateStart","numInstances","Date","onUpdate","push","onUpdateEnd","id","timeMs","Math","round","time","group","collapsed","groupEnd","AttributeManager","undefined","gl","stats","attributes","updateTriggers","accessors","needsRedraw","userData","attributeTransitionManager","Object","seal","attributeName","delete","finalize","clearRedrawFlags","redraw","updaters","_add","instanced","attributeNameArray","i","length","name","triggerName","invalidatedAttributes","_invalidateTrigger","setNeedsUpdate","data","transitions","props","buffers","context","updated","attribute","setExternalBuffer","setGenericValue","getAccessor","needsUpdate","_updateAttribute","timeEnd","update","transitionUpdated","setCurrentTime","now","clearChangedFlags","changedAttributes","assign","getAttributes","hasAttribute","extraProps","removed","newAttributes","constant","isIndexed","elements","size","value","_mapUpdateTriggersToAttributes","triggers","getUpdateTriggers","forEach","keys","join","warn","allocate","updateBuffer"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,OAAOC,0BAAP,MAAuC,gCAAvC;AAEA,IAAMC,yBAAyB,CAA/B;AACA,IAAMC,sBAAsB,CAA5B;;AAEA,SAASC,IAAT,GAAgB,CAAE,C,CAElB;;;AACA,IAAMC,eAAe;AACnBC,iBAAe,IADI;AAEnBC,aAAW,IAFQ;AAGnBC,SAAO,qBAAsB;AAAA,QAApBC,KAAoB,QAApBA,KAAoB;AAAA,QAAbC,OAAa,QAAbA,OAAa;AAC3BV,QAAIA,GAAJ,CAAQS,KAAR,EAAeC,OAAf;AACD,GALkB;AAMnBC,iBAAe,8BAA2B;AAAA,QAAzBF,KAAyB,SAAzBA,KAAyB;AAAA,QAAlBG,YAAkB,SAAlBA,YAAkB;AACxCP,iBAAaC,aAAb,GAA6B,EAA7B;AACAD,iBAAaE,SAAb,GAAyB,IAAIM,IAAJ,EAAzB;AACD,GATkB;AAUnBC,YAAU,yBAAsB;AAAA,QAApBL,KAAoB,SAApBA,KAAoB;AAAA,QAAbC,OAAa,SAAbA,OAAa;;AAC9B,QAAIL,aAAaC,aAAjB,EAAgC;AAC9BD,mBAAaC,aAAb,CAA2BS,IAA3B,CAAgCL,OAAhC;AACD;AACF,GAdkB;AAenBM,eAAa,4BAA+B;AAAA,QAA7BP,KAA6B,SAA7BA,KAA6B;AAAA,QAAtBQ,EAAsB,SAAtBA,EAAsB;AAAA,QAAlBL,YAAkB,SAAlBA,YAAkB;AAC1C,QAAMM,SAASC,KAAKC,KAAL,CAAW,IAAIP,IAAJ,KAAaR,aAAaE,SAArC,CAAf;AACA,QAAMc,iBAAUH,MAAV,OAAN;AACAlB,QAAIsB,KAAJ,CAAUb,KAAV,mCAA2CG,YAA3C,2BAAwEK,EAAxE,iBAAiFI,IAAjF,GAAyF;AACvFE,iBAAW;AAD4E,KAAzF;AAH0C;AAAA;AAAA;;AAAA;AAM1C,2BAAsBlB,aAAaC,aAAnC,8HAAkD;AAAA,YAAvCI,OAAuC;AAChDV,YAAIA,GAAJ,CAAQS,KAAR,EAAeC,OAAf;AACD;AARyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAS1CV,QAAIwB,QAAJ,CAAaf,KAAb,mCAA8CG,YAA9C,2BAA2EK,EAA3E,iBAAoFI,IAApF;AACAhB,iBAAaC,aAAb,GAA6B,IAA7B;AACD;AA1BkB,CAArB;;IA6BqBmB,gB;;;;;;AACnB;;;;;;;;;;;;;;6CAckF;AAAA,sFAAJ,EAAI;AAAA,UAAnDjB,KAAmD,SAAnDA,KAAmD;AAAA,UAA5CG,aAA4C,SAA5CA,aAA4C;AAAA,UAA7BG,QAA6B,SAA7BA,QAA6B;AAAA,UAAnBE,WAAmB,SAAnBA,WAAmB;;AAChF,UAAIR,UAAUkB,SAAd,EAAyB;AACvBrB,qBAAaG,KAAb,GAAqBA,SAASJ,IAA9B;AACD;;AACD,UAAIO,kBAAkBe,SAAtB,EAAiC;AAC/BrB,qBAAaM,aAAb,GAA6BA,iBAAiBP,IAA9C;AACD;;AACD,UAAIU,aAAaY,SAAjB,EAA4B;AAC1BrB,qBAAaS,QAAb,GAAwBA,YAAYV,IAApC;AACD;;AACD,UAAIY,gBAAgBU,SAApB,EAA+B;AAC7BrB,qBAAaW,WAAb,GAA2BA,eAAeZ,IAA1C;AACD;AACF;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,4BAAYuB,EAAZ,EAAwD;AAAA,oFAAJ,EAAI;AAAA,yBAAvCV,EAAuC;AAAA,QAAvCA,EAAuC,yBAAlC,mBAAkC;AAAA,QAAbW,KAAa,SAAbA,KAAa;;AAAA;;AACtD,SAAKX,EAAL,GAAUA,EAAV;AACA,SAAKU,EAAL,GAAUA,EAAV;AAEA,SAAKE,UAAL,GAAkB,EAAlB;AAEA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,WAAL,GAAmB,IAAnB;AAEA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKL,KAAL,GAAaA,KAAb;AAEA,SAAKM,0BAAL,GAAkC,IAAIjC,0BAAJ,CAA+B0B,EAA/B,EAAmC;AACnEV,oBAAOA,EAAP;AADmE,KAAnC,CAAlC,CAbsD,CAiBtD;;AACAkB,WAAOC,IAAP,CAAY,IAAZ;AACD;;;;+BAEU;AACT,WAAK,IAAMC,aAAX,IAA4B,KAAKR,UAAjC,EAA6C;AAC3C,aAAKA,UAAL,CAAgBQ,aAAhB,EAA+BC,MAA/B;AACD;;AACD,WAAKJ,0BAAL,CAAgCK,QAAhC;AACD,K,CAED;AACA;AACA;AACA;AACA;AACA;;;;qCACgD;AAAA,sFAAJ,EAAI;AAAA,wCAAhCC,gBAAgC;AAAA,UAAhCA,gBAAgC,sCAAb,KAAa;;AAC9C,UAAMC,SAAS,KAAKT,WAApB;AACA,WAAKA,WAAL,GAAmB,KAAKA,WAAL,IAAoB,CAACQ,gBAAxC;AACA,aAAOC,UAAU,KAAKxB,EAAtB;AACD,K,CAED;AACA;AACA;;;;qCAC8B;AAAA,UAAfwB,MAAe,uEAAN,IAAM;AAC5B,WAAKT,WAAL,GAAmB,IAAnB;AACA,aAAO,IAAP;AACD,K,CAED;;;;wBACIH,U,EAA2B;AAAA,UAAfa,QAAe,uEAAJ,EAAI;;AAC7B,WAAKC,IAAL,CAAUd,UAAV,EAAsBa,QAAtB;AACD,K,CAED;;;;iCACab,U,EAA2B;AAAA,UAAfa,QAAe,uEAAJ,EAAI;;AACtC,WAAKC,IAAL,CAAUd,UAAV,EAAsBa,QAAtB,EAAgC;AAACE,mBAAW;AAAZ,OAAhC;AACD;AAED;;;;;;;;;;;;;2BAUOC,kB,EAAoB;AACzB,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,mBAAmBE,MAAvC,EAA+CD,GAA/C,EAAoD;AAClD,YAAME,OAAOH,mBAAmBC,CAAnB,CAAb;;AACA,YAAI,KAAKjB,UAAL,CAAgBmB,IAAhB,MAA0BtB,SAA9B,EAAyC;AACvC,eAAKG,UAAL,CAAgBmB,IAAhB,EAAsBV,MAAtB;AACA,iBAAO,KAAKT,UAAL,CAAgBmB,IAAhB,CAAP;AACD;AACF;AACF,K,CAED;;;;+BACWC,W,EAAa;AACtB,UAAMC,wBAAwB,KAAKC,kBAAL,CAAwBF,WAAxB,CAA9B,CADsB,CAEtB;;;AACA5C,mBAAaG,KAAb,CAAmB;AACjBC,eAAON,mBADU;AAEjBO,kDAAmCwC,qBAAnC,eAA6DD,WAA7D,mBAAiF,KAAKhC,EAAtF;AAFiB,OAAnB;AAID;;;oCAEe;AACd,WAAK,IAAMoB,aAAX,IAA4B,KAAKR,UAAjC,EAA6C;AAC3C,aAAKA,UAAL,CAAgBQ,aAAhB,EAA+Be,cAA/B;AACD,OAHa,CAId;;;AACA/C,mBAAaG,KAAb,CAAmB;AACjBC,eAAON,mBADU;AAEjBO,0DAA2C,KAAKO,EAAhD;AAFiB,OAAnB;AAID,K,CAED;;;;6BACuF;AAAA,sFAAJ,EAAI;AAAA,UAA/EoC,IAA+E,SAA/EA,IAA+E;AAAA,UAAzEzC,YAAyE,SAAzEA,YAAyE;AAAA,UAA3D0C,WAA2D,SAA3DA,WAA2D;AAAA,8BAA9CC,KAA8C;AAAA,UAA9CA,KAA8C,4BAAtC,EAAsC;AAAA,gCAAlCC,OAAkC;AAAA,UAAlCA,OAAkC,8BAAxB,EAAwB;AAAA,gCAApBC,OAAoB;AAAA,UAApBA,OAAoB,8BAAV,EAAU;;AACrF;AACA,UAAIC,UAAU,KAAd;AAEArD,mBAAaM,aAAb,CAA2B;AAACF,eAAOP,sBAAR;AAAgCe,YAAI,KAAKA,EAAzC;AAA6CL;AAA7C,OAA3B;;AACA,UAAI,KAAKgB,KAAT,EAAgB;AACd,aAAKA,KAAL,CAAWrB,SAAX,CAAqB,mBAArB,EAA0C,KAAKU,EAA/C;AACD;;AAED,WAAK,IAAMoB,aAAX,IAA4B,KAAKR,UAAjC,EAA6C;AAC3C,YAAM8B,YAAY,KAAK9B,UAAL,CAAgBQ,aAAhB,CAAlB;;AAEA,YAAIsB,UAAUC,iBAAV,CAA4BJ,QAAQnB,aAAR,CAA5B,EAAoD,KAAKzB,YAAzD,CAAJ,EAA4E,CAC1E;AACD,SAFD,MAEO,IAAI+C,UAAUE,eAAV,CAA0BN,MAAMI,UAAUG,WAAV,EAAN,CAA1B,CAAJ,EAA+D,CACpE;AACD,SAFM,MAEA,IAAIH,UAAUI,WAAV,EAAJ,EAA6B;AAClCL,oBAAU,IAAV;;AACA,eAAKM,gBAAL,CAAsB;AAACL,gCAAD;AAAY/C,sCAAZ;AAA0ByC,sBAA1B;AAAgCE,wBAAhC;AAAuCE;AAAvC,WAAtB;AACD;;AAED,aAAKzB,WAAL,IAAoB2B,UAAU3B,WAAV,EAApB;AACD;;AAED,UAAI0B,OAAJ,EAAa;AACX;AACA,YAAI,KAAK9B,KAAT,EAAgB;AACd,eAAKA,KAAL,CAAWqC,OAAX,CAAmB,mBAAnB,EAAwC,KAAKhD,EAA7C;AACD;;AACDZ,qBAAaW,WAAb,CAAyB;AAACP,iBAAOP,sBAAR;AAAgCe,cAAI,KAAKA,EAAzC;AAA6CL;AAA7C,SAAzB;AACD;;AAED,WAAKsB,0BAAL,CAAgCgC,MAAhC,CAAuC;AACrCrC,oBAAY,KAAKA,UADoB;AAErCjB,kCAFqC;AAGrC0C;AAHqC,OAAvC;AAKD,K,CAED;AACA;;;;uCACmB;AAAA,UACVpB,0BADU,GACoB,IADpB,CACVA,0BADU;AAEjB,UAAMiC,oBAAoBjC,2BAA2BkC,cAA3B,CAA0CvD,KAAKwD,GAAL,EAA1C,CAA1B;AACA,WAAKrC,WAAL,GAAmB,KAAKA,WAAL,IAAoBmC,iBAAvC;AACA,aAAOA,iBAAP;AACD;AAED;;;;;;;;oCAKgB;AACd,aAAO,KAAKtC,UAAZ;AACD;AAED;;;;;;;;gDAKkD;AAAA,wCAA5ByC,iBAA4B;AAAA,UAA5BA,iBAA4B,sCAAR,KAAQ;AAAA,UACzCzC,UADyC,GACC,IADD,CACzCA,UADyC;AAAA,UAC7BK,0BAD6B,GACC,IADD,CAC7BA,0BAD6B;AAGhD,UAAMqC,oBAAoBpC,OAAOqC,MAAP,CAAc,EAAd,EAAkBtC,2BAA2BuC,aAA3B,EAAlB,CAA1B;;AAEA,WAAK,IAAMpC,aAAX,IAA4BR,UAA5B,EAAwC;AACtC,YAAM8B,YAAY9B,WAAWQ,aAAX,CAAlB;;AACA,YAAIsB,UAAU3B,WAAV,CAAsB;AAACsC,6BAAmB;AAApB,SAAtB,CAAJ,EAAsD;AACpD;AACA,cAAI,CAACpC,2BAA2BwC,YAA3B,CAAwCrC,aAAxC,CAAL,EAA6D;AAC3DkC,8BAAkBlC,aAAlB,IAAmCsB,SAAnC;AACD;AACF;AACF;;AACD,aAAOY,iBAAP;AACD,K,CAED;AAEA;AACA;;;;mCACe;AACb,aAAO,KAAKzC,cAAZ;AACD,K,CAED;AAEA;;;;yBACKD,U,EAAYa,Q,EAA2B;AAAA,UAAjBiC,UAAiB,uEAAJ,EAAI;;AAC1C,UAAIjC,QAAJ,EAAc;AACZ1C,YAAI4E,OAAJ,CAAY,oEAAZ;AACD;;AAED,UAAMC,gBAAgB,EAAtB;;AAEA,WAAK,IAAMxC,aAAX,IAA4BR,UAA5B,EAAwC;AACtC,YAAM8B,YAAY9B,WAAWQ,aAAX,CAAlB,CADsC,CAGtC;;AACAwC,sBAAcxC,aAAd,IAA+B,IAAItC,SAAJ,CAC7B,KAAK4B,EADwB,EAE7BQ,OAAOqC,MAAP,CAAc,EAAd,EAAkBb,SAAlB,EAA6B;AAC3B1C,cAAIoB,aADuB;AAE3B;AACAyC,oBAAUnB,UAAUmB,QAAV,IAAsB,KAHL;AAI3BC,qBAAWpB,UAAUoB,SAAV,IAAuBpB,UAAUqB,QAJjB;AAK3BC,gBAAOtB,UAAUqB,QAAV,IAAsB,CAAvB,IAA6BrB,UAAUsB,IALlB;AAM3BC,iBAAOvB,UAAUuB,KAAV,IAAmB,IANC;AAO3BtC,qBAAWe,UAAUf,SAAV,IAAuB+B,WAAW/B;AAPlB,SAA7B,CAF6B,CAA/B;AAYD;;AAEDT,aAAOqC,MAAP,CAAc,KAAK3C,UAAnB,EAA+BgD,aAA/B;;AAEA,WAAKM,8BAAL;AACD;AACD;AAEA;;;;qDACiC;AAAA;;AAC/B,UAAMC,WAAW,EAAjB;;AAD+B,iCAGpB/C,aAHoB;AAI7B,YAAMsB,YAAY,MAAK9B,UAAL,CAAgBQ,aAAhB,CAAlB;AACAsB,kBAAU0B,iBAAV,GAA8BC,OAA9B,CAAsC,uBAAe;AACnD,cAAI,CAACF,SAASnC,WAAT,CAAL,EAA4B;AAC1BmC,qBAASnC,WAAT,IAAwB,EAAxB;AACD;;AACDmC,mBAASnC,WAAT,EAAsBlC,IAAtB,CAA2BsB,aAA3B;AACD,SALD;AAL6B;;AAG/B,WAAK,IAAMA,aAAX,IAA4B,KAAKR,UAAjC,EAA6C;AAAA,cAAlCQ,aAAkC;AAQ5C;;AAED,WAAKP,cAAL,GAAsBsD,QAAtB;AACD;;;uCAEkBnC,W,EAAa;AAAA,UACvBpB,UADuB,GACO,IADP,CACvBA,UADuB;AAAA,UACXC,cADW,GACO,IADP,CACXA,cADW;AAE9B,UAAMoB,wBAAwBpB,eAAemB,WAAf,CAA9B;;AAEA,UAAIC,qBAAJ,EAA2B;AACzBA,8BAAsBoC,OAAtB,CAA8B,gBAAQ;AACpC,cAAM3B,YAAY9B,WAAWmB,IAAX,CAAlB;;AACA,cAAIW,SAAJ,EAAe;AACbA,sBAAUP,cAAV;AACD;AACF,SALD;AAMD,OAPD,MAOO;AACL,YAAI1C,sDAA+CuC,WAA/C,kBAAkE,KAAKhC,EAAvE,OAAJ;AACAP,6CAA8ByB,OAAOoD,IAAP,CAAY1D,UAAZ,EAAwB2D,IAAxB,CAA6B,IAA7B,CAA9B;AACAxF,YAAIyF,IAAJ,CAAS/E,OAAT,EAAkBwC,qBAAlB;AACD;;AACD,aAAOA,qBAAP;AACD;;;6CAEiE;AAAA,UAAhDS,SAAgD,UAAhDA,SAAgD;AAAA,UAArC/C,YAAqC,UAArCA,YAAqC;AAAA,UAAvByC,IAAuB,UAAvBA,IAAuB;AAAA,UAAjBE,KAAiB,UAAjBA,KAAiB;AAAA,UAAVE,OAAU,UAAVA,OAAU;;AAChE,UAAIE,UAAU+B,QAAV,CAAmB9E,YAAnB,CAAJ,EAAsC;AACpCP,qBAAaS,QAAb,CAAsB;AACpBL,iBAAON,mBADa;AAEpBO,6BAAYiD,UAAU1C,EAAtB,wBAAsCL,YAAtC,CAFoB;AAGpBK,cAAI,KAAKA;AAHW,SAAtB;AAKD,OAP+D,CAShE;;;AACA,UAAMV,YAAYM,KAAKwD,GAAL,EAAlB;AAEA,UAAMX,UAAUC,UAAUgC,YAAV,CAAuB;AAAC/E,kCAAD;AAAeyC,kBAAf;AAAqBE,oBAArB;AAA4BE;AAA5B,OAAvB,CAAhB;;AACA,UAAIC,OAAJ,EAAa;AACX,aAAK1B,WAAL,GAAmB,IAAnB;AAEA,YAAMd,SAASC,KAAKC,KAAL,CAAWP,KAAKwD,GAAL,KAAa9D,SAAxB,CAAf;AACAF,qBAAaS,QAAb,CAAsB;AACpBL,iBAAON,mBADa;AAEpBO,6BAAYiD,UAAU1C,EAAtB,sBAAoCL,YAApC,iBAAuDM,MAAvD;AAFoB,SAAtB;AAID;AACF;;;;;;SA5UkBO,gB","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable guard-for-in */\nimport Attribute from './attribute';\nimport log from '../utils/log';\n\nimport AttributeTransitionManager from './attribute-transition-manager';\n\nconst LOG_START_END_PRIORITY = 2;\nconst LOG_DETAIL_PRIORITY = 3;\n\nfunction noop() {}\n\n// Default loggers\nconst logFunctions = {\n  savedMessages: null,\n  timeStart: null,\n  onLog: ({level, message}) => {\n    log.log(level, message)();\n  },\n  onUpdateStart: ({level, numInstances}) => {\n    logFunctions.savedMessages = [];\n    logFunctions.timeStart = new Date();\n  },\n  onUpdate: ({level, message}) => {\n    if (logFunctions.savedMessages) {\n      logFunctions.savedMessages.push(message);\n    }\n  },\n  onUpdateEnd: ({level, id, numInstances}) => {\n    const timeMs = Math.round(new Date() - logFunctions.timeStart);\n    const time = `${timeMs}ms`;\n    log.group(level, `Updated attributes for ${numInstances} instances in ${id} in ${time}`, {\n      collapsed: true\n    })();\n    for (const message of logFunctions.savedMessages) {\n      log.log(level, message)();\n    }\n    log.groupEnd(level, `Updated attributes for ${numInstances} instances in ${id} in ${time}`)();\n    logFunctions.savedMessages = null;\n  }\n};\n\nexport default class AttributeManager {\n  /**\n   * Sets log functions to help trace or time attribute updates.\n   * Default logging uses deck logger.\n   *\n   * `onLog` is called for each attribute.\n   *\n   * To enable detailed control of timming and e.g. hierarchical logging,\n   * hooks are also provided for update start and end.\n   *\n   * @param {Object} [opts]\n   * @param {String} [onLog=] - called to print\n   * @param {String} [onUpdateStart=] - called before update() starts\n   * @param {String} [onUpdateEnd=] - called after update() ends\n   */\n  static setDefaultLogFunctions({onLog, onUpdateStart, onUpdate, onUpdateEnd} = {}) {\n    if (onLog !== undefined) {\n      logFunctions.onLog = onLog || noop;\n    }\n    if (onUpdateStart !== undefined) {\n      logFunctions.onUpdateStart = onUpdateStart || noop;\n    }\n    if (onUpdate !== undefined) {\n      logFunctions.onUpdate = onUpdate || noop;\n    }\n    if (onUpdateEnd !== undefined) {\n      logFunctions.onUpdateEnd = onUpdateEnd || noop;\n    }\n  }\n\n  /**\n   * @classdesc\n   * Automated attribute generation and management. Suitable when a set of\n   * vertex shader attributes are generated by iteration over a data array,\n   * and updates to these attributes are needed either when the data itself\n   * changes, or when other data relevant to the calculations change.\n   *\n   * - First the application registers descriptions of its dynamic vertex\n   *   attributes using AttributeManager.add().\n   * - Then, when any change that affects attributes is detected by the\n   *   application, the app will call AttributeManager.invalidate().\n   * - Finally before it renders, it calls AttributeManager.update() to\n   *   ensure that attributes are automatically rebuilt if anything has been\n   *   invalidated.\n   *\n   * The application provided update functions describe how attributes\n   * should be updated from a data array and are expected to traverse\n   * that data array (or iterable) and fill in the attribute's typed array.\n   *\n   * Note that the attribute manager intentionally does not do advanced\n   * change detection, but instead makes it easy to build such detection\n   * by offering the ability to \"invalidate\" each attribute separately.\n   */\n  constructor(gl, {id = 'attribute-manager', stats} = {}) {\n    this.id = id;\n    this.gl = gl;\n\n    this.attributes = {};\n\n    this.updateTriggers = {};\n    this.accessors = {};\n    this.needsRedraw = true;\n\n    this.userData = {};\n    this.stats = stats;\n\n    this.attributeTransitionManager = new AttributeTransitionManager(gl, {\n      id: `${id}-transitions`\n    });\n\n    // For debugging sanity, prevent uninitialized members\n    Object.seal(this);\n  }\n\n  finalize() {\n    for (const attributeName in this.attributes) {\n      this.attributes[attributeName].delete();\n    }\n    this.attributeTransitionManager.finalize();\n  }\n\n  // Returns the redraw flag, optionally clearing it.\n  // Redraw flag will be set if any attributes attributes changed since\n  // flag was last cleared.\n  //\n  // @param {String} [clearRedrawFlags=false] - whether to clear the flag\n  // @return {false|String} - reason a redraw is needed.\n  getNeedsRedraw({clearRedrawFlags = false} = {}) {\n    const redraw = this.needsRedraw;\n    this.needsRedraw = this.needsRedraw && !clearRedrawFlags;\n    return redraw && this.id;\n  }\n\n  // Sets the redraw flag.\n  // @param {Boolean} redraw=true\n  // @return {AttributeManager} - for chaining\n  setNeedsRedraw(redraw = true) {\n    this.needsRedraw = true;\n    return this;\n  }\n\n  // Adds attributes\n  add(attributes, updaters = {}) {\n    this._add(attributes, updaters);\n  }\n\n  // Adds attributes\n  addInstanced(attributes, updaters = {}) {\n    this._add(attributes, updaters, {instanced: 1});\n  }\n\n  /**\n   * Removes attributes\n   * Takes an array of attribute names and delete them from\n   * the attribute map if they exists\n   *\n   * @example\n   * attributeManager.remove(['position']);\n   *\n   * @param {Object} attributeNameArray - attribute name array (see above)\n   */\n  remove(attributeNameArray) {\n    for (let i = 0; i < attributeNameArray.length; i++) {\n      const name = attributeNameArray[i];\n      if (this.attributes[name] !== undefined) {\n        this.attributes[name].delete();\n        delete this.attributes[name];\n      }\n    }\n  }\n\n  // Marks an attribute for update\n  invalidate(triggerName) {\n    const invalidatedAttributes = this._invalidateTrigger(triggerName);\n    // For performance tuning\n    logFunctions.onLog({\n      level: LOG_DETAIL_PRIORITY,\n      message: `invalidated attributes ${invalidatedAttributes} (${triggerName}) for ${this.id}`\n    });\n  }\n\n  invalidateAll() {\n    for (const attributeName in this.attributes) {\n      this.attributes[attributeName].setNeedsUpdate();\n    }\n    // For performance tuning\n    logFunctions.onLog({\n      level: LOG_DETAIL_PRIORITY,\n      message: `invalidated all attributes for ${this.id}`\n    });\n  }\n\n  // Ensure all attribute buffers are updated from props or data.\n  update({data, numInstances, transitions, props = {}, buffers = {}, context = {}} = {}) {\n    // keep track of whether some attributes are updated\n    let updated = false;\n\n    logFunctions.onUpdateStart({level: LOG_START_END_PRIORITY, id: this.id, numInstances});\n    if (this.stats) {\n      this.stats.timeStart('attribute updates', this.id);\n    }\n\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n\n      if (attribute.setExternalBuffer(buffers[attributeName], this.numInstances)) {\n        // Attribute is using external buffer from the props\n      } else if (attribute.setGenericValue(props[attribute.getAccessor()])) {\n        // Attribute is using generic value from the props\n      } else if (attribute.needsUpdate()) {\n        updated = true;\n        this._updateAttribute({attribute, numInstances, data, props, context});\n      }\n\n      this.needsRedraw |= attribute.needsRedraw();\n    }\n\n    if (updated) {\n      // Only initiate alloc/update (and logging) if actually needed\n      if (this.stats) {\n        this.stats.timeEnd('attribute updates', this.id);\n      }\n      logFunctions.onUpdateEnd({level: LOG_START_END_PRIORITY, id: this.id, numInstances});\n    }\n\n    this.attributeTransitionManager.update({\n      attributes: this.attributes,\n      numInstances,\n      transitions\n    });\n  }\n\n  // Update attribute transition to the current timestamp\n  // Returns `true` if any transition is in progress\n  updateTransition() {\n    const {attributeTransitionManager} = this;\n    const transitionUpdated = attributeTransitionManager.setCurrentTime(Date.now());\n    this.needsRedraw = this.needsRedraw || transitionUpdated;\n    return transitionUpdated;\n  }\n\n  /**\n   * Returns all attribute descriptors\n   * Note: Format matches luma.gl Model/Program.setAttributes()\n   * @return {Object} attributes - descriptors\n   */\n  getAttributes() {\n    return this.attributes;\n  }\n\n  /**\n   * Returns changed attribute descriptors\n   * This indicates which WebGLBuggers need to be updated\n   * @return {Object} attributes - descriptors\n   */\n  getChangedAttributes({clearChangedFlags = false}) {\n    const {attributes, attributeTransitionManager} = this;\n\n    const changedAttributes = Object.assign({}, attributeTransitionManager.getAttributes());\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      if (attribute.needsRedraw({clearChangedFlags: true})) {\n        // Only return non-transition attributes\n        if (!attributeTransitionManager.hasAttribute(attributeName)) {\n          changedAttributes[attributeName] = attribute;\n        }\n      }\n    }\n    return changedAttributes;\n  }\n\n  // PROTECTED METHODS - Only to be used by collaborating classes, not by apps\n\n  // Returns object containing all accessors as keys, with non-null values\n  // @return {Object} - accessors object\n  getAccessors() {\n    return this.updateTriggers;\n  }\n\n  // PRIVATE METHODS\n\n  // Used to register an attribute\n  _add(attributes, updaters, extraProps = {}) {\n    if (updaters) {\n      log.removed('AttributeManager.add({updaters}) - updater map no longer supported');\n    }\n\n    const newAttributes = {};\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n\n      // Initialize the attribute descriptor, with WebGL and metadata fields\n      newAttributes[attributeName] = new Attribute(\n        this.gl,\n        Object.assign({}, attribute, {\n          id: attributeName,\n          // Luma fields\n          constant: attribute.constant || false,\n          isIndexed: attribute.isIndexed || attribute.elements,\n          size: (attribute.elements && 1) || attribute.size,\n          value: attribute.value || null,\n          instanced: attribute.instanced || extraProps.instanced\n        })\n      );\n    }\n\n    Object.assign(this.attributes, newAttributes);\n\n    this._mapUpdateTriggersToAttributes();\n  }\n  /* eslint-enable max-statements */\n\n  // build updateTrigger name to attribute name mapping\n  _mapUpdateTriggersToAttributes() {\n    const triggers = {};\n\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n      attribute.getUpdateTriggers().forEach(triggerName => {\n        if (!triggers[triggerName]) {\n          triggers[triggerName] = [];\n        }\n        triggers[triggerName].push(attributeName);\n      });\n    }\n\n    this.updateTriggers = triggers;\n  }\n\n  _invalidateTrigger(triggerName) {\n    const {attributes, updateTriggers} = this;\n    const invalidatedAttributes = updateTriggers[triggerName];\n\n    if (invalidatedAttributes) {\n      invalidatedAttributes.forEach(name => {\n        const attribute = attributes[name];\n        if (attribute) {\n          attribute.setNeedsUpdate();\n        }\n      });\n    } else {\n      let message = `invalidating non-existent trigger ${triggerName} for ${this.id}\\n`;\n      message += `Valid triggers: ${Object.keys(attributes).join(', ')}`;\n      log.warn(message, invalidatedAttributes)();\n    }\n    return invalidatedAttributes;\n  }\n\n  _updateAttribute({attribute, numInstances, data, props, context}) {\n    if (attribute.allocate(numInstances)) {\n      logFunctions.onUpdate({\n        level: LOG_DETAIL_PRIORITY,\n        message: `${attribute.id} allocated ${numInstances}`,\n        id: this.id\n      });\n    }\n\n    // Calls update on any buffers that need update\n    const timeStart = Date.now();\n\n    const updated = attribute.updateBuffer({numInstances, data, props, context});\n    if (updated) {\n      this.needsRedraw = true;\n\n      const timeMs = Math.round(Date.now() - timeStart);\n      logFunctions.onUpdate({\n        level: LOG_DETAIL_PRIORITY,\n        message: `${attribute.id} updated ${numInstances} in ${timeMs}ms`\n      });\n    }\n  }\n}\n"],"file":"attribute-manager.js"}