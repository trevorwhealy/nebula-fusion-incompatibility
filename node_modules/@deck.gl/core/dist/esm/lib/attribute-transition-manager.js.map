{"version":3,"sources":["../../../src/lib/attribute-transition-manager.js"],"names":["GL","Buffer","_Transform","Transform","getShaders","getBuffers","padBuffer","Attribute","Transition","log","assert","noop","DEFAULT_TRANSITION_SETTINGS","duration","easing","t","onStart","onEnd","onInterrupt","AttributeTransitionManager","gl","id","attributeTransitions","needsRedraw","transform","numInstances","isSupported","warn","delete","attributeName","_removeTransition","attributes","transitions","opts","changedTransitions","hasChanged","_updateAttribute","attribute","supportsTransition","_createModel","sourceBuffers","feedbackBuffers","update","elementCount","animatedAttributes","transition","buffer","attributeInTransition","currentTime","uniforms","updated","time","run","name","bufferLayout","_invalidateModel","_swapBuffer","settings","getTransitionSetting","_createTransition","_triggerTransition","Object","keys","length","assign","size","toState","constant","value","getBuffer","externalBuffer","fromState","toLength","fromLength","getElementCount","data","Float32Array","usage","DYNAMIC_COPY","setData","fromBufferLayout","toBufferLayout","getData","enter","transitionSettings","start","_getNextTransitionStates"],"mappings":"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","sourcesContent":["import GL from 'luma.gl/constants';\nimport {Buffer, _Transform as Transform} from 'luma.gl';\nimport {getShaders, getBuffers, padBuffer} from './attribute-transition-utils';\nimport Attribute from './attribute';\nimport Transition from '../transitions/transition';\nimport log from '../utils/log';\nimport assert from '../utils/assert';\n\nconst noop = () => {};\nconst DEFAULT_TRANSITION_SETTINGS = {\n  duration: 0,\n  easing: t => t,\n  onStart: noop,\n  onEnd: noop,\n  onInterrupt: noop\n};\n\nexport default class AttributeTransitionManager {\n  constructor(gl, {id}) {\n    this.id = id;\n    this.gl = gl;\n\n    this.attributeTransitions = {};\n    this.needsRedraw = false;\n    this.transform = null;\n    this.numInstances = 0;\n\n    if (Transform.isSupported(gl)) {\n      this.isSupported = true;\n    } else {\n      log.warn('WebGL2 not supported by this browser. Transition animation is disabled.')();\n    }\n  }\n\n  finalize() {\n    if (this.transform) {\n      this.transform.delete();\n    }\n    for (const attributeName in this.attributeTransitions) {\n      this._removeTransition(attributeName);\n    }\n  }\n\n  /* Public methods */\n\n  // Called when attribute manager updates\n  // Check the latest attributes for updates.\n  update({attributes, transitions = {}, numInstances}) {\n    this.opts = transitions;\n    this.numInstances = numInstances;\n\n    if (!this.isSupported) {\n      return;\n    }\n\n    const {attributeTransitions} = this;\n    const changedTransitions = {};\n\n    for (const attributeName in attributes) {\n      const hasChanged = this._updateAttribute(attributeName, attributes[attributeName]);\n\n      if (hasChanged) {\n        changedTransitions[attributeName] = attributeTransitions[attributeName];\n      }\n    }\n\n    for (const attributeName in attributeTransitions) {\n      const attribute = attributes[attributeName];\n\n      if (!attribute || !attribute.supportsTransition()) {\n        // Animated attribute has been removed\n        this._removeTransition(attributeName);\n      }\n    }\n\n    if (!this.transform) {\n      this._createModel();\n    } else if (this.transform) {\n      const {sourceBuffers, feedbackBuffers} = getBuffers(changedTransitions);\n      this.transform.update({\n        elementCount: this.numInstances,\n        sourceBuffers,\n        feedbackBuffers\n      });\n    }\n  }\n\n  // Returns `true` if attribute is transition-enabled\n  hasAttribute(attributeName) {\n    return attributeName in this.attributeTransitions;\n  }\n\n  // Get all the animated attributes\n  getAttributes() {\n    const animatedAttributes = {};\n\n    for (const attributeName in this.attributeTransitions) {\n      const transition = this.attributeTransitions[attributeName];\n\n      if (transition.buffer) {\n        animatedAttributes[attributeName] = transition.attributeInTransition;\n      }\n    }\n\n    return animatedAttributes;\n  }\n\n  /* eslint-disable max-statements */\n  // Called every render cycle, run transform feedback\n  // Returns `true` if anything changes\n  setCurrentTime(currentTime) {\n    if (!this.transform || this.numInstances === 0) {\n      return false;\n    }\n\n    const uniforms = {};\n\n    let needsRedraw = this.needsRedraw;\n    this.needsRedraw = false;\n\n    for (const attributeName in this.attributeTransitions) {\n      const transition = this.attributeTransitions[attributeName];\n      const updated = transition.update(currentTime);\n      if (updated) {\n        uniforms[`${attributeName}Time`] = transition.time;\n        needsRedraw = true;\n      }\n    }\n\n    if (needsRedraw) {\n      this.transform.run({uniforms});\n    }\n\n    return needsRedraw;\n  }\n  /* eslint-enable max-statements */\n\n  /* Private methods */\n  _createTransition(attributeName, attribute) {\n    let transition = this.attributeTransitions[attributeName];\n    if (!transition) {\n      transition = new Transition({\n        name: attributeName,\n        attribute,\n        attributeInTransition: new Attribute(this.gl, attribute),\n        bufferLayout: attribute.bufferLayout\n      });\n      this.attributeTransitions[attributeName] = transition;\n      this._invalidateModel();\n      return transition;\n    }\n    return null;\n  }\n\n  _removeTransition(attributeName) {\n    const transition = this.attributeTransitions[attributeName];\n    if (transition) {\n      if (transition.buffer) {\n        transition.buffer.delete();\n      }\n      if (transition._swapBuffer) {\n        transition._swapBuffer.delete();\n      }\n      delete this.attributeTransitions[attributeName];\n      this._invalidateModel();\n    }\n  }\n\n  // Check an attributes for updates\n  // Returns a transition object if a new transition is triggered.\n  _updateAttribute(attributeName, attribute) {\n    const settings = attribute.getTransitionSetting(this.opts);\n\n    if (settings) {\n      let hasChanged;\n      let transition = this.attributeTransitions[attributeName];\n      if (transition) {\n        hasChanged = attribute.needsRedraw();\n      } else {\n        // New animated attributes have been added\n        transition = this._createTransition(attributeName, attribute);\n        hasChanged = true;\n      }\n\n      if (hasChanged) {\n        this._triggerTransition(transition, settings);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // Invalidates the current model\n  _invalidateModel() {\n    if (this.transform) {\n      this.transform.delete();\n      this.transform = null;\n    }\n  }\n\n  // Create a model for the transform feedback\n  _createModel() {\n    if (Object.keys(this.attributeTransitions).length === 0) {\n      // no transitions\n      return;\n    }\n    this.transform = new Transform(\n      this.gl,\n      Object.assign(\n        {\n          elementCount: this.numInstances\n        },\n        getBuffers(this.attributeTransitions),\n        getShaders(this.attributeTransitions)\n      )\n    );\n  }\n\n  // get current values of an attribute, clipped/padded to the size of the new buffer\n  _getNextTransitionStates(transition, settings) {\n    const {attribute} = transition;\n    const {size} = attribute;\n\n    let toState;\n    if (attribute.constant) {\n      toState = {constant: true, value: attribute.value, size};\n    } else {\n      toState = {\n        constant: false,\n        buffer: attribute.getBuffer(),\n        size,\n        // attribute's `value` does not match the content of external buffer,\n        // will need to call buffer.getData if needed\n        value: attribute.externalBuffer ? null : attribute.value\n      };\n    }\n    const fromState = transition.buffer || toState;\n    const toLength = this.numInstances * size;\n    const fromLength = (fromState instanceof Buffer && fromState.getElementCount()) || toLength;\n\n    // Alternate between two buffers when new transitions start.\n    // Last destination buffer is used as an attribute (from state),\n    // And the other buffer is now the destination buffer.\n    let buffer = transition._swapBuffer;\n    transition._swapBuffer = transition.buffer;\n\n    if (!buffer) {\n      buffer = new Buffer(this.gl, {\n        data: new Float32Array(toLength),\n        usage: GL.DYNAMIC_COPY\n      });\n    } else if (buffer.getElementCount() < toLength) {\n      // Pad buffers to be the same length\n      buffer.setData({\n        data: new Float32Array(toLength)\n      });\n    }\n\n    transition.attributeInTransition.update({buffer});\n\n    padBuffer({\n      fromState,\n      toState,\n      fromLength,\n      toLength,\n      fromBufferLayout: transition.bufferLayout,\n      toBufferLayout: attribute.bufferLayout,\n      getData: settings.enter\n    });\n\n    transition.bufferLayout = attribute.bufferLayout;\n\n    return {fromState, toState, buffer};\n  }\n\n  // Start a new transition using the current settings\n  // Updates transition state and from/to buffer\n  _triggerTransition(transition, settings) {\n    // Check if settings is valid\n    assert(settings && settings.duration > 0);\n\n    this.needsRedraw = true;\n\n    const transitionSettings = Object.assign({}, DEFAULT_TRANSITION_SETTINGS, settings);\n\n    // Attribute descriptor to transition from\n    transition.start(\n      Object.assign({}, this._getNextTransitionStates(transition, settings), transitionSettings)\n    );\n  }\n}\n"],"file":"attribute-transition-manager.js"}