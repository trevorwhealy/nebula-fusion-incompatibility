{"version":3,"sources":["../../../src/viewports/viewport.js"],"names":["log","createMat4","extractCameraVectors","Matrix4","Vector3","equals","mat4_scale","mat4_translate","mat4_multiply","mat4_invert","getDistanceScales","getMeterZoom","lngLatToWorld","worldToLngLat","worldToPixels","pixelsToWorld","assert","DEGREES_TO_RADIANS","Math","PI","IDENTITY","ZERO_VECTOR","DEFAULT_DISTANCE_SCALES","pixelsPerMeter","metersPerPixel","pixelsPerDegree","degreesPerPixel","DEFAULT_ZOOM","ERR_ARGUMENT","Viewport","opts","id","x","y","width","height","constructor","displayName","_initViewMatrix","_initProjectionMatrix","_initPixelMatrices","bind","project","unproject","projectFlat","unprojectFlat","getMatrices","viewport","projectionMatrix","viewMatrix","xyz","topLeft","x0","y0","z0","X","Y","coord","pixelProjectionMatrix","y2","length","targetZ","z","pixelUnprojectionMatrix","Number","isFinite","scale","isGeospatial","coordinateOrigin","longitude","latitude","highPrecision","distanceScales","modelMatrix","modelViewProjectionMatrix","viewProjectionMatrix","matrices","Object","assign","cameraPosition","cameraDirection","cameraUp","lngLatZ","lng","lat","Z","_metersToLngLatDelta","deltaLng","deltaLat","deltaZ","orthographic","fovyRadians","aspect","focalDistance","near","far","fovy","perspective","zoom","position","log2","pow","meterOffset","transformVector","viewMatrixUncentered","center","_getCenterInWorld","multiplyRight","translate","negate","center2d","pixelPosition","add","fovyDegrees","orthographicFocalDistance","radians","_createProjectionMatrix","vpm","viewMatrixInverse","eye","direction","up","m","warn"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport log from '../utils/log';\nimport {createMat4, extractCameraVectors} from '../utils/math-utils';\n\nimport {Matrix4, Vector3, equals} from 'math.gl';\nimport mat4_scale from 'gl-mat4/scale';\nimport mat4_translate from 'gl-mat4/translate';\nimport mat4_multiply from 'gl-mat4/multiply';\nimport mat4_invert from 'gl-mat4/invert';\n\nimport {\n  getDistanceScales,\n  getMeterZoom,\n  lngLatToWorld,\n  worldToLngLat,\n  worldToPixels,\n  pixelsToWorld\n} from 'viewport-mercator-project';\n\nimport assert from '../utils/assert';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nconst IDENTITY = createMat4();\n\nconst ZERO_VECTOR = [0, 0, 0];\n\nconst DEFAULT_DISTANCE_SCALES = {\n  pixelsPerMeter: [1, 1, 1],\n  metersPerPixel: [1, 1, 1],\n  pixelsPerDegree: [1, 1, 1],\n  degreesPerPixel: [1, 1, 1]\n};\n\nconst DEFAULT_ZOOM = 0;\n\nconst ERR_ARGUMENT = 'Illegal argument to Viewport';\n\nexport default class Viewport {\n  /**\n   * @classdesc\n   * Manages coordinate system transformations for deck.gl.\n   *\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  constructor(opts = {}) {\n    const {\n      id = null,\n      // Window width/height in pixels (for pixel projection)\n      x = 0,\n      y = 0,\n      width = 1,\n      height = 1\n    } = opts;\n\n    this.id = id || this.constructor.displayName || 'viewport';\n\n    this.x = x;\n    this.y = y;\n    // Silently allow apps to send in w,h = 0,0\n    this.width = width || 1;\n    this.height = height || 1;\n\n    this._initViewMatrix(opts);\n    this._initProjectionMatrix(opts);\n    this._initPixelMatrices();\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectFlat = this.projectFlat.bind(this);\n    this.unprojectFlat = this.unprojectFlat.bind(this);\n    this.getMatrices = this.getMatrices.bind(this);\n  }\n\n  // Two viewports are equal if width and height are identical, and if\n  // their view and projection matrices are (approximately) equal.\n  equals(viewport) {\n    if (!(viewport instanceof Viewport)) {\n      return false;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      equals(viewport.viewMatrix, this.viewMatrix)\n    );\n    // TODO - check distance scales?\n  }\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @return {Array} - [x, y] or [x, y, z] in top left coords\n   */\n  project(xyz, {topLeft = true} = {}) {\n    const [x0, y0, z0 = 0] = xyz;\n\n    const [X, Y] = this.projectFlat([x0, y0]);\n    const coord = worldToPixels([X, Y, z0], this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, {topLeft = true, targetZ} = {}) {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZ);\n    const [X, Y] = this.unprojectFlat(coord);\n\n    if (Number.isFinite(z)) {\n      // Has depth component\n      return [X, Y, coord[2]];\n    }\n\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   * @param {Array} lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return {Array} [x,y] coordinates.\n   */\n  projectFlat(xyz, scale = this.scale) {\n    if (this.isGeospatial) {\n      return lngLatToWorld(xyz, scale);\n    }\n    return xyz;\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   * @param {object|Vector} xy - object with {x,y} members\n   *  representing point on projected map plane\n   * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xyz, scale = this.scale) {\n    if (this.isGeospatial) {\n      return worldToLngLat(xyz, scale);\n    }\n    return xyz;\n  }\n\n  getDistanceScales(coordinateOrigin = null) {\n    if (coordinateOrigin) {\n      return getDistanceScales({\n        longitude: coordinateOrigin[0],\n        latitude: coordinateOrigin[1],\n        scale: this.scale,\n        highPrecision: true\n      });\n    }\n    return this.distanceScales;\n  }\n\n  getMatrices({modelMatrix = null} = {}) {\n    let modelViewProjectionMatrix = this.viewProjectionMatrix;\n    let pixelProjectionMatrix = this.pixelProjectionMatrix;\n    let pixelUnprojectionMatrix = this.pixelUnprojectionMatrix;\n\n    if (modelMatrix) {\n      modelViewProjectionMatrix = mat4_multiply([], this.viewProjectionMatrix, modelMatrix);\n      pixelProjectionMatrix = mat4_multiply([], this.pixelProjectionMatrix, modelMatrix);\n      pixelUnprojectionMatrix = mat4_invert([], pixelProjectionMatrix);\n    }\n\n    const matrices = Object.assign({\n      modelViewProjectionMatrix,\n      viewProjectionMatrix: this.viewProjectionMatrix,\n      viewMatrix: this.viewMatrix,\n      projectionMatrix: this.projectionMatrix,\n\n      // project/unproject between pixels and world\n      pixelProjectionMatrix,\n      pixelUnprojectionMatrix,\n\n      width: this.width,\n      height: this.height,\n      scale: this.scale\n    });\n\n    return matrices;\n  }\n\n  containsPixel({x, y, width = 1, height = 1}) {\n    return (\n      x < this.x + this.width &&\n      this.x < x + width &&\n      y < this.y + this.height &&\n      this.y < y + height\n    );\n  }\n\n  // EXPERIMENTAL METHODS\n\n  getCameraPosition() {\n    return this.cameraPosition;\n  }\n\n  getCameraDirection() {\n    return this.cameraDirection;\n  }\n\n  getCameraUp() {\n    return this.cameraUp;\n  }\n\n  // INTERNAL METHODS\n\n  // TODO - these are duplicating WebMercator methods\n  _addMetersToLngLat(lngLatZ, xyz) {\n    const [lng, lat, Z = 0] = lngLatZ;\n    const [deltaLng, deltaLat, deltaZ = 0] = this._metersToLngLatDelta(xyz);\n    return lngLatZ.length === 2\n      ? [lng + deltaLng, lat + deltaLat]\n      : [lng + deltaLng, lat + deltaLat, Z + deltaZ];\n  }\n\n  _metersToLngLatDelta(xyz) {\n    const [x, y, z = 0] = xyz;\n    assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z), ERR_ARGUMENT);\n    const {pixelsPerMeter, degreesPerPixel} = this.distanceScales;\n    const deltaLng = x * pixelsPerMeter[0] * degreesPerPixel[0];\n    const deltaLat = y * pixelsPerMeter[1] * degreesPerPixel[1];\n    return xyz.length === 2 ? [deltaLng, deltaLat] : [deltaLng, deltaLat, z];\n  }\n\n  _createProjectionMatrix({orthographic, fovyRadians, aspect, focalDistance, near, far}) {\n    assert(Number.isFinite(fovyRadians));\n    return orthographic\n      ? new Matrix4().orthographic({fovy: fovyRadians, aspect, focalDistance, near, far})\n      : new Matrix4().perspective({fovy: fovyRadians, aspect, near, far});\n  }\n\n  /* eslint-disable complexity, max-statements */\n  _initViewMatrix(opts) {\n    const {\n      // view matrix\n      viewMatrix = IDENTITY,\n\n      longitude = null, // Anchor: lng lat zoom makes viewport work w/ geospatial coordinate systems\n      latitude = null,\n      zoom = null,\n\n      position = null, // Anchor position offset (in meters for geospatial viewports)\n      modelMatrix = null, // A model matrix to be applied to position, to match the layer props API\n      focalDistance = 1, // Only needed for orthographic views\n\n      distanceScales = null\n    } = opts;\n\n    // Check if we have a geospatial anchor\n    this.isGeospatial = Number.isFinite(latitude) && Number.isFinite(longitude);\n\n    this.zoom = zoom;\n    if (!Number.isFinite(this.zoom)) {\n      this.zoom = this.isGeospatial\n        ? getMeterZoom({latitude}) + Math.log2(focalDistance)\n        : DEFAULT_ZOOM;\n    }\n    this.scale = Math.pow(2, this.zoom);\n\n    // Calculate distance scales if lng/lat/zoom are provided\n    this.distanceScales = this.isGeospatial\n      ? getDistanceScales({latitude, longitude, scale: this.scale})\n      : distanceScales || DEFAULT_DISTANCE_SCALES;\n\n    this.focalDistance = focalDistance;\n\n    this.distanceScales.metersPerPixel = new Vector3(this.distanceScales.metersPerPixel);\n    this.distanceScales.pixelsPerMeter = new Vector3(this.distanceScales.pixelsPerMeter);\n\n    this.position = ZERO_VECTOR;\n    this.meterOffset = ZERO_VECTOR;\n    if (position) {\n      // Apply model matrix if supplied\n      this.position = position;\n      this.modelMatrix = modelMatrix;\n      this.meterOffset = modelMatrix ? modelMatrix.transformVector(position) : position;\n    }\n\n    this.viewMatrixUncentered = viewMatrix;\n\n    if (this.isGeospatial) {\n      // Determine camera center\n      this.center = this._getCenterInWorld({longitude, latitude});\n\n      // Make a centered version of the matrix for projection modes without an offset\n      this.viewMatrix = new Matrix4()\n        // Apply the uncentered view matrix\n        .multiplyRight(this.viewMatrixUncentered)\n        // The Mercator world coordinate system is upper left,\n        // but GL expects lower left, so we flip it around the center after all transforms are done\n        .scale([1, -1, 1])\n        // And center it\n        .translate(new Vector3(this.center || ZERO_VECTOR).negate());\n    } else {\n      this.center = position;\n      this.viewMatrix = viewMatrix;\n    }\n  }\n  /* eslint-enable complexity, max-statements */\n\n  _getCenterInWorld({longitude, latitude}) {\n    const {meterOffset, scale, distanceScales} = this;\n\n    // Make a centered version of the matrix for projection modes without an offset\n    const center2d = this.projectFlat([longitude, latitude], scale);\n    const center = new Vector3(center2d[0], center2d[1], 0);\n\n    if (meterOffset) {\n      const pixelPosition = new Vector3(meterOffset)\n        // Convert to pixels in current zoom\n        .scale(distanceScales.pixelsPerMeter)\n        // We want positive Y to represent an offset towards north,\n        // but web mercator world coordinates is top-left\n        .scale([1, -1, 1]);\n      center.add(pixelPosition);\n    }\n\n    return center;\n  }\n\n  _initProjectionMatrix(opts) {\n    const {\n      // Projection matrix\n      projectionMatrix = null,\n\n      // Projection matrix parameters, used if projectionMatrix not supplied\n      orthographic = false,\n      fovyRadians,\n      fovyDegrees,\n      fovy,\n      near = 0.1, // Distance of near clipping plane\n      far = 1000, // Distance of far clipping plane\n      focalDistance = 1, // Only needed for orthographic views\n      orthographicFocalDistance\n    } = opts;\n\n    const radians = fovyRadians || (fovyDegrees || fovy || 75) * DEGREES_TO_RADIANS;\n\n    this.projectionMatrix =\n      projectionMatrix ||\n      this._createProjectionMatrix({\n        orthographic,\n        fovyRadians: radians,\n        aspect: this.width / this.height,\n        focalDistance: orthographicFocalDistance || focalDistance,\n        near,\n        far\n      });\n  }\n\n  _initPixelMatrices() {\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4_multiply(vpm, vpm, this.projectionMatrix);\n    mat4_multiply(vpm, vpm, this.viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // console.log('VPM', this.viewMatrix, this.projectionMatrix, this.viewProjectionMatrix);\n\n    // Calculate inverse view matrix\n    this.viewMatrixInverse = mat4_invert([], this.viewMatrix) || this.viewMatrix;\n\n    // Decompose camera directions\n    const {eye, direction, up} = extractCameraVectors({\n      viewMatrix: this.viewMatrix,\n      viewMatrixInverse: this.viewMatrixInverse\n    });\n    this.cameraPosition = eye;\n    this.cameraDirection = direction;\n    this.cameraUp = up;\n\n    // console.log(this.cameraPosition, this.cameraDirection, this.cameraUp);\n\n    /*\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n\n    // matrix for conversion from world location to screen (pixel) coordinates\n    const m = createMat4();\n    mat4_scale(m, m, [this.width / 2, -this.height / 2, 1]);\n    mat4_translate(m, m, [1, -1, 0]);\n    mat4_multiply(m, m, this.viewProjectionMatrix);\n    this.pixelProjectionMatrix = m;\n\n    this.pixelUnprojectionMatrix = mat4_invert(createMat4(), this.pixelProjectionMatrix);\n    if (!this.pixelUnprojectionMatrix) {\n      log.warn('Pixel project matrix not invertible')();\n      // throw new Error('Pixel project matrix not invertible');\n    }\n  }\n}\n\nViewport.displayName = 'Viewport';\n"],"file":"viewport.js"}