{"version":3,"sources":["../../../src/controllers/transition-manager.js"],"names":["LinearInterpolator","Transition","assert","noop","TRANSITION_EVENTS","BREAK","SNAP_TO_END","IGNORE","DEFAULT_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","transitionInterruption","onTransitionStart","onTransitionInterrupt","onTransitionEnd","TransitionManager","ControllerState","props","Object","assign","animation","propsInTransition","transition","onViewStateChange","_onTransitionFrame","bind","_onTransitionUpdate","cancelAnimationFrame","nextProps","transitionTriggered","currentProps","_shouldIgnoreViewportChange","_isTransitionEnabled","startProps","interruption","endProps","_triggerTransition","cancel","inProgress","interpolator","arePropsEqual","_isUpdateDueToCurrentTransition","startViewstate","endViewStateProps","shortestPathFrom","initialProps","initializeProps","start","duration","easing","end","onStart","onUpdate","onInterrupt","_onTransitionEnd","onEnd","requestAnimationFrame","update","Date","now","callback","time","viewport","interpolateProps","getViewportProps","viewState","interactionState","inTransition","defaultProps"],"mappings":"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","sourcesContent":["/* global requestAnimationFrame, cancelAnimationFrame */\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport Transition from '../transitions/transition';\nimport assert from '../utils/assert';\n\nconst noop = () => {};\n\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3\n};\n\nconst DEFAULT_PROPS = {\n  transitionDuration: 0,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop\n};\n\nexport default class TransitionManager {\n  constructor(ControllerState, props = {}) {\n    assert(ControllerState);\n    this.ControllerState = ControllerState;\n    this.props = Object.assign({}, DEFAULT_PROPS, props);\n    this.animation = null;\n    this.propsInTransition = null;\n    this.transition = new Transition();\n\n    this.onViewStateChange = props.onViewStateChange;\n\n    this._onTransitionFrame = this._onTransitionFrame.bind(this);\n    this._onTransitionUpdate = this._onTransitionUpdate.bind(this);\n  }\n\n  finalize() {\n    cancelAnimationFrame(this.animation);\n  }\n\n  // Returns current transitioned viewport.\n  getViewportInTransition() {\n    return this.propsInTransition;\n  }\n\n  // Process the vewiport change, either ignore or trigger a new transition.\n  // Return true if a new transition is triggered, false otherwise.\n  processViewStateChange(nextProps) {\n    let transitionTriggered = false;\n    const currentProps = this.props;\n    // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n    nextProps = Object.assign({}, DEFAULT_PROPS, nextProps);\n    this.props = nextProps;\n\n    // NOTE: Be cautious re-ordering statements in this function.\n    if (this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return transitionTriggered;\n    }\n\n    if (this._isTransitionEnabled(nextProps)) {\n      const startProps = Object.assign(\n        {},\n        currentProps,\n        this.transition.interruption === TRANSITION_EVENTS.SNAP_TO_END\n          ? this.transition.endProps\n          : this.propsInTransition || currentProps\n      );\n\n      this._triggerTransition(startProps, nextProps);\n\n      transitionTriggered = true;\n    } else {\n      this.transition.cancel();\n    }\n\n    return transitionTriggered;\n  }\n\n  // Helper methods\n\n  _isTransitionEnabled(props) {\n    return props.transitionDuration > 0 && props.transitionInterpolator;\n  }\n\n  _isUpdateDueToCurrentTransition(props) {\n    if (this.transition.inProgress) {\n      return this.transition.interpolator.arePropsEqual(props, this.propsInTransition);\n    }\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps, nextProps) {\n    if (this.transition.inProgress) {\n      // Ignore update if it is requested to be ignored\n      return (\n        this.transition.interruption === TRANSITION_EVENTS.IGNORE ||\n        // Ignore update if it is due to current active transition.\n        this._isUpdateDueToCurrentTransition(nextProps)\n      );\n    } else if (this._isTransitionEnabled(nextProps)) {\n      // Ignore if none of the viewport props changed.\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n    return true;\n  }\n\n  _triggerTransition(startProps, endProps) {\n    assert(this._isTransitionEnabled(endProps), 'Transition is not enabled');\n\n    cancelAnimationFrame(this.animation);\n\n    const startViewstate = new this.ControllerState(startProps);\n    const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n\n    const initialProps = endProps.transitionInterpolator.initializeProps(\n      startProps,\n      endViewStateProps\n    );\n\n    this.propsInTransition = {};\n    this.transition.start({\n      duration: endProps.transitionDuration,\n      easing: endProps.transitionEasing,\n      interpolator: endProps.transitionInterpolator,\n      interruption: endProps.transitionInterruption,\n\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n\n      onStart: endProps.onTransitionStart,\n      onUpdate: this._onTransitionUpdate,\n      onInterrupt: this._onTransitionEnd(endProps.onTransitionInterrupt),\n      onEnd: this._onTransitionEnd(endProps.onTransitionEnd)\n    });\n\n    this._onTransitionFrame();\n  }\n\n  _onTransitionFrame() {\n    // _updateViewport() may cancel the animation\n    this.animation = requestAnimationFrame(this._onTransitionFrame);\n    this.transition.update(Date.now());\n  }\n\n  _onTransitionEnd(callback) {\n    return transition => {\n      cancelAnimationFrame(this.animation);\n      this.propsInTransition = null;\n      callback(transition);\n    };\n  }\n\n  _onTransitionUpdate(transition) {\n    // NOTE: Be cautious re-ordering statements in this function.\n    const {interpolator, startProps, endProps, time} = transition;\n\n    const viewport = interpolator.interpolateProps(startProps, endProps, time);\n\n    // This gurantees all props (e.g. bearing, longitude) are normalized\n    // So when viewports are compared they are in same range.\n    this.propsInTransition = new this.ControllerState(\n      Object.assign({}, this.props, viewport)\n    ).getViewportProps();\n\n    if (this.onViewStateChange) {\n      this.onViewStateChange({\n        viewState: this.propsInTransition,\n        interactionState: {inTransition: true}\n      });\n    }\n  }\n}\n\nTransitionManager.defaultProps = DEFAULT_PROPS;\n"],"file":"transition-manager.js"}