{"version":3,"file":"browser.es5.es.js","sources":["../src/index.js"],"sourcesContent":["// @flow\n\nimport {createToken} from 'fusion-core';\nimport type {Context, Token} from 'fusion-core';\n\n// Tokens\nexport type Fetch = (\n  input: string | Request,\n  init?: RequestOptions\n) => Promise<Response>;\nexport const FetchToken: Token<Fetch> = createToken('FetchToken');\n\nexport type Session = {\n  from(\n    ctx: Context\n  ): {\n    get(keyPath: string): any,\n    set(keyPath: string, val: any): void,\n  },\n};\nexport const SessionToken: Token<Session> = createToken('SessionToken');\n\ntype LogCallback = (\n  error?: any,\n  level?: string,\n  message?: string,\n  meta?: any\n) => void;\n\ntype LogEntry = {\n  level: string,\n  message: string,\n  [optionName: string]: any,\n};\n\ntype LogMethod = {\n  (level: string, message: string, callback: LogCallback): Logger,\n  (level: string, message: string, meta: any, callback: LogCallback): Logger,\n  (level: string, message: string, ...meta: any[]): Logger,\n  (entry: LogEntry): Logger,\n};\n\ntype LeveledLogMethod = {\n  (message: string, callback: LogCallback): Logger,\n  (message: string, meta: any, callback: LogCallback): Logger,\n  (message: string, ...meta: any[]): Logger,\n  (infoObject: Object): Logger,\n};\n\nexport type Logger = {\n  log: LogMethod,\n  error: LeveledLogMethod,\n  warn: LeveledLogMethod,\n  info: LeveledLogMethod,\n  verbose: LeveledLogMethod,\n  debug: LeveledLogMethod,\n  silly: LeveledLogMethod,\n};\nexport const LoggerToken: Token<Logger> = createToken('LoggerToken');\n"],"names":["FetchToken","createToken","SessionToken","LoggerToken"],"mappings":";;AAUO,IAAMA,aAA2BC,YAAY,YAAZ,CAAjC;AAUP,AAAO,IAAMC,eAA+BD,YAAY,cAAZ,CAArC;AAsCP,AAAO,IAAME,cAA6BF,YAAY,aAAZ,CAAnC;;;;"}