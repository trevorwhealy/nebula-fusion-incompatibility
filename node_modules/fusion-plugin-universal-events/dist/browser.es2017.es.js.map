{"version":3,"file":"browser.es2017.es.js","sources":["../src/emitter.js","../src/server.js","../src/browser.js","../src/index.js"],"sourcesContent":["/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Context} from 'fusion-core';\n\nimport type {IEmitter} from './types.js';\n\nconst globalEventType = '*';\nexport default class UniversalEmitter implements IEmitter {\n  handlers: any;\n  mappers: any;\n\n  constructor() {\n    this.handlers = {};\n    this.mappers = {};\n  }\n  map(...args: *): * {\n    const {type, callback} = getArgs(args);\n    if (!this.mappers[type]) this.mappers[type] = [];\n    this.mappers[type].push(callback);\n  }\n  on(...args: *): * {\n    const {type, callback} = getArgs(args);\n    if (!this.handlers[type]) this.handlers[type] = [];\n    this.handlers[type].push(callback);\n  }\n  off(...args: *): * {\n    const {type, callback} = getArgs(args);\n    const index = this.handlers[type].indexOf(callback);\n    if (index > -1) this.handlers[type].splice(index, 1);\n  }\n  mapEvent(type: mixed, payload: mixed, ctx?: Context): mixed {\n    const globalMappers = this.mappers[globalEventType] || [];\n    const mappers = (this.mappers[type] || []).concat(globalMappers);\n    return mappers.reduce((payload, mapper) => {\n      return mapper(payload, ctx);\n    }, payload);\n  }\n  handleEvent(type: mixed, payload: mixed, ctx?: Context): void {\n    const globalHandlers = this.handlers[globalEventType] || [];\n    const handlers = (this.handlers[type] || []).concat(globalHandlers);\n    handlers.forEach(handler => handler(payload, ctx));\n  }\n\n  /* eslint-disable-next-line  no-unused-vars */\n  from(ctx: Context) {\n    throw new Error('Not implemented.');\n  }\n  /* eslint-disable-next-line  no-unused-vars */\n  emit(type: mixed, payload: mixed, ctx?: Context) {\n    // throw new Error('Not implemented.');\n  }\n  /* eslint-disable-next-line  no-unused-vars */\n  setFrequency(frequency: number) {\n    throw new Error('Not implemented.');\n  }\n  teardown() {\n    throw new Error('Not implemented.');\n  }\n  flush() {\n    throw new Error('Not implemented.');\n  }\n}\n\nfunction validateHandler(handler) {\n  if (typeof handler !== 'function')\n    throw new TypeError('handler must be a function');\n}\n\nfunction getArgs(args) {\n  const type = typeof args[0] === 'string' ? args[0] : globalEventType;\n  const callback = args[1] || args[0];\n  validateHandler(callback);\n  return {type, callback};\n}\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-env node */\nimport {memoize, createPlugin} from 'fusion-core';\nimport type {FusionPlugin, Context} from 'fusion-core';\n\nimport Emitter from './emitter.js';\nimport type {\n  IEmitter,\n  UniversalEventsPluginDepsType as DepsType,\n} from './types.js';\n\nexport class GlobalEmitter extends Emitter {\n  from: any;\n  ctx: any;\n\n  constructor() {\n    super();\n    this.from = memoize(ctx => {\n      return new ScopedEmitter(ctx, this);\n    });\n  }\n  emit(type: mixed, payload: mixed, ctx?: Context): void {\n    payload = super.mapEvent(type, payload, this.ctx);\n    super.handleEvent(type, payload, ctx);\n  }\n  // mirror browser api\n  setFrequency() {}\n  teardown() {}\n}\n\nclass ScopedEmitter extends Emitter {\n  ctx: any;\n  parent: any;\n  batch: any;\n  flushed: any;\n\n  constructor(ctx, parent) {\n    super();\n    this.ctx = ctx;\n    this.parent = parent;\n    this.batch = [];\n    this.flushed = false;\n  }\n  emit(type, payload) {\n    // this logic exists to manage ensuring we send events after the batch\n    if (this.flushed) {\n      this.handleBatchedEvent({type, payload});\n    } else {\n      this.batch.push({type, payload});\n    }\n  }\n  handleBatchedEvent({type, payload}) {\n    payload = super.mapEvent(type, payload, this.ctx);\n    payload = this.parent.mapEvent(type, payload, this.ctx);\n    super.handleEvent(type, payload, this.ctx);\n    this.parent.handleEvent(type, payload, this.ctx);\n  }\n  flush() {\n    for (let index = 0; index < this.batch.length; index++) {\n      this.handleBatchedEvent(this.batch[index]);\n    }\n    this.batch = [];\n    this.flushed = true;\n  }\n  // mirror browser api\n  setFrequency() {}\n  teardown() {}\n}\n\nconst plugin =\n  __NODE__ &&\n  createPlugin({\n    provides: () => new GlobalEmitter(),\n    middleware: (deps, globalEmitter) => {\n      const bodyParser = require('koa-bodyparser');\n      const parseBody = bodyParser();\n      return async function universalEventsMiddleware(ctx, next) {\n        const emitter = globalEmitter.from(ctx);\n        if (ctx.method === 'POST' && ctx.path === '/_events') {\n          await parseBody(ctx, async () => {});\n          // $FlowFixMe\n          const {items} = ctx.request.body;\n          if (items) {\n            for (let index = 0; index < items.length; index++) {\n              const {type, payload} = items[index];\n              emitter.emit(type, payload);\n            }\n            ctx.status = 200;\n          } else {\n            ctx.status = 400;\n          }\n        }\n        // awaiting next before registering `then` on ctx.timing.end to try and get as much as possible\n        // into the event batch flush.\n        await next();\n        ctx.timing.end.then(() => {\n          emitter.flush();\n        });\n      };\n    },\n  });\n\nexport default ((plugin: any): FusionPlugin<DepsType, IEmitter>);\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-env browser */\nimport {createPlugin} from 'fusion-core';\nimport type {FusionPlugin} from 'fusion-core';\nimport {FetchToken} from 'fusion-tokens';\nimport type {Fetch} from 'fusion-tokens';\n\nimport Emitter from './emitter.js';\nimport type {\n  IEmitter,\n  UniversalEventsPluginDepsType as DepsType,\n} from './types.js';\n\nclass UniversalEmitter extends Emitter {\n  batch: any;\n  flush: any;\n  fetch: any;\n  interval: any;\n\n  constructor(fetch: Fetch): void {\n    super();\n    //privates\n    this.batch = [];\n    this.flush = this.flushInternal.bind(this);\n    this.fetch = fetch;\n    this.setFrequency(5000);\n    window.addEventListener('beforeunload', this.flush);\n  }\n  setFrequency(frequency: number): void {\n    window.clearInterval(this.interval);\n    this.interval = setInterval(this.flush, frequency);\n  }\n  emit(type: mixed, payload: mixed): void {\n    payload = super.mapEvent(type, payload);\n    super.handleEvent(type, payload);\n    this.batch.push({type, payload});\n  }\n  // match server api\n  from(): UniversalEmitter {\n    return this;\n  }\n  flushInternal(): void {\n    if (this.batch.length > 0) {\n      this.fetch('/_events', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({items: this.batch} || []),\n      }).catch(() => {});\n    }\n    this.batch = [];\n  }\n  teardown(): void {\n    window.removeEventListener('beforeunload', this.flush);\n    clearInterval(this.interval);\n    this.interval = null;\n    this.batch = [];\n  }\n}\n\nconst plugin =\n  __BROWSER__ &&\n  createPlugin({\n    deps: {fetch: FetchToken},\n    provides: ({fetch}) => {\n      return new UniversalEmitter(fetch);\n    },\n    cleanup: async emitter => {\n      return emitter.teardown();\n    },\n  });\n\nexport default ((plugin: any): FusionPlugin<DepsType, IEmitter>);\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {createToken} from 'fusion-core';\nimport type {FusionPlugin, Token} from 'fusion-core';\n\nimport ServerEvents from './server.js';\nimport BrowserEvents from './browser.js';\nimport type {\n  IEmitter,\n  UniversalEventsPluginDepsType as DepsType,\n} from './types.js';\n\nconst UniversalEventsPlugin = __BROWSER__ ? BrowserEvents : ServerEvents;\n\n// eslint-disable-next-line prettier/prettier\nexport default ((UniversalEventsPlugin: any): FusionPlugin<DepsType, IEmitter>);\n\nexport const UniversalEventsToken: Token<IEmitter> = createToken(\n  'UniversalEventsToken'\n);\n"],"names":["globalEventType","UniversalEmitter","handlers","mappers","args","getArgs","type","push","callback","index","indexOf","splice","payload","ctx","globalMappers","concat","reduce","mapper","globalHandlers","forEach","handler","Error","frequency","validateHandler","TypeError","Emitter","fetch","batch","flush","flushInternal","bind","setFrequency","addEventListener","clearInterval","interval","setInterval","mapEvent","handleEvent","length","JSON","stringify","catch","removeEventListener","plugin","createPlugin","FetchToken","emitter","teardown","UniversalEventsPlugin","BrowserEvents","UniversalEventsToken","createToken"],"mappings":"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"}