'use strict';

var _functionCache = require('../../lib/function-cache');

var _functionCache2 = _interopRequireDefault(_functionCache);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

it('test FunctionCache simple', function () {
  var f = jest.fn();
  var fc = new _functionCache2.default(f);
  expect(f.mock.calls.length).toBe(0);
  fc.call();
  expect(f.mock.calls.length).toBe(1);
  fc.call();
  fc.call();
  fc.call();
  expect(f.mock.calls.length).toBe(1);
}); // -ignore


it('test FunctionCache changed args', function () {
  var f = jest.fn();
  var fc = new _functionCache2.default(f);
  expect(f.mock.calls.length).toBe(0);
  fc.call(1);
  fc.call(2);
  fc.call(3);
  fc.call(3);
  fc.call(3);
  expect(f.mock.calls.length).toBe(3);
  fc.call(3, 3);
  fc.call(3, 3);
  expect(f.mock.calls.length).toBe(4);
});

it('test FunctionCache edge case', function () {
  var f = jest.fn();
  var fc = new _functionCache2.default(f);
  expect(f.mock.calls.length).toBe(0);
  fc.call([]);
  fc.call([]);
  fc.call([]);
  expect(f.mock.calls.length).toBe(3);
});

it('test FunctionCache invalidate', function () {
  var f = jest.fn();
  var fc = new _functionCache2.default(f);
  expect(f.mock.calls.length).toBe(0);
  fc.call();
  expect(f.mock.calls.length).toBe(1);
  fc.invalidate().call();
  expect(f.mock.calls.length).toBe(2);
  fc.call();
  expect(f.mock.calls.length).toBe(2);
  fc.invalidate().call();
  expect(f.mock.calls.length).toBe(3);
});

it('test FunctionCache updateTrigger', function () {
  var f = jest.fn();
  var fc = new _functionCache2.default(f);
  expect(f.mock.calls.length).toBe(0);
  fc.call();
  expect(f.mock.calls.length).toBe(1);
  fc.updateTrigger(1).call();
  fc.updateTrigger(1).call();
  expect(f.mock.calls.length).toBe(2);
  fc.updateTrigger(2).call();
  expect(f.mock.calls.length).toBe(3);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0L2xpYi9mdW5jdGlvbi1jYWNoZS50ZXN0LmpzIl0sIm5hbWVzIjpbIml0IiwiZiIsImplc3QiLCJmbiIsImZjIiwiZXhwZWN0IiwibW9jayIsImNhbGxzIiwibGVuZ3RoIiwidG9CZSIsImNhbGwiLCJpbnZhbGlkYXRlIiwidXBkYXRlVHJpZ2dlciJdLCJtYXBwaW5ncyI6Ijs7QUFDQTs7Ozs7O0FBRUFBLEdBQUcsMkJBQUgsRUFBZ0MsWUFBTTtBQUNwQyxNQUFNQyxJQUFJQyxLQUFLQyxFQUFMLEVBQVY7QUFDQSxNQUFNQyxLQUFLLDRCQUFrQkgsQ0FBbEIsQ0FBWDtBQUNBSSxTQUFPSixFQUFFSyxJQUFGLENBQU9DLEtBQVAsQ0FBYUMsTUFBcEIsRUFBNEJDLElBQTVCLENBQWlDLENBQWpDO0FBQ0FMLEtBQUdNLElBQUg7QUFDQUwsU0FBT0osRUFBRUssSUFBRixDQUFPQyxLQUFQLENBQWFDLE1BQXBCLEVBQTRCQyxJQUE1QixDQUFpQyxDQUFqQztBQUNBTCxLQUFHTSxJQUFIO0FBQ0FOLEtBQUdNLElBQUg7QUFDQU4sS0FBR00sSUFBSDtBQUNBTCxTQUFPSixFQUFFSyxJQUFGLENBQU9DLEtBQVAsQ0FBYUMsTUFBcEIsRUFBNEJDLElBQTVCLENBQWlDLENBQWpDO0FBQ0QsQ0FWRCxFLENBSEE7OztBQWVBVCxHQUFHLGlDQUFILEVBQXNDLFlBQU07QUFDMUMsTUFBTUMsSUFBSUMsS0FBS0MsRUFBTCxFQUFWO0FBQ0EsTUFBTUMsS0FBSyw0QkFBa0JILENBQWxCLENBQVg7QUFDQUksU0FBT0osRUFBRUssSUFBRixDQUFPQyxLQUFQLENBQWFDLE1BQXBCLEVBQTRCQyxJQUE1QixDQUFpQyxDQUFqQztBQUNBTCxLQUFHTSxJQUFILENBQVEsQ0FBUjtBQUNBTixLQUFHTSxJQUFILENBQVEsQ0FBUjtBQUNBTixLQUFHTSxJQUFILENBQVEsQ0FBUjtBQUNBTixLQUFHTSxJQUFILENBQVEsQ0FBUjtBQUNBTixLQUFHTSxJQUFILENBQVEsQ0FBUjtBQUNBTCxTQUFPSixFQUFFSyxJQUFGLENBQU9DLEtBQVAsQ0FBYUMsTUFBcEIsRUFBNEJDLElBQTVCLENBQWlDLENBQWpDO0FBQ0FMLEtBQUdNLElBQUgsQ0FBUSxDQUFSLEVBQVcsQ0FBWDtBQUNBTixLQUFHTSxJQUFILENBQVEsQ0FBUixFQUFXLENBQVg7QUFDQUwsU0FBT0osRUFBRUssSUFBRixDQUFPQyxLQUFQLENBQWFDLE1BQXBCLEVBQTRCQyxJQUE1QixDQUFpQyxDQUFqQztBQUNELENBYkQ7O0FBZUFULEdBQUcsOEJBQUgsRUFBbUMsWUFBTTtBQUN2QyxNQUFNQyxJQUFJQyxLQUFLQyxFQUFMLEVBQVY7QUFDQSxNQUFNQyxLQUFLLDRCQUFrQkgsQ0FBbEIsQ0FBWDtBQUNBSSxTQUFPSixFQUFFSyxJQUFGLENBQU9DLEtBQVAsQ0FBYUMsTUFBcEIsRUFBNEJDLElBQTVCLENBQWlDLENBQWpDO0FBQ0FMLEtBQUdNLElBQUgsQ0FBUSxFQUFSO0FBQ0FOLEtBQUdNLElBQUgsQ0FBUSxFQUFSO0FBQ0FOLEtBQUdNLElBQUgsQ0FBUSxFQUFSO0FBQ0FMLFNBQU9KLEVBQUVLLElBQUYsQ0FBT0MsS0FBUCxDQUFhQyxNQUFwQixFQUE0QkMsSUFBNUIsQ0FBaUMsQ0FBakM7QUFDRCxDQVJEOztBQVVBVCxHQUFHLCtCQUFILEVBQW9DLFlBQU07QUFDeEMsTUFBTUMsSUFBSUMsS0FBS0MsRUFBTCxFQUFWO0FBQ0EsTUFBTUMsS0FBSyw0QkFBa0JILENBQWxCLENBQVg7QUFDQUksU0FBT0osRUFBRUssSUFBRixDQUFPQyxLQUFQLENBQWFDLE1BQXBCLEVBQTRCQyxJQUE1QixDQUFpQyxDQUFqQztBQUNBTCxLQUFHTSxJQUFIO0FBQ0FMLFNBQU9KLEVBQUVLLElBQUYsQ0FBT0MsS0FBUCxDQUFhQyxNQUFwQixFQUE0QkMsSUFBNUIsQ0FBaUMsQ0FBakM7QUFDQUwsS0FBR08sVUFBSCxHQUFnQkQsSUFBaEI7QUFDQUwsU0FBT0osRUFBRUssSUFBRixDQUFPQyxLQUFQLENBQWFDLE1BQXBCLEVBQTRCQyxJQUE1QixDQUFpQyxDQUFqQztBQUNBTCxLQUFHTSxJQUFIO0FBQ0FMLFNBQU9KLEVBQUVLLElBQUYsQ0FBT0MsS0FBUCxDQUFhQyxNQUFwQixFQUE0QkMsSUFBNUIsQ0FBaUMsQ0FBakM7QUFDQUwsS0FBR08sVUFBSCxHQUFnQkQsSUFBaEI7QUFDQUwsU0FBT0osRUFBRUssSUFBRixDQUFPQyxLQUFQLENBQWFDLE1BQXBCLEVBQTRCQyxJQUE1QixDQUFpQyxDQUFqQztBQUNELENBWkQ7O0FBY0FULEdBQUcsa0NBQUgsRUFBdUMsWUFBTTtBQUMzQyxNQUFNQyxJQUFJQyxLQUFLQyxFQUFMLEVBQVY7QUFDQSxNQUFNQyxLQUFLLDRCQUFrQkgsQ0FBbEIsQ0FBWDtBQUNBSSxTQUFPSixFQUFFSyxJQUFGLENBQU9DLEtBQVAsQ0FBYUMsTUFBcEIsRUFBNEJDLElBQTVCLENBQWlDLENBQWpDO0FBQ0FMLEtBQUdNLElBQUg7QUFDQUwsU0FBT0osRUFBRUssSUFBRixDQUFPQyxLQUFQLENBQWFDLE1BQXBCLEVBQTRCQyxJQUE1QixDQUFpQyxDQUFqQztBQUNBTCxLQUFHUSxhQUFILENBQWlCLENBQWpCLEVBQW9CRixJQUFwQjtBQUNBTixLQUFHUSxhQUFILENBQWlCLENBQWpCLEVBQW9CRixJQUFwQjtBQUNBTCxTQUFPSixFQUFFSyxJQUFGLENBQU9DLEtBQVAsQ0FBYUMsTUFBcEIsRUFBNEJDLElBQTVCLENBQWlDLENBQWpDO0FBQ0FMLEtBQUdRLGFBQUgsQ0FBaUIsQ0FBakIsRUFBb0JGLElBQXBCO0FBQ0FMLFNBQU9KLEVBQUVLLElBQUYsQ0FBT0MsS0FBUCxDQUFhQyxNQUFwQixFQUE0QkMsSUFBNUIsQ0FBaUMsQ0FBakM7QUFDRCxDQVhEIiwiZmlsZSI6ImZ1bmN0aW9uLWNhY2hlLnRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvdy1pZ25vcmVcbmltcG9ydCBGdW5jdGlvbkNhY2hlIGZyb20gJy4uLy4uL2xpYi9mdW5jdGlvbi1jYWNoZSc7XG5cbml0KCd0ZXN0IEZ1bmN0aW9uQ2FjaGUgc2ltcGxlJywgKCkgPT4ge1xuICBjb25zdCBmID0gamVzdC5mbigpO1xuICBjb25zdCBmYyA9IG5ldyBGdW5jdGlvbkNhY2hlKGYpO1xuICBleHBlY3QoZi5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgwKTtcbiAgZmMuY2FsbCgpO1xuICBleHBlY3QoZi5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgxKTtcbiAgZmMuY2FsbCgpO1xuICBmYy5jYWxsKCk7XG4gIGZjLmNhbGwoKTtcbiAgZXhwZWN0KGYubW9jay5jYWxscy5sZW5ndGgpLnRvQmUoMSk7XG59KTtcblxuaXQoJ3Rlc3QgRnVuY3Rpb25DYWNoZSBjaGFuZ2VkIGFyZ3MnLCAoKSA9PiB7XG4gIGNvbnN0IGYgPSBqZXN0LmZuKCk7XG4gIGNvbnN0IGZjID0gbmV3IEZ1bmN0aW9uQ2FjaGUoZik7XG4gIGV4cGVjdChmLm1vY2suY2FsbHMubGVuZ3RoKS50b0JlKDApO1xuICBmYy5jYWxsKDEpO1xuICBmYy5jYWxsKDIpO1xuICBmYy5jYWxsKDMpO1xuICBmYy5jYWxsKDMpO1xuICBmYy5jYWxsKDMpO1xuICBleHBlY3QoZi5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgzKTtcbiAgZmMuY2FsbCgzLCAzKTtcbiAgZmMuY2FsbCgzLCAzKTtcbiAgZXhwZWN0KGYubW9jay5jYWxscy5sZW5ndGgpLnRvQmUoNCk7XG59KTtcblxuaXQoJ3Rlc3QgRnVuY3Rpb25DYWNoZSBlZGdlIGNhc2UnLCAoKSA9PiB7XG4gIGNvbnN0IGYgPSBqZXN0LmZuKCk7XG4gIGNvbnN0IGZjID0gbmV3IEZ1bmN0aW9uQ2FjaGUoZik7XG4gIGV4cGVjdChmLm1vY2suY2FsbHMubGVuZ3RoKS50b0JlKDApO1xuICBmYy5jYWxsKFtdKTtcbiAgZmMuY2FsbChbXSk7XG4gIGZjLmNhbGwoW10pO1xuICBleHBlY3QoZi5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgzKTtcbn0pO1xuXG5pdCgndGVzdCBGdW5jdGlvbkNhY2hlIGludmFsaWRhdGUnLCAoKSA9PiB7XG4gIGNvbnN0IGYgPSBqZXN0LmZuKCk7XG4gIGNvbnN0IGZjID0gbmV3IEZ1bmN0aW9uQ2FjaGUoZik7XG4gIGV4cGVjdChmLm1vY2suY2FsbHMubGVuZ3RoKS50b0JlKDApO1xuICBmYy5jYWxsKCk7XG4gIGV4cGVjdChmLm1vY2suY2FsbHMubGVuZ3RoKS50b0JlKDEpO1xuICBmYy5pbnZhbGlkYXRlKCkuY2FsbCgpO1xuICBleHBlY3QoZi5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgyKTtcbiAgZmMuY2FsbCgpO1xuICBleHBlY3QoZi5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgyKTtcbiAgZmMuaW52YWxpZGF0ZSgpLmNhbGwoKTtcbiAgZXhwZWN0KGYubW9jay5jYWxscy5sZW5ndGgpLnRvQmUoMyk7XG59KTtcblxuaXQoJ3Rlc3QgRnVuY3Rpb25DYWNoZSB1cGRhdGVUcmlnZ2VyJywgKCkgPT4ge1xuICBjb25zdCBmID0gamVzdC5mbigpO1xuICBjb25zdCBmYyA9IG5ldyBGdW5jdGlvbkNhY2hlKGYpO1xuICBleHBlY3QoZi5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgwKTtcbiAgZmMuY2FsbCgpO1xuICBleHBlY3QoZi5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgxKTtcbiAgZmMudXBkYXRlVHJpZ2dlcigxKS5jYWxsKCk7XG4gIGZjLnVwZGF0ZVRyaWdnZXIoMSkuY2FsbCgpO1xuICBleHBlY3QoZi5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgyKTtcbiAgZmMudXBkYXRlVHJpZ2dlcigyKS5jYWxsKCk7XG4gIGV4cGVjdChmLm1vY2suY2FsbHMubGVuZ3RoKS50b0JlKDMpO1xufSk7XG4iXX0=