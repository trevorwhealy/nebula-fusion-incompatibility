'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateCurveFromControlPoints = generateCurveFromControlPoints;

var _cubicHermiteSpline = require('cubic-hermite-spline');

var _cubicHermiteSpline2 = _interopRequireDefault(_cubicHermiteSpline);

var _distance = require('@turf/distance');

var _distance2 = _interopRequireDefault(_distance);

var _helpers = require('@turf/helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var INTERPOLATION_INTERVAL = 0.005;

var INTERPOLATION_THRESHOLD = 0.001;

function calculateSingleTangent(p0, p1, d) {
  var x = (p1[0] - p0[0]) / d;
  var y = (p1[1] - p0[1]) / d;
  return [x, y];
}

function generateCurveFromControlPoints(line) {
  // calculate knots
  var knots = [0];
  var prev = null;
  var totalDistance = 0;

  var coords = line.geometry.coordinates;


  for (var i = 0; i < coords.length; i++) {
    var cur = coords[i];
    if (prev !== null) {
      totalDistance += (0, _distance2.default)(prev, cur);
      knots.push(totalDistance);
    }
    prev = cur;
  }

  // calculate tangents
  var tangents = [];

  // first tangent
  tangents.push(calculateSingleTangent(coords[0], coords[1], knots[1] - knots[0]));

  // second to before last
  for (var _i = 1; _i < coords.length - 1; _i++) {
    var A = calculateSingleTangent(coords[_i], coords[_i + 1], knots[_i + 1] - knots[_i]);
    var B = calculateSingleTangent(coords[_i - 1], coords[_i], knots[_i] - knots[_i - 1]);
    var x = (A[0] + B[0]) / 2.0;
    var y = (A[1] + B[1]) / 2.0;
    tangents.push([x, y]);
  }

  // last tangent
  var last = coords.length - 1;
  tangents.push(calculateSingleTangent(coords[last - 1], coords[last], knots[last] - knots[last - 1]));

  // generate curve
  var result = [];
  for (var _i2 = 0; _i2 < coords.length; _i2++) {
    // add control point
    result.push(coords[_i2]);

    // add interpolated values
    for (var t = knots[_i2] + INTERPOLATION_INTERVAL; t < knots[_i2 + 1]; t += INTERPOLATION_INTERVAL) {
      if (knots[_i2 + 1] - t > INTERPOLATION_THRESHOLD) {
        // Only add if not too close to a control point (knot = control point)
        result.push((0, _cubicHermiteSpline2.default)(t, coords, tangents, knots));
      }
    }
  }

  return (0, _helpers.lineString)(result);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvY3VydmUtdXRpbHMuanMiXSwibmFtZXMiOlsiZ2VuZXJhdGVDdXJ2ZUZyb21Db250cm9sUG9pbnRzIiwiSU5URVJQT0xBVElPTl9JTlRFUlZBTCIsIklOVEVSUE9MQVRJT05fVEhSRVNIT0xEIiwiY2FsY3VsYXRlU2luZ2xlVGFuZ2VudCIsInAwIiwicDEiLCJkIiwieCIsInkiLCJsaW5lIiwia25vdHMiLCJwcmV2IiwidG90YWxEaXN0YW5jZSIsImNvb3JkcyIsImdlb21ldHJ5IiwiY29vcmRpbmF0ZXMiLCJpIiwibGVuZ3RoIiwiY3VyIiwicHVzaCIsInRhbmdlbnRzIiwiQSIsIkIiLCJsYXN0IiwicmVzdWx0IiwidCJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFnQmdCQSw4QixHQUFBQSw4Qjs7QUFmaEI7Ozs7QUFDQTs7OztBQUNBOzs7O0FBSUEsSUFBTUMseUJBQXlCLEtBQS9COztBQUNBLElBQU1DLDBCQUEwQixLQUFoQzs7QUFFQSxTQUFTQyxzQkFBVCxDQUFnQ0MsRUFBaEMsRUFBc0RDLEVBQXRELEVBQTRFQyxDQUE1RSxFQUFpRztBQUMvRixNQUFNQyxJQUFJLENBQUNGLEdBQUcsQ0FBSCxJQUFRRCxHQUFHLENBQUgsQ0FBVCxJQUFrQkUsQ0FBNUI7QUFDQSxNQUFNRSxJQUFJLENBQUNILEdBQUcsQ0FBSCxJQUFRRCxHQUFHLENBQUgsQ0FBVCxJQUFrQkUsQ0FBNUI7QUFDQSxTQUFPLENBQUNDLENBQUQsRUFBSUMsQ0FBSixDQUFQO0FBQ0Q7O0FBRU0sU0FBU1IsOEJBQVQsQ0FBd0NTLElBQXhDLEVBQWdGO0FBQ3JGO0FBQ0EsTUFBTUMsUUFBUSxDQUFDLENBQUQsQ0FBZDtBQUNBLE1BQUlDLE9BQU8sSUFBWDtBQUNBLE1BQUlDLGdCQUFnQixDQUFwQjs7QUFKcUYsTUFNaEVDLE1BTmdFLEdBTXJESixLQUFLSyxRQU5nRCxDQU03RUMsV0FONkU7OztBQVFyRixPQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSUgsT0FBT0ksTUFBM0IsRUFBbUNELEdBQW5DLEVBQXdDO0FBQ3RDLFFBQU1FLE1BQU1MLE9BQU9HLENBQVAsQ0FBWjtBQUNBLFFBQUlMLFNBQVMsSUFBYixFQUFtQjtBQUNqQkMsdUJBQWlCLHdCQUFhRCxJQUFiLEVBQW1CTyxHQUFuQixDQUFqQjtBQUNBUixZQUFNUyxJQUFOLENBQVdQLGFBQVg7QUFDRDtBQUNERCxXQUFPTyxHQUFQO0FBQ0Q7O0FBRUQ7QUFDQSxNQUFNRSxXQUFXLEVBQWpCOztBQUVBO0FBQ0FBLFdBQVNELElBQVQsQ0FBY2hCLHVCQUF1QlUsT0FBTyxDQUFQLENBQXZCLEVBQWtDQSxPQUFPLENBQVAsQ0FBbEMsRUFBNkNILE1BQU0sQ0FBTixJQUFXQSxNQUFNLENBQU4sQ0FBeEQsQ0FBZDs7QUFFQTtBQUNBLE9BQUssSUFBSU0sS0FBSSxDQUFiLEVBQWdCQSxLQUFJSCxPQUFPSSxNQUFQLEdBQWdCLENBQXBDLEVBQXVDRCxJQUF2QyxFQUE0QztBQUMxQyxRQUFNSyxJQUFJbEIsdUJBQXVCVSxPQUFPRyxFQUFQLENBQXZCLEVBQWtDSCxPQUFPRyxLQUFJLENBQVgsQ0FBbEMsRUFBaUROLE1BQU1NLEtBQUksQ0FBVixJQUFlTixNQUFNTSxFQUFOLENBQWhFLENBQVY7QUFDQSxRQUFNTSxJQUFJbkIsdUJBQXVCVSxPQUFPRyxLQUFJLENBQVgsQ0FBdkIsRUFBc0NILE9BQU9HLEVBQVAsQ0FBdEMsRUFBaUROLE1BQU1NLEVBQU4sSUFBV04sTUFBTU0sS0FBSSxDQUFWLENBQTVELENBQVY7QUFDQSxRQUFNVCxJQUFJLENBQUNjLEVBQUUsQ0FBRixJQUFPQyxFQUFFLENBQUYsQ0FBUixJQUFnQixHQUExQjtBQUNBLFFBQU1kLElBQUksQ0FBQ2EsRUFBRSxDQUFGLElBQU9DLEVBQUUsQ0FBRixDQUFSLElBQWdCLEdBQTFCO0FBQ0FGLGFBQVNELElBQVQsQ0FBYyxDQUFDWixDQUFELEVBQUlDLENBQUosQ0FBZDtBQUNEOztBQUVEO0FBQ0EsTUFBTWUsT0FBT1YsT0FBT0ksTUFBUCxHQUFnQixDQUE3QjtBQUNBRyxXQUFTRCxJQUFULENBQ0VoQix1QkFBdUJVLE9BQU9VLE9BQU8sQ0FBZCxDQUF2QixFQUF5Q1YsT0FBT1UsSUFBUCxDQUF6QyxFQUF1RGIsTUFBTWEsSUFBTixJQUFjYixNQUFNYSxPQUFPLENBQWIsQ0FBckUsQ0FERjs7QUFJQTtBQUNBLE1BQU1DLFNBQVMsRUFBZjtBQUNBLE9BQUssSUFBSVIsTUFBSSxDQUFiLEVBQWdCQSxNQUFJSCxPQUFPSSxNQUEzQixFQUFtQ0QsS0FBbkMsRUFBd0M7QUFDdEM7QUFDQVEsV0FBT0wsSUFBUCxDQUFZTixPQUFPRyxHQUFQLENBQVo7O0FBRUE7QUFDQSxTQUFLLElBQUlTLElBQUlmLE1BQU1NLEdBQU4sSUFBV2Ysc0JBQXhCLEVBQWdEd0IsSUFBSWYsTUFBTU0sTUFBSSxDQUFWLENBQXBELEVBQWtFUyxLQUFLeEIsc0JBQXZFLEVBQStGO0FBQzdGLFVBQUlTLE1BQU1NLE1BQUksQ0FBVixJQUFlUyxDQUFmLEdBQW1CdkIsdUJBQXZCLEVBQWdEO0FBQzlDO0FBQ0FzQixlQUFPTCxJQUFQLENBQVksa0NBQVFNLENBQVIsRUFBV1osTUFBWCxFQUFtQk8sUUFBbkIsRUFBNkJWLEtBQTdCLENBQVo7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsU0FBTyx5QkFBV2MsTUFBWCxDQUFQO0FBQ0QiLCJmaWxlIjoiY3VydmUtdXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuaW1wb3J0IGhlcm1pdGUgZnJvbSAnY3ViaWMtaGVybWl0ZS1zcGxpbmUnO1xuaW1wb3J0IHR1cmZEaXN0YW5jZSBmcm9tICdAdHVyZi9kaXN0YW5jZSc7XG5pbXBvcnQgeyBsaW5lU3RyaW5nIH0gZnJvbSAnQHR1cmYvaGVscGVycyc7XG5cbmltcG9ydCB0eXBlIHsgRmVhdHVyZSB9IGZyb20gJ2dlb2pzb24tdHlwZXMnO1xuXG5jb25zdCBJTlRFUlBPTEFUSU9OX0lOVEVSVkFMID0gMC4wMDU7XG5jb25zdCBJTlRFUlBPTEFUSU9OX1RIUkVTSE9MRCA9IDAuMDAxO1xuXG5mdW5jdGlvbiBjYWxjdWxhdGVTaW5nbGVUYW5nZW50KHAwOiBbbnVtYmVyLCBudW1iZXJdLCBwMTogW251bWJlciwgbnVtYmVyXSwgZDogbnVtYmVyKTogbnVtYmVyW10ge1xuICBjb25zdCB4ID0gKHAxWzBdIC0gcDBbMF0pIC8gZDtcbiAgY29uc3QgeSA9IChwMVsxXSAtIHAwWzFdKSAvIGQ7XG4gIHJldHVybiBbeCwgeV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUN1cnZlRnJvbUNvbnRyb2xQb2ludHMobGluZTogRmVhdHVyZTxPYmplY3Q+KTogRmVhdHVyZTxPYmplY3Q+IHtcbiAgLy8gY2FsY3VsYXRlIGtub3RzXG4gIGNvbnN0IGtub3RzID0gWzBdO1xuICBsZXQgcHJldiA9IG51bGw7XG4gIGxldCB0b3RhbERpc3RhbmNlID0gMDtcblxuICBjb25zdCB7IGNvb3JkaW5hdGVzOiBjb29yZHMgfSA9IGxpbmUuZ2VvbWV0cnk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb29yZHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjdXIgPSBjb29yZHNbaV07XG4gICAgaWYgKHByZXYgIT09IG51bGwpIHtcbiAgICAgIHRvdGFsRGlzdGFuY2UgKz0gdHVyZkRpc3RhbmNlKHByZXYsIGN1cik7XG4gICAgICBrbm90cy5wdXNoKHRvdGFsRGlzdGFuY2UpO1xuICAgIH1cbiAgICBwcmV2ID0gY3VyO1xuICB9XG5cbiAgLy8gY2FsY3VsYXRlIHRhbmdlbnRzXG4gIGNvbnN0IHRhbmdlbnRzID0gW107XG5cbiAgLy8gZmlyc3QgdGFuZ2VudFxuICB0YW5nZW50cy5wdXNoKGNhbGN1bGF0ZVNpbmdsZVRhbmdlbnQoY29vcmRzWzBdLCBjb29yZHNbMV0sIGtub3RzWzFdIC0ga25vdHNbMF0pKTtcblxuICAvLyBzZWNvbmQgdG8gYmVmb3JlIGxhc3RcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBjb29yZHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgY29uc3QgQSA9IGNhbGN1bGF0ZVNpbmdsZVRhbmdlbnQoY29vcmRzW2ldLCBjb29yZHNbaSArIDFdLCBrbm90c1tpICsgMV0gLSBrbm90c1tpXSk7XG4gICAgY29uc3QgQiA9IGNhbGN1bGF0ZVNpbmdsZVRhbmdlbnQoY29vcmRzW2kgLSAxXSwgY29vcmRzW2ldLCBrbm90c1tpXSAtIGtub3RzW2kgLSAxXSk7XG4gICAgY29uc3QgeCA9IChBWzBdICsgQlswXSkgLyAyLjA7XG4gICAgY29uc3QgeSA9IChBWzFdICsgQlsxXSkgLyAyLjA7XG4gICAgdGFuZ2VudHMucHVzaChbeCwgeV0pO1xuICB9XG5cbiAgLy8gbGFzdCB0YW5nZW50XG4gIGNvbnN0IGxhc3QgPSBjb29yZHMubGVuZ3RoIC0gMTtcbiAgdGFuZ2VudHMucHVzaChcbiAgICBjYWxjdWxhdGVTaW5nbGVUYW5nZW50KGNvb3Jkc1tsYXN0IC0gMV0sIGNvb3Jkc1tsYXN0XSwga25vdHNbbGFzdF0gLSBrbm90c1tsYXN0IC0gMV0pXG4gICk7XG5cbiAgLy8gZ2VuZXJhdGUgY3VydmVcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY29vcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gYWRkIGNvbnRyb2wgcG9pbnRcbiAgICByZXN1bHQucHVzaChjb29yZHNbaV0pO1xuXG4gICAgLy8gYWRkIGludGVycG9sYXRlZCB2YWx1ZXNcbiAgICBmb3IgKGxldCB0ID0ga25vdHNbaV0gKyBJTlRFUlBPTEFUSU9OX0lOVEVSVkFMOyB0IDwga25vdHNbaSArIDFdOyB0ICs9IElOVEVSUE9MQVRJT05fSU5URVJWQUwpIHtcbiAgICAgIGlmIChrbm90c1tpICsgMV0gLSB0ID4gSU5URVJQT0xBVElPTl9USFJFU0hPTEQpIHtcbiAgICAgICAgLy8gT25seSBhZGQgaWYgbm90IHRvbyBjbG9zZSB0byBhIGNvbnRyb2wgcG9pbnQgKGtub3QgPSBjb250cm9sIHBvaW50KVxuICAgICAgICByZXN1bHQucHVzaChoZXJtaXRlKHQsIGNvb3JkcywgdGFuZ2VudHMsIGtub3RzKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxpbmVTdHJpbmcocmVzdWx0KTtcbn1cbiJdfQ==