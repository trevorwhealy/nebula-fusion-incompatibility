'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _deck = require('deck.gl');

var _bboxPolygon = require('@turf/bbox-polygon');

var _bboxPolygon2 = _interopRequireDefault(_bboxPolygon);

var _circle = require('@turf/circle');

var _circle2 = _interopRequireDefault(_circle);

var _distance = require('@turf/distance');

var _distance2 = _interopRequireDefault(_distance);

var _editableFeatureCollection = require('../editable-feature-collection');

var _editableLayer = require('./editable-layer');

var _editableLayer2 = _interopRequireDefault(_editableLayer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
/* eslint-env browser */

var DEFAULT_LINE_COLOR = [0x0, 0x0, 0x0, 0xff];
var DEFAULT_FILL_COLOR = [0x0, 0x0, 0x0, 0x90];
var DEFAULT_SELECTED_LINE_COLOR = [0x90, 0x90, 0x90, 0xff];
var DEFAULT_SELECTED_FILL_COLOR = [0x90, 0x90, 0x90, 0x90];
var DEFAULT_EDITING_EXISTING_POINT_COLOR = [0xc0, 0x0, 0x0, 0xff];
var DEFAULT_EDITING_INTERMEDIATE_POINT_COLOR = [0x0, 0x0, 0x0, 0x80];

var defaultProps = {
  mode: 'modify',

  // Edit and interaction events
  onEdit: function onEdit() {},

  pickable: true,
  fp64: false,
  filled: true,
  stroked: true,
  lineWidthScale: 1,
  lineWidthMinPixels: 1,
  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,
  lineJointRounded: false,
  lineMiterLimit: 4,
  pointRadiusScale: 1,
  pointRadiusMinPixels: 2,
  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER,
  lineDashJustified: false,
  getLineColor: function getLineColor(feature, isSelected, mode) {
    return isSelected ? DEFAULT_SELECTED_LINE_COLOR : DEFAULT_LINE_COLOR;
  },
  getFillColor: function getFillColor(feature, isSelected, mode) {
    return isSelected ? DEFAULT_SELECTED_FILL_COLOR : DEFAULT_FILL_COLOR;
  },
  getRadius: function getRadius(f) {
    return f && f.properties && f.properties.radius || f && f.properties && f.properties.size || 1;
  },
  getLineWidth: function getLineWidth(f) {
    return f && f.properties && f.properties.lineWidth || 1;
  },
  getLineDashArray: function getLineDashArray(feature, isSelected, mode) {
    return isSelected && mode !== 'view' ? [7, 4] : [0, 0];
  },

  // drawing line
  getDrawLineDashArray: function getDrawLineDashArray(f, mode) {
    return [7, 4];
  },
  getDrawLineColor: function getDrawLineColor(f, mode) {
    return DEFAULT_SELECTED_LINE_COLOR;
  },
  getDrawFillColor: function getDrawFillColor(f, mode) {
    return DEFAULT_SELECTED_FILL_COLOR;
  },
  getDrawLineWidth: function getDrawLineWidth(f, mode) {
    return f && f.properties && f.properties.lineWidth || 1;
  },

  editHandleType: 'point',

  // point handles
  editHandlePointRadiusScale: 1,
  editHandlePointOutline: false,
  editHandlePointStrokeWidth: 1,
  editHandlePointRadiusMinPixels: 4,
  editHandlePointRadiusMaxPixels: Number.MAX_SAFE_INTEGER,
  getEditHandlePointColor: function getEditHandlePointColor(handle) {
    return handle.type === 'existing' ? DEFAULT_EDITING_EXISTING_POINT_COLOR : DEFAULT_EDITING_INTERMEDIATE_POINT_COLOR;
  },
  getEditHandlePointRadius: function getEditHandlePointRadius(handle) {
    return handle.type === 'existing' ? 5 : 3;
  },

  // icon handles
  editHandleIconAtlas: null,
  editHandleIconMapping: null,
  editHandleIconSizeScale: 1,
  getEditHandleIcon: function getEditHandleIcon(handle) {
    return handle.type;
  },
  getEditHandleIconSize: 10,
  getEditHandleIconColor: function getEditHandleIconColor(handle) {
    return handle.type === 'existing' ? DEFAULT_EDITING_EXISTING_POINT_COLOR : DEFAULT_EDITING_INTERMEDIATE_POINT_COLOR;
  },
  getEditHandleIconAngle: 0
};

var EditableGeoJsonLayer = function (_EditableLayer) {
  _inherits(EditableGeoJsonLayer, _EditableLayer);

  function EditableGeoJsonLayer() {
    _classCallCheck(this, EditableGeoJsonLayer);

    return _possibleConstructorReturn(this, (EditableGeoJsonLayer.__proto__ || Object.getPrototypeOf(EditableGeoJsonLayer)).apply(this, arguments));
  }

  _createClass(EditableGeoJsonLayer, [{
    key: 'renderLayers',
    value: function renderLayers() {
      var subLayerProps = this.getSubLayerProps({
        id: 'geojson',

        // Proxy most GeoJsonLayer props as-is
        data: this.props.data,
        fp64: this.props.fp64,
        filled: this.props.filled,
        stroked: this.props.stroked,
        lineWidthScale: this.props.lineWidthScale,
        lineWidthMinPixels: this.props.lineWidthMinPixels,
        lineWidthMaxPixels: this.props.lineWidthMaxPixels,
        lineJointRounded: this.props.lineJointRounded,
        lineMiterLimit: this.props.lineMiterLimit,
        pointRadiusScale: this.props.pointRadiusScale,
        pointRadiusMinPixels: this.props.pointRadiusMinPixels,
        pointRadiusMaxPixels: this.props.pointRadiusMaxPixels,
        lineDashJustified: this.props.lineDashJustified,
        getLineColor: this.selectionAwareAccessor(this.props.getLineColor),
        getFillColor: this.selectionAwareAccessor(this.props.getFillColor),
        getRadius: this.selectionAwareAccessor(this.props.getRadius),
        getLineWidth: this.selectionAwareAccessor(this.props.getLineWidth),
        getLineDashArray: this.selectionAwareAccessor(this.props.getLineDashArray),

        updateTriggers: {
          getLineColor: [this.props.selectedFeatureIndexes, this.props.mode],
          getFillColor: [this.props.selectedFeatureIndexes, this.props.mode],
          getRadius: [this.props.selectedFeatureIndexes, this.props.mode],
          getLineWidth: [this.props.selectedFeatureIndexes, this.props.mode],
          getLineDashArray: [this.props.selectedFeatureIndexes, this.props.mode]
        }
      });

      var layers = [new _deck.GeoJsonLayer(subLayerProps)];

      layers = layers.concat(this.createPointLayers());
      layers = layers.concat(this.createDrawLayers());

      return layers;
    }
  }, {
    key: 'initializeState',
    value: function initializeState() {
      _get(EditableGeoJsonLayer.prototype.__proto__ || Object.getPrototypeOf(EditableGeoJsonLayer.prototype), 'initializeState', this).call(this);

      this.setState({
        editableFeatureCollection: null,
        selectedFeatures: [],
        editHandles: [],
        drawFeature: null
      });
    }

    // TODO: figure out how to properly update state from an outside event handler

  }, {
    key: 'shouldUpdateState',
    value: function shouldUpdateState(_ref) {
      var props = _ref.props,
          oldProps = _ref.oldProps,
          context = _ref.context,
          oldContext = _ref.oldContext,
          changeFlags = _ref.changeFlags;

      return true;
    }
  }, {
    key: 'updateState',
    value: function updateState(_ref2) {
      var props = _ref2.props,
          oldProps = _ref2.oldProps,
          changeFlags = _ref2.changeFlags;

      _get(EditableGeoJsonLayer.prototype.__proto__ || Object.getPrototypeOf(EditableGeoJsonLayer.prototype), 'updateState', this).call(this, { props: props, changeFlags: changeFlags });

      var editableFeatureCollection = this.state.editableFeatureCollection;
      if (changeFlags.dataChanged) {
        editableFeatureCollection = new _editableFeatureCollection.EditableFeatureCollection(props.data);
      }

      var selectedFeatures = [];
      if (Array.isArray(props.selectedFeatureIndexes)) {
        // TODO: needs improved testing, i.e. checking for duplicates, NaNs, out of range numbers, ...
        selectedFeatures = props.selectedFeatureIndexes.map(function (elem) {
          return props.data.features[elem];
        });
      }

      var editHandles = [];
      if (selectedFeatures.length && props.mode !== 'view') {
        props.selectedFeatureIndexes.forEach(function (index) {
          editHandles = editHandles.concat(editableFeatureCollection.getEditHandles(index));
        });
      }

      var drawFeature = this.state.drawFeature;
      if (props !== oldProps) {
        // If the props are different, recalculate the draw feature
        var selectedFeature = selectedFeatures.length === 1 ? selectedFeatures[0] : null;
        drawFeature = this.getDrawFeature(selectedFeature, props.mode, null);
      }

      this.setState({
        editableFeatureCollection: editableFeatureCollection,
        selectedFeatures: selectedFeatures,
        editHandles: editHandles,
        drawFeature: drawFeature
      });
    }
  }, {
    key: 'selectionAwareAccessor',
    value: function selectionAwareAccessor(accessor) {
      var _this2 = this;

      if (typeof accessor !== 'function') {
        return accessor;
      }
      return function (feature) {
        return accessor(feature, _this2.isFeatureSelected(feature), _this2.props.mode);
      };
    }
  }, {
    key: 'isFeatureSelected',
    value: function isFeatureSelected(feature) {
      if (!this.props.data || !this.props.selectedFeatureIndexes) {
        return false;
      }
      if (!this.props.selectedFeatureIndexes.length) {
        return false;
      }
      var featureIndex = this.props.data.features.indexOf(feature);
      return this.props.selectedFeatureIndexes.includes(featureIndex);
    }
  }, {
    key: 'getPickingInfo',
    value: function getPickingInfo(_ref3) {
      var info = _ref3.info,
          sourceLayer = _ref3.sourceLayer;

      if (sourceLayer.id.endsWith('-edit-handles')) {
        // If user is picking an editing handle, add additional data to the info
        info.isEditingHandle = true;
      }

      return info;
    }
  }, {
    key: 'createPointLayers',
    value: function createPointLayers() {
      if (!this.state.editHandles.length) {
        return [];
      }

      var sharedProps = {
        id: this.props.editHandleType + '-edit-handles',
        data: this.state.editHandles,
        fp64: this.props.fp64
      };

      var layer = this.props.editHandleType === 'icon' ? new _deck.IconLayer(this.getSubLayerProps(_extends({}, sharedProps, {
        iconAtlas: this.props.editHandleIconAtlas,
        iconMapping: this.props.editHandleIconMapping,
        sizeScale: this.props.editHandleIconSizeScale,
        getIcon: this.props.getEditHandleIcon,
        getSize: this.props.getEditHandleIconSize,
        getColor: this.props.getEditHandleIconColor,
        getAngle: this.props.getEditHandleIconAngle,

        getPosition: function getPosition(d) {
          return d.position;
        }
      }))) : this.props.editHandleType === 'point' ? new _deck.ScatterplotLayer(this.getSubLayerProps(_extends({}, sharedProps, {

        // Proxy editing point props
        radiusScale: this.props.editHandlePointRadiusScale,
        outline: this.props.editHandlePointOutline,
        strokeWidth: this.props.editHandlePointStrokeWidth,
        radiusMinPixels: this.props.editHandlePointRadiusMinPixels,
        radiusMaxPixels: this.props.editHandlePointRadiusMaxPixels,
        getRadius: this.props.getEditHandlePointRadius,
        getColor: this.props.getEditHandlePointColor
      }))) : null;

      return [layer];
    }
  }, {
    key: 'createDrawLayers',
    value: function createDrawLayers() {
      var _this3 = this;

      if (!this.state.drawFeature) {
        return [];
      }

      var layer = new _deck.GeoJsonLayer(this.getSubLayerProps({
        id: 'draw',
        data: this.state.drawFeature,
        fp64: this.props.fp64,
        pickable: false,
        stroked: this.props.mode !== 'drawPolygon',
        autoHighlight: false,
        lineWidthScale: this.props.lineWidthScale,
        lineWidthMinPixels: this.props.lineWidthMinPixels,
        lineWidthMaxPixels: this.props.lineWidthMaxPixels,
        lineJointRounded: this.props.lineJointRounded,
        lineMiterLimit: this.props.lineMiterLimit,
        pointRadiusScale: this.props.editHandlePointRadiusScale,
        outline: this.props.editHandlePointOutline,
        strokeWidth: this.props.editHandlePointStrokeWidth,
        pointRadiusMinPixels: this.props.editHandlePointRadiusMinPixels,
        pointRadiusMaxPixels: this.props.editHandlePointRadiusMaxPixels,
        getRadius: this.props.getEditHandlePointRadius,
        getLineColor: function getLineColor(feature) {
          return _this3.props.getDrawLineColor(feature, _this3.state.selectedFeatures[0], _this3.props.mode);
        },
        getLineWidth: function getLineWidth(feature) {
          return _this3.props.getDrawLineWidth(feature, _this3.state.selectedFeatures[0], _this3.props.mode);
        },
        getFillColor: function getFillColor(feature) {
          return _this3.props.getDrawFillColor(feature, _this3.state.selectedFeatures[0], _this3.props.mode);
        },
        getLineDashArray: function getLineDashArray(feature) {
          return _this3.props.getDrawLineDashArray(feature, _this3.state.selectedFeatures[0], _this3.props.mode);
        }
      }));

      return [layer];
    }
  }, {
    key: 'onClick',
    value: function onClick(_ref4) {
      var picks = _ref4.picks,
          screenCoords = _ref4.screenCoords,
          groundCoords = _ref4.groundCoords;
      var selectedFeatures = this.state.selectedFeatures;
      var selectedFeatureIndexes = this.props.selectedFeatureIndexes;

      var editHandleInfo = this.getPickedEditHandle(picks);

      if (this.props.mode === 'modify') {
        if (editHandleInfo && editHandleInfo.object.type === 'existing') {
          this.handleRemovePosition(this.props.data.features[editHandleInfo.object.featureIndex], editHandleInfo.object.featureIndex, editHandleInfo.object.positionIndexes);
        }
      } else if (this.props.mode === 'drawLineString' || this.props.mode === 'drawPolygon' || this.props.mode === 'drawRectangle' || this.props.mode === 'drawCircle') {
        if (!selectedFeatures.length) {
          this.handleDrawNewPoint(groundCoords);
        } else if (selectedFeatures.length === 1) {
          // can only draw feature while one is selected
          if (this.props.mode === 'drawLineString') {
            this.handleDrawLineString(selectedFeatures[0], selectedFeatureIndexes[0], groundCoords, picks);
          }
          if (this.props.mode === 'drawPolygon') {
            this.handleDrawPolygon(selectedFeatures[0], selectedFeatureIndexes[0], groundCoords, picks);
          }
          if (this.props.mode === 'drawRectangle') {
            this.handleDrawRectangle(selectedFeatures[0], selectedFeatureIndexes[0], groundCoords, picks);
          }
          if (this.props.mode === 'drawCircle') {
            this.handleDrawCircle(selectedFeatures[0], selectedFeatureIndexes[0], groundCoords, picks);
          }
        }
      }
    }
  }, {
    key: 'onStartDragging',
    value: function onStartDragging(_ref5) {
      var picks = _ref5.picks,
          screenCoords = _ref5.screenCoords,
          groundCoords = _ref5.groundCoords,
          dragStartScreenCoords = _ref5.dragStartScreenCoords,
          dragStartGroundCoords = _ref5.dragStartGroundCoords;
      var selectedFeatures = this.state.selectedFeatures;

      var editHandleInfo = this.getPickedEditHandle(picks);

      if (!selectedFeatures.length) {
        return;
      }

      if (editHandleInfo) {
        if (editHandleInfo.object.type === 'intermediate') {
          this.handleAddIntermediatePosition(editHandleInfo.object.featureIndex, editHandleInfo.object.positionIndexes, groundCoords);
        }
      }
    }
  }, {
    key: 'onDragging',
    value: function onDragging(_ref6) {
      var picks = _ref6.picks,
          screenCoords = _ref6.screenCoords,
          groundCoords = _ref6.groundCoords,
          dragStartScreenCoords = _ref6.dragStartScreenCoords,
          dragStartGroundCoords = _ref6.dragStartGroundCoords;
      var selectedFeatures = this.state.selectedFeatures;


      if (!selectedFeatures.length) {
        return;
      }

      var editHandleInfo = this.getPickedEditHandle(picks);
      if (editHandleInfo) {
        this.handleMovePosition(editHandleInfo.object.featureIndex, editHandleInfo.object.positionIndexes, groundCoords);
      }
    }
  }, {
    key: 'onStopDragging',
    value: function onStopDragging(_ref7) {
      var picks = _ref7.picks,
          screenCoords = _ref7.screenCoords,
          groundCoords = _ref7.groundCoords,
          dragStartScreenCoords = _ref7.dragStartScreenCoords,
          dragStartGroundCoords = _ref7.dragStartGroundCoords;
      var selectedFeatures = this.state.selectedFeatures;


      if (!selectedFeatures.length) {
        return;
      }

      var editHandleInfo = this.getPickedEditHandle(picks);

      if (editHandleInfo) {
        this.handleFinishMovePosition(editHandleInfo.object.featureIndex, editHandleInfo.object.positionIndexes, groundCoords);
      }
    }
  }, {
    key: 'onPointerMove',
    value: function onPointerMove(_ref8) {
      var screenCoords = _ref8.screenCoords,
          groundCoords = _ref8.groundCoords,
          isDragging = _ref8.isDragging,
          pointerDownPicks = _ref8.pointerDownPicks,
          sourceEvent = _ref8.sourceEvent;

      if (this.props.mode === 'drawLineString' || this.props.mode === 'drawPolygon' || this.props.mode === 'drawRectangle' || this.props.mode === 'drawCircle') {
        var selectedFeature = this.state.selectedFeatures.length === 1 ? this.state.selectedFeatures[0] : null;
        var drawFeature = this.getDrawFeature(selectedFeature, this.props.mode, groundCoords);

        this.setState({ drawFeature: drawFeature });

        // TODO: figure out how to properly update state from a pointer event handler
        this.setLayerNeedsUpdate();
      }

      if (pointerDownPicks && pointerDownPicks.length > 0) {
        var editHandleInfo = this.getPickedEditHandle(pointerDownPicks);
        if (editHandleInfo) {
          // TODO: find a less hacky way to prevent map panning
          // Stop propagation to prevent map panning while dragging an edit handle
          sourceEvent.stopPropagation();
        }
      }
    }
  }, {
    key: 'getDrawFeature',
    value: function getDrawFeature(selectedFeature, mode, groundCoords) {
      var drawFeature = null;

      if (!selectedFeature && !groundCoords) {
        // Need a mouse position in order to draw a single point
        return null;
      }

      if (!selectedFeature) {
        // Start with a point
        drawFeature = {
          type: 'Feature',
          geometry: {
            type: 'Point',
            coordinates: groundCoords
          }
        };
      } else if (selectedFeature.geometry.type === 'Point') {
        if (mode === 'drawLineString' || mode === 'drawPolygon') {
          // Draw an extension line starting from the point
          var startPosition = selectedFeature.geometry.coordinates;
          var endPosition = groundCoords || startPosition;

          drawFeature = {
            type: 'Feature',
            geometry: {
              type: 'LineString',
              coordinates: [startPosition, endPosition]
            }
          };
        } else if (mode === 'drawRectangle') {
          var corner1 = selectedFeature.geometry.coordinates;
          var corner2 = groundCoords || corner1;
          var minX = Math.min(corner1[0], corner2[0]);
          var minY = Math.min(corner1[1], corner2[1]);
          var maxX = Math.max(corner1[0], corner2[0]);
          var maxY = Math.max(corner1[1], corner2[1]);

          drawFeature = (0, _bboxPolygon2.default)([minX, minY, maxX, maxY]);
        } else if (mode === 'drawCircle') {
          var center = selectedFeature.geometry.coordinates;
          var radius = Math.max((0, _distance2.default)(selectedFeature, groundCoords || center), 0.001);
          drawFeature = (0, _circle2.default)(center, radius);
        }
      } else if (selectedFeature.geometry.type === 'LineString') {
        var lastPositionOfLineString = selectedFeature.geometry.coordinates[selectedFeature.geometry.coordinates.length - 1];
        var currentPosition = groundCoords || lastPositionOfLineString;

        if (mode === 'drawLineString') {
          // Draw a single line extending beyond the last point

          drawFeature = {
            type: 'Feature',
            geometry: {
              type: 'LineString',
              coordinates: [lastPositionOfLineString, currentPosition]
            }
          };
        } else if (mode === 'drawPolygon') {
          // Requires two features, a non-stroked polygon for fill and a
          // line string for the drawing feature
          drawFeature = {
            type: 'FeatureCollection',
            features: [{
              type: 'Feature',
              geometry: {
                type: 'Polygon',
                coordinates: [[].concat(_toConsumableArray(selectedFeature.geometry.coordinates), [currentPosition, selectedFeature.geometry.coordinates[0]])]
              }
            }, {
              type: 'Feature',
              geometry: {
                type: 'LineString',
                coordinates: [selectedFeature.geometry.coordinates[selectedFeature.geometry.coordinates.length - 1], currentPosition, selectedFeature.geometry.coordinates[0]]
              }
            }]
          };
        }
      }
      return drawFeature;
    }
  }, {
    key: 'handleMovePosition',
    value: function handleMovePosition(featureIndex, positionIndexes, groundCoords) {
      var updatedData = this.state.editableFeatureCollection.replacePosition(featureIndex, positionIndexes, groundCoords).getObject();

      this.props.onEdit({
        updatedData: updatedData,
        updatedMode: this.props.mode,
        updatedSelectedFeatureIndexes: this.props.selectedFeatureIndexes,
        editType: 'movePosition',
        featureIndex: featureIndex,
        positionIndexes: positionIndexes,
        position: groundCoords
      });
    }
  }, {
    key: 'handleFinishMovePosition',
    value: function handleFinishMovePosition(featureIndex, positionIndexes, groundCoords) {
      var updatedData = this.state.editableFeatureCollection.replacePosition(featureIndex, positionIndexes, groundCoords).getObject();

      this.props.onEdit({
        updatedData: updatedData,
        updatedMode: this.props.mode,
        updatedSelectedFeatureIndexes: this.props.selectedFeatureIndexes,
        editType: 'finishMovePosition',
        featureIndex: featureIndex,
        positionIndexes: positionIndexes,
        position: groundCoords
      });
    }
  }, {
    key: 'handleAddIntermediatePosition',
    value: function handleAddIntermediatePosition(featureIndex, positionIndexes, groundCoords) {
      var updatedData = this.state.editableFeatureCollection.addPosition(featureIndex, positionIndexes, groundCoords).getObject();

      this.props.onEdit({
        updatedData: updatedData,
        updatedMode: this.props.mode,
        updatedSelectedFeatureIndexes: this.props.selectedFeatureIndexes,
        editType: 'addPosition',
        featureIndex: featureIndex,
        positionIndexes: positionIndexes,
        position: groundCoords
      });
    }
  }, {
    key: 'handleRemovePosition',
    value: function handleRemovePosition(selectedFeature, featureIndex, positionIndexes) {
      var updatedData = void 0;
      try {
        updatedData = this.state.editableFeatureCollection.removePosition(featureIndex, positionIndexes).getObject();
      } catch (error) {
        // This happens if user attempts to remove the last point
      }

      if (updatedData) {
        this.props.onEdit({
          updatedData: updatedData,
          updatedMode: this.props.mode,
          updatedSelectedFeatureIndexes: this.props.selectedFeatureIndexes,
          editType: 'removePosition',
          featureIndex: featureIndex,
          positionIndexes: positionIndexes
        });
      }
    }
  }, {
    key: 'handleDrawLineString',
    value: function handleDrawLineString(selectedFeature, featureIndex, groundCoords, picks) {
      var featureCollection = this.state.editableFeatureCollection;
      var positionIndexes = void 0;

      if (selectedFeature.geometry.type === 'Point') {
        positionIndexes = [1];

        // Upgrade from Point to LineString
        featureCollection = featureCollection.replaceGeometry(featureIndex, {
          type: 'LineString',
          coordinates: [selectedFeature.geometry.coordinates, groundCoords]
        });
      } else if (selectedFeature.geometry.type === 'LineString') {
        positionIndexes = [selectedFeature.geometry.coordinates.length];
        featureCollection = featureCollection.addPosition(featureIndex, positionIndexes, groundCoords);
      } else {
        console.warn('Unsupported geometry type: ' + selectedFeature.geometry.type); // eslint-disable-line
        return;
      }

      var updatedData = featureCollection.getObject();

      this.props.onEdit({
        updatedData: updatedData,
        updatedMode: this.props.mode,
        updatedSelectedFeatureIndexes: this.props.selectedFeatureIndexes,
        editType: 'addPosition',
        featureIndex: featureIndex,
        positionIndexes: positionIndexes,
        position: groundCoords
      });
    }
  }, {
    key: 'handleDrawPolygon',
    value: function handleDrawPolygon(selectedFeature, featureIndex, groundCoords, picks) {
      var featureCollection = this.state.editableFeatureCollection;
      var positionIndexes = void 0;

      var updatedMode = this.props.mode;

      if (selectedFeature.geometry.type === 'Point') {
        positionIndexes = [1];
        // Upgrade from Point to LineString
        featureCollection = featureCollection.replaceGeometry(featureIndex, {
          type: 'LineString',
          coordinates: [selectedFeature.geometry.coordinates, groundCoords]
        });
      } else if (selectedFeature.geometry.type === 'LineString') {
        var pickedHandleInfo = this.getPickedEditHandle(picks);
        if (pickedHandleInfo && pickedHandleInfo.object.positionIndexes[0] === 0 && selectedFeature.geometry.coordinates.length > 2) {
          // They clicked the first position of the LineString, so close the polygon
          featureCollection = featureCollection.replaceGeometry(featureIndex, {
            type: 'Polygon',
            coordinates: [[].concat(_toConsumableArray(selectedFeature.geometry.coordinates), [selectedFeature.geometry.coordinates[0]])]
          });
          updatedMode = 'modify';
        } else {
          // Add another point along the LineString
          positionIndexes = [selectedFeature.geometry.coordinates.length];
          featureCollection = featureCollection.addPosition(featureIndex, positionIndexes, groundCoords);
        }
      } else {
        console.warn('Unsupported geometry type: ' + selectedFeature.geometry.type); // eslint-disable-line
        return;
      }

      var updatedData = featureCollection.getObject();

      this.props.onEdit({
        updatedData: updatedData,
        updatedMode: updatedMode,
        updatedSelectedFeatureIndexes: this.props.selectedFeatureIndexes,
        editType: 'addPosition',
        featureIndex: featureIndex,
        positionIndexes: positionIndexes,
        position: groundCoords
      });
    }
  }, {
    key: 'handleDrawRectangle',
    value: function handleDrawRectangle(selectedFeature, featureIndex, groundCoords, picks) {
      var featureCollection = this.state.editableFeatureCollection;
      var positionIndexes = void 0;

      var updatedMode = this.props.mode;

      if (selectedFeature.geometry.type === 'Point') {
        positionIndexes = null;
        featureCollection = featureCollection.replaceGeometry(featureIndex, this.state.drawFeature.geometry);
        updatedMode = 'modify';
      } else {
        console.warn('Unsupported geometry type: ' + selectedFeature.geometry.type); // eslint-disable-line
        return;
      }

      var updatedData = featureCollection.getObject();

      this.props.onEdit({
        updatedData: updatedData,
        updatedMode: updatedMode,
        updatedSelectedFeatureIndexes: this.props.selectedFeatureIndexes,
        editType: 'addPosition',
        featureIndex: featureIndex,
        positionIndexes: positionIndexes,
        position: groundCoords
      });
    }
  }, {
    key: 'handleDrawCircle',
    value: function handleDrawCircle(selectedFeature, featureIndex, groundCoords, picks) {
      var featureCollection = this.state.editableFeatureCollection;
      var positionIndexes = void 0;

      var updatedMode = this.props.mode;

      if (selectedFeature.geometry.type === 'Point') {
        positionIndexes = null;
        featureCollection = featureCollection.replaceGeometry(featureIndex, this.state.drawFeature.geometry);
        updatedMode = 'modify';
      } else {
        console.warn('Unsupported geometry type: ' + selectedFeature.geometry.type); // eslint-disable-line
        return;
      }

      var updatedData = featureCollection.getObject();

      this.props.onEdit({
        updatedData: updatedData,
        updatedMode: updatedMode,
        updatedSelectedFeatureIndexes: this.props.selectedFeatureIndexes,
        editType: 'addPosition',
        featureIndex: featureIndex,
        positionIndexes: positionIndexes,
        position: groundCoords
      });
    }
  }, {
    key: 'handleDrawNewPoint',
    value: function handleDrawNewPoint(groundCoords) {
      // Starts off as a point (since LineString requires at least 2 positions)
      var newFeature = {
        type: 'Feature',
        geometry: {
          type: 'Point',
          coordinates: groundCoords
        }
      };

      var updatedData = this.state.editableFeatureCollection.addFeature(newFeature).getObject();
      var featureIndex = this.props.data.features.length;

      this.props.onEdit({
        updatedData: updatedData,
        updatedMode: this.props.mode,
        updatedSelectedFeatureIndexes: [featureIndex],
        editType: 'addFeature',
        featureIndex: featureIndex,
        positionIndexes: [0],
        position: groundCoords
      });
    }
  }, {
    key: 'getPickedEditHandle',
    value: function getPickedEditHandle(picks) {
      return picks.find(function (pick) {
        return pick.isEditingHandle;
      });
    }
  }]);

  return EditableGeoJsonLayer;
}(_editableLayer2.default);

exports.default = EditableGeoJsonLayer;


EditableGeoJsonLayer.layerName = 'EditableGeoJsonLayer';
EditableGeoJsonLayer.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,