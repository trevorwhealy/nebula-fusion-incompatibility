'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deck = require('deck.gl');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
/* eslint-env browser */

// Minimum number of pixels the pointer must move from the original pointer down to be considered dragging
var MINIMUM_POINTER_MOVE_THRESHOLD_PIXELS = 7;

var EditableLayer = function (_CompositeLayer) {
  _inherits(EditableLayer, _CompositeLayer);

  function EditableLayer() {
    _classCallCheck(this, EditableLayer);

    return _possibleConstructorReturn(this, (EditableLayer.__proto__ || Object.getPrototypeOf(EditableLayer)).apply(this, arguments));
  }

  _createClass(EditableLayer, [{
    key: 'onClick',

    // Overridable interaction event handlers
    value: function onClick(_ref) {
      // default implementation - do nothing

      var picks = _ref.picks,
          screenCoords = _ref.screenCoords,
          groundCoords = _ref.groundCoords;
    }
  }, {
    key: 'onStartDragging',
    value: function onStartDragging(_ref2) {
      // default implementation - do nothing

      var picks = _ref2.picks,
          screenCoords = _ref2.screenCoords,
          groundCoords = _ref2.groundCoords,
          dragStartScreenCoords = _ref2.dragStartScreenCoords,
          dragStartGroundCoords = _ref2.dragStartGroundCoords;
    }
  }, {
    key: 'onDragging',
    value: function onDragging(_ref3) {
      // default implementation - do nothing

      var picks = _ref3.picks,
          screenCoords = _ref3.screenCoords,
          groundCoords = _ref3.groundCoords,
          dragStartScreenCoords = _ref3.dragStartScreenCoords,
          dragStartGroundCoords = _ref3.dragStartGroundCoords;
    }
  }, {
    key: 'onStopDragging',
    value: function onStopDragging(_ref4) {
      // default implementation - do nothing

      var picks = _ref4.picks,
          screenCoords = _ref4.screenCoords,
          groundCoords = _ref4.groundCoords,
          dragStartScreenCoords = _ref4.dragStartScreenCoords,
          dragStartGroundCoords = _ref4.dragStartGroundCoords;
    }
  }, {
    key: 'onPointerMove',
    value: function onPointerMove(_ref5) {
      var screenCoords = _ref5.screenCoords,
          groundCoords = _ref5.groundCoords,
          isDragging = _ref5.isDragging,
          sourceEvent = _ref5.sourceEvent;
    }
    // default implementation - do nothing


    // TODO: implement onCancelDragging (e.g. drag off screen)

  }, {
    key: 'initializeState',
    value: function initializeState() {
      this.setState({
        _editableLayerState: {
          // Pointer event handlers
          pointerHandlers: null,
          // Picked objects at the time the pointer went down
          pointerDownPicks: null,
          // Screen coordinates where the pointer went down
          pointerDownScreenCoords: null,
          // Ground coordinates where the pointer went down
          pointerDownGroundCoords: null,
          // Is the pointer dragging (pointer down + moved at least MINIMUM_POINTER_MOVE_THRESHOLD_PIXELS)
          isDragging: false
        }
      });
    }
  }, {
    key: 'finalizeState',
    value: function finalizeState() {
      this._removePointerHandlers();
    }
  }, {
    key: 'updateState',
    value: function updateState(_ref6) {
      var props = _ref6.props,
          changeFlags = _ref6.changeFlags;

      // unsubscribe previous layer instance's handlers
      this._removePointerHandlers();
      this._addPointerHandlers();
    }
  }, {
    key: '_removePointerHandlers',
    value: function _removePointerHandlers() {
      if (this.state._editableLayerState.pointerHandlers) {
        this.context.gl.canvas.removeEventListener('pointermove', this.state._editableLayerState.pointerHandlers.onPointerMove);
        this.context.gl.canvas.removeEventListener('pointerdown', this.state._editableLayerState.pointerHandlers.onPointerDown);
        this.context.gl.canvas.removeEventListener('pointerup', this.state._editableLayerState.pointerHandlers.onPointerUp);
      }
      this.state._editableLayerState.pointerHandlers = null;
    }
  }, {
    key: '_addPointerHandlers',
    value: function _addPointerHandlers() {
      this.state._editableLayerState.pointerHandlers = {
        onPointerMove: this._onPointerMove.bind(this),
        onPointerDown: this._onPointerDown.bind(this),
        onPointerUp: this._onPointerUp.bind(this)
      };

      this.context.gl.canvas.addEventListener('pointermove', this.state._editableLayerState.pointerHandlers.onPointerMove);
      this.context.gl.canvas.addEventListener('pointerdown', this.state._editableLayerState.pointerHandlers.onPointerDown);
      this.context.gl.canvas.addEventListener('pointerup', this.state._editableLayerState.pointerHandlers.onPointerUp);
    }
  }, {
    key: '_onPointerDown',
    value: function _onPointerDown(event) {
      var screenCoords = this.getScreenCoords(event);
      var groundCoords = this.getGroundCoords(screenCoords);

      var picks = this.context.layerManager.pickObject({
        x: screenCoords[0],
        y: screenCoords[1],
        mode: 'query',
        layers: [this.props.id],
        radius: 10,
        viewports: [this.context.viewport]
      });

      this.setState({
        _editableLayerState: _extends({}, this.state._editableLayerState, {
          pointerDownScreenCoords: screenCoords,
          pointerDownGroundCoords: groundCoords,
          pointerDownPicks: picks,
          isDragging: false
        })
      });
    }
  }, {
    key: '_onPointerMove',
    value: function _onPointerMove(event) {
      var screenCoords = this.getScreenCoords(event);
      var groundCoords = this.getGroundCoords(screenCoords);

      var _state$_editableLayer = this.state._editableLayerState,
          pointerDownPicks = _state$_editableLayer.pointerDownPicks,
          pointerDownScreenCoords = _state$_editableLayer.pointerDownScreenCoords,
          pointerDownGroundCoords = _state$_editableLayer.pointerDownGroundCoords;
      var isDragging = this.state._editableLayerState.isDragging;


      if (pointerDownPicks && pointerDownPicks.length > 0) {
        // Pointer went down on something and is moving

        // Did it move enough to consider it a drag
        if (!isDragging && this.movedEnoughForDrag(pointerDownScreenCoords, screenCoords)) {
          // OK, this is considered dragging

          // Fire the start dragging event
          this.onStartDragging({
            picks: pointerDownPicks,
            screenCoords: screenCoords,
            groundCoords: groundCoords,
            dragStartScreenCoords: pointerDownScreenCoords,
            dragStartGroundCoords: pointerDownGroundCoords
          });

          isDragging = true;
          this.setState({
            _editableLayerState: _extends({}, this.state._editableLayerState, {
              isDragging: isDragging
            })
          });
        }
      }

      this.onPointerMove({
        screenCoords: screenCoords,
        groundCoords: groundCoords,
        isDragging: isDragging,
        pointerDownPicks: pointerDownPicks,
        sourceEvent: event
      });

      if (isDragging) {
        this.onDragging({
          picks: pointerDownPicks,
          screenCoords: screenCoords,
          groundCoords: groundCoords,
          dragStartScreenCoords: pointerDownScreenCoords,
          dragStartGroundCoords: pointerDownGroundCoords
        });
      }
    }
  }, {
    key: '_onPointerUp',
    value: function _onPointerUp(event) {
      var screenCoords = this.getScreenCoords(event);
      var groundCoords = this.getGroundCoords(screenCoords);

      var _state$_editableLayer2 = this.state._editableLayerState,
          pointerDownPicks = _state$_editableLayer2.pointerDownPicks,
          pointerDownScreenCoords = _state$_editableLayer2.pointerDownScreenCoords,
          pointerDownGroundCoords = _state$_editableLayer2.pointerDownGroundCoords,
          isDragging = _state$_editableLayer2.isDragging;


      if (!pointerDownScreenCoords) {
        // This is a pointer up without a pointer down (e.g. user pointer downed elsewhere), so ignore
        return;
      }

      if (isDragging) {
        this.onStopDragging({
          picks: pointerDownPicks,
          screenCoords: screenCoords,
          groundCoords: groundCoords,
          dragStartScreenCoords: pointerDownScreenCoords,
          dragStartGroundCoords: pointerDownGroundCoords
        });
      } else if (!this.movedEnoughForDrag(pointerDownScreenCoords, screenCoords)) {
        this.onClick({
          picks: pointerDownPicks,
          screenCoords: screenCoords,
          groundCoords: groundCoords
        });
      }

      this.setState({
        _editableLayerState: _extends({}, this.state._editableLayerState, {
          pointerDownScreenCoords: null,
          pointerDownGroundCoords: null,
          pointerDownPicks: null,
          isDragging: false
        })
      });
    }
  }, {
    key: 'getScreenCoords',
    value: function getScreenCoords(pointerEvent) {
      return [pointerEvent.clientX - this.context.gl.canvas.getBoundingClientRect().x, pointerEvent.clientY - this.context.gl.canvas.getBoundingClientRect().y];
    }
  }, {
    key: 'getGroundCoords',
    value: function getGroundCoords(screenCoords) {
      return this.context.viewport.unproject([screenCoords[0], screenCoords[1]]);
    }
  }, {
    key: 'movedEnoughForDrag',
    value: function movedEnoughForDrag(screenCoords1, screenCoords2) {
      return Math.abs(screenCoords1[0] - screenCoords2[0]) > MINIMUM_POINTER_MOVE_THRESHOLD_PIXELS || Math.abs(screenCoords1[1] - screenCoords2[1]) > MINIMUM_POINTER_MOVE_THRESHOLD_PIXELS;
    }
  }]);

  return EditableLayer;
}(_deck.CompositeLayer);

exports.default = EditableLayer;


EditableLayer.layerName = 'EditableLayer';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,