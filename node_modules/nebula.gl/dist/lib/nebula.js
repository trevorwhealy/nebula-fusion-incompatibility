'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _document = require('global/document');

var _document2 = _interopRequireDefault(_document);

var _window = require('global/window');

var _window2 = _interopRequireDefault(_window);

var _deck = require('deck.gl');

var _deckDrawer = require('./deck-renderer/deck-drawer');

var _deckDrawer2 = _interopRequireDefault(_deckDrawer);

var _layerMouseEvent = require('./layer-mouse-event');

var _layerMouseEvent2 = _interopRequireDefault(_layerMouseEvent);

var _projector = require('./projector');

var _projector2 = _interopRequireDefault(_projector);

var _nebulaLayer = require('./nebula-layer');

var _nebulaLayer2 = _interopRequireDefault(_nebulaLayer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LOGGER_PREFIX = 'Nebula: ';

var Nebula = function () {
  function Nebula() {
    var _this = this;

    _classCallCheck(this, Nebula);

    this.queryObjectEvents = new _events2.default();

    this._onMouseEvent = function (event) {
      if (!_this._isNebulaEvent(event)) {
        return;
      }

      if (event.type === 'mousedown') {
        _this._mouseWasDown = true;
      }

      // offsetX/Y of the MouseEvent provides the offset in the X/Y coordinate
      // of the mouse pointer between that event and the padding edge of the target node.
      // We set our listener to document so we need to adjust offsetX/Y
      // in case the target is not be our WebGL canvas.

      var _ref = _this.mainContainer ? _this.mainContainer.getBoundingClientRect() : {},
          _ref$top = _ref.top,
          top = _ref$top === undefined ? 0 : _ref$top,
          _ref$left = _ref.left,
          left = _ref$left === undefined ? 0 : _ref$left;

      var proxyEvent = new Proxy(event, {
        get: function get(original, propertyName) {
          if (propertyName === 'offsetX') {
            return original.pageX - left;
          }

          if (propertyName === 'offsetY') {
            return original.pageY - top;
          }

          // TODO: Properly use pointer events
          if (propertyName === 'type') {
            return original.type.replace('pointer', 'mouse');
          }

          var result = original[propertyName];
          if (typeof result === 'function') {
            return result.bind(original);
          }
          return result;
        }
      });

      _this._handleDeckGLEvent(proxyEvent);
    };
  }

  _createClass(Nebula, [{
    key: 'init',
    value: function init(props) {
      var _this2 = this;

      this.props = props;
      this.projector = new _projector2.default(this.props.viewport);
      this.wmViewport = new _deck.WebMercatorViewport(this.props.viewport);

      // TODO: Properly use pointer events
      // ['click', 'dblclick', 'mousemove', 'mouseup', 'mousedown'].forEach(name =>
      ['click', 'dblclick', 'pointermove', 'pointerup', 'pointerdown'].forEach(function (name) {
        return _document2.default.addEventListener(name, _this2._onMouseEvent, true);
      });
    }
  }, {
    key: 'updateProps',
    value: function updateProps(newProps) {
      this.props = newProps;
      var viewport = this.props.viewport;
      var projector = this.projector;


      if (projector.shouldChangeCenter(viewport)) {
        this.log('Changing center to [' + viewport.longitude + ', ' + viewport.latitude + ']');
        projector.setCenterFromViewport(viewport);
      }

      this.wmViewport = new _deck.WebMercatorViewport(viewport);
    }
  }, {
    key: 'log',
    value: function log(message) {
      var logger = this.props.logger;

      if (logger && logger.info) {
        logger.info(LOGGER_PREFIX + message);
      }
    }
  }, {
    key: 'updateAllDeckObjects',
    value: function updateAllDeckObjects() {
      this.getAllLayers().forEach(function (layer) {
        if (layer && layer.deckCache) {
          layer.deckCache.updateAllDeckObjects();
        }
      });
      this.forceUpdate();
    }
  }, {
    key: 'updateDeckObjectsByIds',
    value: function updateDeckObjectsByIds(ids) {
      this.getAllLayers().forEach(function (layer) {
        if (layer && layer.deckCache) {
          layer.deckCache.updateDeckObjectsByIds(ids);
        }
      });
      this.forceUpdate();
    }
  }, {
    key: 'rerenderLayers',
    value: function rerenderLayers() {
      this.updateAllDeckObjects();
    }
  }, {
    key: '_isNebulaEvent',
    value: function _isNebulaEvent(_ref2) {
      var buttons = _ref2.buttons,
          target = _ref2.target,
          type = _ref2.type;
      var viewport = this.props.viewport;

      // allow mouseup event aggressively to cancel drag properly
      // TODO: use pointer capture setPointerCapture() to capture mouseup properly after deckgl

      if (this._mouseWasDown && type === 'mouseup') {
        this._mouseWasDown = false;
        return true;
      }

      // allow mousemove event while dragging
      if (type === 'mousemove' && buttons > 0) {
        return true;
      }

      if (!target.getBoundingClientRect) {
        return false;
      }

      var rect = target.getBoundingClientRect();
      // Only listen to events coming from the basemap
      // identified by the canvas of the same size as viewport.
      // Need to round the rect dimension as some monitors
      // have some sub-pixel difference with viewport.
      return Math.round(rect.width) === Math.round(viewport.width) && Math.round(rect.height) === Math.round(viewport.height);
    }
  }, {
    key: 'allowEvent',
    value: function allowEvent(lngLat, event) {
      return true;
    }
  }, {
    key: '_getMouseGroundPosition',
    value: function _getMouseGroundPosition(event) {
      return this.wmViewport.unproject([event.offsetX, event.offsetY]);
    }
  }, {
    key: '_handleDeckGLEvent',
    value: function _handleDeckGLEvent(event) {
      var deckgl = this.deckgl,
          _props = this.props,
          onMapMouseEvent = _props.onMapMouseEvent,
          selectionType = _props.selectionType;

      var sendMapEvent = true;
      var cursor = 'auto';

      if (event && deckgl && selectionType) {
        if (!this._deckDrawer) this._deckDrawer = new _deckDrawer2.default(this);

        var lngLat = this._getMouseGroundPosition(event);
        if (!this.allowEvent(lngLat, event)) return;

        var drawerResult = this._deckDrawer.handleEvent(event, lngLat, selectionType);
        if (drawerResult.redraw) this.forceUpdate();
        return;
      }

      if (event && deckgl && (!event.buttons || event.type !== 'mousemove')) {
        // TODO: sort by mouse priority
        var layerIds = deckgl.props.layers.filter(function (l) {
          return l && l.props && l.props.nebulaLayer && l.props.nebulaLayer.enablePicking;
        }).map(function (l) {
          return l.id;
        });

        var pickingInfo = deckgl.queryObject({
          x: event.offsetX,
          y: event.offsetY,
          radius: 5,
          layerIds: layerIds
        });
        this.queryObjectEvents.emit('pick', { event: event, pickingInfo: pickingInfo });
        if (pickingInfo) {
          sendMapEvent = false;

          var index = pickingInfo.index,
              _lngLat = pickingInfo.lngLat;

          if (!this.allowEvent(_lngLat, event)) return;

          var deckLayer = pickingInfo.layer,
              object = pickingInfo.object;

          var original = object.original || deckLayer.props.nebulaLayer && deckLayer.props.nebulaLayer.deckCache && deckLayer.props.nebulaLayer.deckCache.originals[index];

          if (original) {
            this.deckglMouseOverInfo = { originalLayer: deckLayer.props.nebulaLayer, index: index };
            var nebulaMouseEvent = new _layerMouseEvent2.default(event, {
              data: original,
              metadata: object.metadata,
              groundPoint: _lngLat,
              nebula: this
            });
            deckLayer.props.nebulaLayer.emit(event.type, nebulaMouseEvent);
            this.forceUpdate();
          }

          cursor = 'pointer';
        }
      }

      if (_document2.default.documentElement) {
        _document2.default.documentElement.style.cursor = cursor;
      }

      if (sendMapEvent) {
        this.deckglMouseOverInfo = null;

        var _lngLat2 = this._getMouseGroundPosition(event);
        if (!this.allowEvent(_lngLat2, event)) return;

        // send to layers first
        var _nebulaMouseEvent = new _layerMouseEvent2.default(event, {
          groundPoint: _lngLat2,
          nebula: this
        });
        this.getAllLayers().filter(function (layer) {
          return layer && layer.usesMapEvents;
        }).forEach(function (layer) {
          return layer.emit('mapMouseEvent', _nebulaMouseEvent);
        });

        if (onMapMouseEvent) {
          onMapMouseEvent(event, _lngLat2);
        }
      }
    }
  }, {
    key: 'getExtraDeckLayers',
    value: function getExtraDeckLayers() {
      var result = [];

      if (this._deckDrawer) result.push.apply(result, _toConsumableArray(this._deckDrawer.render()));

      return result;
    }
  }, {
    key: 'renderDeckLayers',
    value: function renderDeckLayers() {
      var _this3 = this;

      return this.getAllLayers().map(function (layer) {
        return layer instanceof _nebulaLayer2.default ? layer.render({ nebula: _this3 }) : layer;
      }).filter(Boolean);
    }
  }, {
    key: 'getAllLayers',
    value: function getAllLayers() {
      var result = [];

      this.props.layers.filter(Boolean).forEach(function (layer) {
        result.push(layer);
        // Only NebulaLayers have helpers, Deck GL layers don't.
        if (layer instanceof _nebulaLayer2.default) {
          result.push.apply(result, _toConsumableArray(layer.helperLayers));
        }
      });

      return result.filter(Boolean);
    }
  }, {
    key: 'getRenderedLayers',
    value: function getRenderedLayers() {
      return [].concat(_toConsumableArray(this.renderDeckLayers()), _toConsumableArray(this.getExtraDeckLayers()));
    }
  }, {
    key: 'updateAndGetRenderedLayers',
    value: function updateAndGetRenderedLayers(layers, viewport, container) {
      if (this.inited) {
        this.updateProps({ layers: layers, viewport: viewport });
        this.forceUpdate = function () {
          return container.forceUpdate();
        };
      } else {
        this.inited = true;
        this.init({ layers: layers, viewport: viewport });
        this.forceUpdate = function () {
          return container.forceUpdate();
        };
        this.updateAllDeckObjects();
      }

      return this.getRenderedLayers();
    }
  }, {
    key: 'setDeck',
    value: function setDeck(deckgl) {
      if (deckgl) {
        this.deckgl = deckgl;
      }
    }
  }]);

  return Nebula;
}();

exports.default = Nebula;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,