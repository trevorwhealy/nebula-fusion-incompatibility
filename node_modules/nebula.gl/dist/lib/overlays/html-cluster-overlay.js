'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _helpers = require('@turf/helpers');

var _supercluster = require('supercluster');

var _supercluster2 = _interopRequireDefault(_supercluster);

var _htmlOverlay = require('./html-overlay');

var _htmlOverlay2 = _interopRequireDefault(_htmlOverlay);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HtmlClusterOverlay = function (_HtmlOverlay) {
  _inherits(HtmlClusterOverlay, _HtmlOverlay);

  function HtmlClusterOverlay() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, HtmlClusterOverlay);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = HtmlClusterOverlay.__proto__ || Object.getPrototypeOf(HtmlClusterOverlay)).call.apply(_ref, [this].concat(args))), _this), _this._lastObjects = null, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(HtmlClusterOverlay, [{
    key: 'getItems',
    value: function getItems() {
      var _this2 = this;

      // supercluster().load() is expensive and we want to run it only
      // when necessary and not for every frame.
      var newObjects = this.getAllObjects();
      if (newObjects !== this._lastObjects) {
        this._superCluster = (0, _supercluster2.default)({ maxZoom: 20 });
        this._superCluster.load(newObjects.map(function (object) {
          return (0, _helpers.point)(_this2.getObjectCoordinates(object), { object: object });
        }));
        this._lastObjects = newObjects;
      }

      var clusters = this._superCluster.getClusters([-180, -90, 180, 90], Math.round(this.getZoom()));

      return clusters.map(function (_ref2) {
        var coordinates = _ref2.geometry.coordinates,
            _ref2$properties = _ref2.properties,
            cluster = _ref2$properties.cluster,
            pointCount = _ref2$properties.point_count,
            clusterId = _ref2$properties.cluster_id,
            object = _ref2$properties.object;
        return cluster ? _this2.renderCluster(coordinates, clusterId, pointCount) : _this2.renderObject(coordinates, object);
      });
    }
  }, {
    key: 'getClusterObjects',
    value: function getClusterObjects(clusterId) {
      return this._superCluster.getLeaves(clusterId, Math.round(this.getZoom()), Infinity).map(function (object) {
        return object.properties.object;
      });
    }

    // Override to provide items that need clustering.
    // If the items have not changed please provide the same array to avoid
    // regeneration of the cluster which causes performance issues.

  }, {
    key: 'getAllObjects',
    value: function getAllObjects() {
      return [];
    }

    // override to provide coordinates for each object of getAllObjects()

  }, {
    key: 'getObjectCoordinates',
    value: function getObjectCoordinates(obj) {
      return [0, 0];
    }

    // override to return an HtmlOverlayItem

  }, {
    key: 'renderObject',
    value: function renderObject(coordinates, obj) {
      return null;
    }

    // override to return an HtmlOverlayItem
    // use getClusterObjects() to get cluster contents

  }, {
    key: 'renderCluster',
    value: function renderCluster(coordinates, clusterId, pointCount) {
      return null;
    }
  }]);

  return HtmlClusterOverlay;
}(_htmlOverlay2.default);

exports.default = HtmlClusterOverlay;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvb3ZlcmxheXMvaHRtbC1jbHVzdGVyLW92ZXJsYXkuanMiXSwibmFtZXMiOlsiSHRtbENsdXN0ZXJPdmVybGF5IiwiX2xhc3RPYmplY3RzIiwibmV3T2JqZWN0cyIsImdldEFsbE9iamVjdHMiLCJfc3VwZXJDbHVzdGVyIiwibWF4Wm9vbSIsImxvYWQiLCJtYXAiLCJnZXRPYmplY3RDb29yZGluYXRlcyIsIm9iamVjdCIsImNsdXN0ZXJzIiwiZ2V0Q2x1c3RlcnMiLCJNYXRoIiwicm91bmQiLCJnZXRab29tIiwiY29vcmRpbmF0ZXMiLCJnZW9tZXRyeSIsInByb3BlcnRpZXMiLCJjbHVzdGVyIiwicG9pbnRDb3VudCIsInBvaW50X2NvdW50IiwiY2x1c3RlcklkIiwiY2x1c3Rlcl9pZCIsInJlbmRlckNsdXN0ZXIiLCJyZW5kZXJPYmplY3QiLCJnZXRMZWF2ZXMiLCJJbmZpbml0eSIsIm9iaiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7Ozs7Ozs7Ozs7SUFFcUJBLGtCOzs7Ozs7Ozs7Ozs7Ozs4TUFFbkJDLFksR0FBNkIsSTs7Ozs7K0JBRVI7QUFBQTs7QUFDbkI7QUFDQTtBQUNBLFVBQU1DLGFBQWEsS0FBS0MsYUFBTCxFQUFuQjtBQUNBLFVBQUlELGVBQWUsS0FBS0QsWUFBeEIsRUFBc0M7QUFDcEMsYUFBS0csYUFBTCxHQUFxQiw0QkFBYSxFQUFFQyxTQUFTLEVBQVgsRUFBYixDQUFyQjtBQUNBLGFBQUtELGFBQUwsQ0FBbUJFLElBQW5CLENBQ0VKLFdBQVdLLEdBQVgsQ0FBZTtBQUFBLGlCQUFVLG9CQUFNLE9BQUtDLG9CQUFMLENBQTBCQyxNQUExQixDQUFOLEVBQXlDLEVBQUVBLGNBQUYsRUFBekMsQ0FBVjtBQUFBLFNBQWYsQ0FERjtBQUdBLGFBQUtSLFlBQUwsR0FBb0JDLFVBQXBCO0FBQ0Q7O0FBRUQsVUFBTVEsV0FBVyxLQUFLTixhQUFMLENBQW1CTyxXQUFuQixDQUNmLENBQUMsQ0FBQyxHQUFGLEVBQU8sQ0FBQyxFQUFSLEVBQVksR0FBWixFQUFpQixFQUFqQixDQURlLEVBRWZDLEtBQUtDLEtBQUwsQ0FBVyxLQUFLQyxPQUFMLEVBQVgsQ0FGZSxDQUFqQjs7QUFLQSxhQUFPSixTQUFTSCxHQUFULENBQ0w7QUFBQSxZQUNjUSxXQURkLFNBQ0VDLFFBREYsQ0FDY0QsV0FEZDtBQUFBLHFDQUVFRSxVQUZGO0FBQUEsWUFFZ0JDLE9BRmhCLG9CQUVnQkEsT0FGaEI7QUFBQSxZQUVzQ0MsVUFGdEMsb0JBRXlCQyxXQUZ6QjtBQUFBLFlBRThEQyxTQUY5RCxvQkFFa0RDLFVBRmxEO0FBQUEsWUFFeUViLE1BRnpFLG9CQUV5RUEsTUFGekU7QUFBQSxlQUlFUyxVQUNJLE9BQUtLLGFBQUwsQ0FBbUJSLFdBQW5CLEVBQWdDTSxTQUFoQyxFQUEyQ0YsVUFBM0MsQ0FESixHQUVJLE9BQUtLLFlBQUwsQ0FBa0JULFdBQWxCLEVBQStCTixNQUEvQixDQU5OO0FBQUEsT0FESyxDQUFQO0FBU0Q7OztzQ0FFaUJZLFMsRUFBOEI7QUFDOUMsYUFBTyxLQUFLakIsYUFBTCxDQUNKcUIsU0FESSxDQUNNSixTQUROLEVBQ2lCVCxLQUFLQyxLQUFMLENBQVcsS0FBS0MsT0FBTCxFQUFYLENBRGpCLEVBQzZDWSxRQUQ3QyxFQUVKbkIsR0FGSSxDQUVBO0FBQUEsZUFBVUUsT0FBT1EsVUFBUCxDQUFrQlIsTUFBNUI7QUFBQSxPQUZBLENBQVA7QUFHRDs7QUFFRDtBQUNBO0FBQ0E7Ozs7b0NBQzJCO0FBQ3pCLGFBQU8sRUFBUDtBQUNEOztBQUVEOzs7O3lDQUNxQmtCLEcsRUFBZ0M7QUFDbkQsYUFBTyxDQUFDLENBQUQsRUFBSSxDQUFKLENBQVA7QUFDRDs7QUFFRDs7OztpQ0FDYVosVyxFQUF1QlksRyxFQUF1QjtBQUN6RCxhQUFPLElBQVA7QUFDRDs7QUFFRDtBQUNBOzs7O2tDQUNjWixXLEVBQXVCTSxTLEVBQW1CRixVLEVBQTZCO0FBQ25GLGFBQU8sSUFBUDtBQUNEOzs7Ozs7a0JBM0RrQm5CLGtCIiwiZmlsZSI6Imh0bWwtY2x1c3Rlci1vdmVybGF5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcbmltcG9ydCB7IHBvaW50IH0gZnJvbSAnQHR1cmYvaGVscGVycyc7XG5pbXBvcnQgc3VwZXJjbHVzdGVyIGZyb20gJ3N1cGVyY2x1c3Rlcic7XG5pbXBvcnQgSHRtbE92ZXJsYXkgZnJvbSAnLi9odG1sLW92ZXJsYXknO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIdG1sQ2x1c3Rlck92ZXJsYXk8UHJvcHMsIE9ialR5cGU+IGV4dGVuZHMgSHRtbE92ZXJsYXk8UHJvcHM+IHtcbiAgX3N1cGVyQ2x1c3RlcjogT2JqZWN0O1xuICBfbGFzdE9iamVjdHM6ID8oT2JqVHlwZVtdKSA9IG51bGw7XG5cbiAgZ2V0SXRlbXMoKTogT2JqZWN0W10ge1xuICAgIC8vIHN1cGVyY2x1c3RlcigpLmxvYWQoKSBpcyBleHBlbnNpdmUgYW5kIHdlIHdhbnQgdG8gcnVuIGl0IG9ubHlcbiAgICAvLyB3aGVuIG5lY2Vzc2FyeSBhbmQgbm90IGZvciBldmVyeSBmcmFtZS5cbiAgICBjb25zdCBuZXdPYmplY3RzID0gdGhpcy5nZXRBbGxPYmplY3RzKCk7XG4gICAgaWYgKG5ld09iamVjdHMgIT09IHRoaXMuX2xhc3RPYmplY3RzKSB7XG4gICAgICB0aGlzLl9zdXBlckNsdXN0ZXIgPSBzdXBlcmNsdXN0ZXIoeyBtYXhab29tOiAyMCB9KTtcbiAgICAgIHRoaXMuX3N1cGVyQ2x1c3Rlci5sb2FkKFxuICAgICAgICBuZXdPYmplY3RzLm1hcChvYmplY3QgPT4gcG9pbnQodGhpcy5nZXRPYmplY3RDb29yZGluYXRlcyhvYmplY3QpLCB7IG9iamVjdCB9KSlcbiAgICAgICk7XG4gICAgICB0aGlzLl9sYXN0T2JqZWN0cyA9IG5ld09iamVjdHM7XG4gICAgfVxuXG4gICAgY29uc3QgY2x1c3RlcnMgPSB0aGlzLl9zdXBlckNsdXN0ZXIuZ2V0Q2x1c3RlcnMoXG4gICAgICBbLTE4MCwgLTkwLCAxODAsIDkwXSxcbiAgICAgIE1hdGgucm91bmQodGhpcy5nZXRab29tKCkpXG4gICAgKTtcblxuICAgIHJldHVybiBjbHVzdGVycy5tYXAoXG4gICAgICAoe1xuICAgICAgICBnZW9tZXRyeTogeyBjb29yZGluYXRlcyB9LFxuICAgICAgICBwcm9wZXJ0aWVzOiB7IGNsdXN0ZXIsIHBvaW50X2NvdW50OiBwb2ludENvdW50LCBjbHVzdGVyX2lkOiBjbHVzdGVySWQsIG9iamVjdCB9XG4gICAgICB9KSA9PlxuICAgICAgICBjbHVzdGVyXG4gICAgICAgICAgPyB0aGlzLnJlbmRlckNsdXN0ZXIoY29vcmRpbmF0ZXMsIGNsdXN0ZXJJZCwgcG9pbnRDb3VudClcbiAgICAgICAgICA6IHRoaXMucmVuZGVyT2JqZWN0KGNvb3JkaW5hdGVzLCBvYmplY3QpXG4gICAgKTtcbiAgfVxuXG4gIGdldENsdXN0ZXJPYmplY3RzKGNsdXN0ZXJJZDogbnVtYmVyKTogT2JqVHlwZVtdIHtcbiAgICByZXR1cm4gdGhpcy5fc3VwZXJDbHVzdGVyXG4gICAgICAuZ2V0TGVhdmVzKGNsdXN0ZXJJZCwgTWF0aC5yb3VuZCh0aGlzLmdldFpvb20oKSksIEluZmluaXR5KVxuICAgICAgLm1hcChvYmplY3QgPT4gb2JqZWN0LnByb3BlcnRpZXMub2JqZWN0KTtcbiAgfVxuXG4gIC8vIE92ZXJyaWRlIHRvIHByb3ZpZGUgaXRlbXMgdGhhdCBuZWVkIGNsdXN0ZXJpbmcuXG4gIC8vIElmIHRoZSBpdGVtcyBoYXZlIG5vdCBjaGFuZ2VkIHBsZWFzZSBwcm92aWRlIHRoZSBzYW1lIGFycmF5IHRvIGF2b2lkXG4gIC8vIHJlZ2VuZXJhdGlvbiBvZiB0aGUgY2x1c3RlciB3aGljaCBjYXVzZXMgcGVyZm9ybWFuY2UgaXNzdWVzLlxuICBnZXRBbGxPYmplY3RzKCk6IE9ialR5cGVbXSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgLy8gb3ZlcnJpZGUgdG8gcHJvdmlkZSBjb29yZGluYXRlcyBmb3IgZWFjaCBvYmplY3Qgb2YgZ2V0QWxsT2JqZWN0cygpXG4gIGdldE9iamVjdENvb3JkaW5hdGVzKG9iajogT2JqVHlwZSk6IFtudW1iZXIsIG51bWJlcl0ge1xuICAgIHJldHVybiBbMCwgMF07XG4gIH1cblxuICAvLyBvdmVycmlkZSB0byByZXR1cm4gYW4gSHRtbE92ZXJsYXlJdGVtXG4gIHJlbmRlck9iamVjdChjb29yZGluYXRlczogbnVtYmVyW10sIG9iajogT2JqVHlwZSk6ID9PYmplY3Qge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gb3ZlcnJpZGUgdG8gcmV0dXJuIGFuIEh0bWxPdmVybGF5SXRlbVxuICAvLyB1c2UgZ2V0Q2x1c3Rlck9iamVjdHMoKSB0byBnZXQgY2x1c3RlciBjb250ZW50c1xuICByZW5kZXJDbHVzdGVyKGNvb3JkaW5hdGVzOiBudW1iZXJbXSwgY2x1c3RlcklkOiBudW1iZXIsIHBvaW50Q291bnQ6IG51bWJlcik6ID9PYmplY3Qge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG4iXX0=