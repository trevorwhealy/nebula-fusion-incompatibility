'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _helpers = require('@turf/helpers');

var _layerMouseEvent = require('../layer-mouse-event');

var _layerMouseEvent2 = _interopRequireDefault(_layerMouseEvent);

var _junctionsLayer = require('./junctions-layer');

var _junctionsLayer2 = _interopRequireDefault(_junctionsLayer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EditableJunctionsLayer = function (_JunctionsLayer) {
  _inherits(EditableJunctionsLayer, _JunctionsLayer);

  function EditableJunctionsLayer(config) {
    _classCallCheck(this, EditableJunctionsLayer);

    var _this = _possibleConstructorReturn(this, (EditableJunctionsLayer.__proto__ || Object.getPrototypeOf(EditableJunctionsLayer)).call(this, config));

    _this._mousedown = function (nebulaMouseEvent) {
      if (_this._editingId) {
        return;
      }

      var allowStart = true;
      var cancelEdit = function cancelEdit() {
        return allowStart = false;
      };
      _this.emit('editStart', nebulaMouseEvent, {
        cancelEdit: cancelEdit,
        id: nebulaMouseEvent.data.id,
        original: nebulaMouseEvent.data
      });

      if (allowStart) {
        _this._editingId = nebulaMouseEvent.data.id;

        // prevent drag of map
        nebulaMouseEvent.stopPropagation();
      }
    };

    _this._mousemove = function (nebulaMouseEvent) {
      if (_this._editingId) {
        var feature = _this.deckCache.getDeckObjectById(_this._editingId);
        if (feature) {
          feature.geoJson = (0, _helpers.point)(nebulaMouseEvent.groundPoint);

          _this.emit('editUpdate', nebulaMouseEvent, {
            feature: feature,
            id: _this._editingId,
            original: _this.deckCache.getOriginalById(_this._editingId)
          });
          _this.deckCache.triggerUpdate();
          nebulaMouseEvent.nebula.forceUpdate();
        }
      }
    };

    _this._mapMouseEvent = function (nebulaMouseEvent) {
      if (_this._editingId) {
        if (nebulaMouseEvent.nativeEvent.type === 'mousemove') {
          _this._mousemove(nebulaMouseEvent);
        } else if (nebulaMouseEvent.nativeEvent.type === 'mouseup') {
          _this._mouseup(nebulaMouseEvent);
        }
      }
    };

    _this._mouseup = function (nebulaMouseEvent) {
      if (_this._editingId) {
        var feature = _this.deckCache.getDeckObjectById(_this._editingId);
        _this.emit('editEnd', nebulaMouseEvent, {
          feature: feature,
          id: _this._editingId,
          original: _this.deckCache.getOriginalById(_this._editingId)
        });
        _this.deckCache.updateDeckObjectsByIds([_this._editingId]);
        nebulaMouseEvent.nebula.forceUpdate();

        _this._editingId = null;
      }
    };

    _this.on('mousedown', _this._mousedown);
    _this.on('mousemove', _this._mousemove);
    _this.on('mouseup', _this._mouseup);
    _this.on('mapMouseEvent', _this._mapMouseEvent);

    _this.usesMapEvents = true;

    _this._editingId = null;
    return _this;
  }

  return EditableJunctionsLayer;
}(_junctionsLayer2.default);

exports.default = EditableJunctionsLayer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvbGF5ZXJzL2VkaXRhYmxlLWp1bmN0aW9ucy1sYXllci5qcyJdLCJuYW1lcyI6WyJFZGl0YWJsZUp1bmN0aW9uc0xheWVyIiwiY29uZmlnIiwiX21vdXNlZG93biIsIm5lYnVsYU1vdXNlRXZlbnQiLCJfZWRpdGluZ0lkIiwiYWxsb3dTdGFydCIsImNhbmNlbEVkaXQiLCJlbWl0IiwiaWQiLCJkYXRhIiwib3JpZ2luYWwiLCJzdG9wUHJvcGFnYXRpb24iLCJfbW91c2Vtb3ZlIiwiZmVhdHVyZSIsImRlY2tDYWNoZSIsImdldERlY2tPYmplY3RCeUlkIiwiZ2VvSnNvbiIsImdyb3VuZFBvaW50IiwiZ2V0T3JpZ2luYWxCeUlkIiwidHJpZ2dlclVwZGF0ZSIsIm5lYnVsYSIsImZvcmNlVXBkYXRlIiwiX21hcE1vdXNlRXZlbnQiLCJuYXRpdmVFdmVudCIsInR5cGUiLCJfbW91c2V1cCIsInVwZGF0ZURlY2tPYmplY3RzQnlJZHMiLCJvbiIsInVzZXNNYXBFdmVudHMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7Ozs7Ozs7OztJQUVxQkEsc0I7OztBQUduQixrQ0FBWUMsTUFBWixFQUE0QjtBQUFBOztBQUFBLGdKQUNwQkEsTUFEb0I7O0FBQUEsVUFZNUJDLFVBWjRCLEdBWWYsVUFBQ0MsZ0JBQUQsRUFBdUM7QUFDbEQsVUFBSSxNQUFLQyxVQUFULEVBQXFCO0FBQ25CO0FBQ0Q7O0FBRUQsVUFBSUMsYUFBYSxJQUFqQjtBQUNBLFVBQU1DLGFBQWEsU0FBYkEsVUFBYTtBQUFBLGVBQU9ELGFBQWEsS0FBcEI7QUFBQSxPQUFuQjtBQUNBLFlBQUtFLElBQUwsQ0FBVSxXQUFWLEVBQXVCSixnQkFBdkIsRUFBeUM7QUFDdkNHLDhCQUR1QztBQUV2Q0UsWUFBSUwsaUJBQWlCTSxJQUFqQixDQUFzQkQsRUFGYTtBQUd2Q0Usa0JBQVVQLGlCQUFpQk07QUFIWSxPQUF6Qzs7QUFNQSxVQUFJSixVQUFKLEVBQWdCO0FBQ2QsY0FBS0QsVUFBTCxHQUFrQkQsaUJBQWlCTSxJQUFqQixDQUFzQkQsRUFBeEM7O0FBRUE7QUFDQUwseUJBQWlCUSxlQUFqQjtBQUNEO0FBQ0YsS0EvQjJCOztBQUFBLFVBaUM1QkMsVUFqQzRCLEdBaUNmLFVBQUNULGdCQUFELEVBQXVDO0FBQ2xELFVBQUksTUFBS0MsVUFBVCxFQUFxQjtBQUNuQixZQUFNUyxVQUFVLE1BQUtDLFNBQUwsQ0FBZUMsaUJBQWYsQ0FBaUMsTUFBS1gsVUFBdEMsQ0FBaEI7QUFDQSxZQUFJUyxPQUFKLEVBQWE7QUFDWEEsa0JBQVFHLE9BQVIsR0FBa0Isb0JBQU1iLGlCQUFpQmMsV0FBdkIsQ0FBbEI7O0FBRUEsZ0JBQUtWLElBQUwsQ0FBVSxZQUFWLEVBQXdCSixnQkFBeEIsRUFBMEM7QUFDeENVLDRCQUR3QztBQUV4Q0wsZ0JBQUksTUFBS0osVUFGK0I7QUFHeENNLHNCQUFVLE1BQUtJLFNBQUwsQ0FBZUksZUFBZixDQUFnQyxNQUFLZCxVQUFyQztBQUg4QixXQUExQztBQUtBLGdCQUFLVSxTQUFMLENBQWVLLGFBQWY7QUFDQWhCLDJCQUFpQmlCLE1BQWpCLENBQXdCQyxXQUF4QjtBQUNEO0FBQ0Y7QUFDRixLQWhEMkI7O0FBQUEsVUFrRDVCQyxjQWxENEIsR0FrRFgsVUFBQ25CLGdCQUFELEVBQXVDO0FBQ3RELFVBQUksTUFBS0MsVUFBVCxFQUFxQjtBQUNuQixZQUFJRCxpQkFBaUJvQixXQUFqQixDQUE2QkMsSUFBN0IsS0FBc0MsV0FBMUMsRUFBdUQ7QUFDckQsZ0JBQUtaLFVBQUwsQ0FBZ0JULGdCQUFoQjtBQUNELFNBRkQsTUFFTyxJQUFJQSxpQkFBaUJvQixXQUFqQixDQUE2QkMsSUFBN0IsS0FBc0MsU0FBMUMsRUFBcUQ7QUFDMUQsZ0JBQUtDLFFBQUwsQ0FBY3RCLGdCQUFkO0FBQ0Q7QUFDRjtBQUNGLEtBMUQyQjs7QUFBQSxVQTRENUJzQixRQTVENEIsR0E0RGpCLFVBQUN0QixnQkFBRCxFQUF1QztBQUNoRCxVQUFJLE1BQUtDLFVBQVQsRUFBcUI7QUFDbkIsWUFBTVMsVUFBVSxNQUFLQyxTQUFMLENBQWVDLGlCQUFmLENBQWlDLE1BQUtYLFVBQXRDLENBQWhCO0FBQ0EsY0FBS0csSUFBTCxDQUFVLFNBQVYsRUFBcUJKLGdCQUFyQixFQUF1QztBQUNyQ1UsMEJBRHFDO0FBRXJDTCxjQUFJLE1BQUtKLFVBRjRCO0FBR3JDTSxvQkFBVSxNQUFLSSxTQUFMLENBQWVJLGVBQWYsQ0FBZ0MsTUFBS2QsVUFBckM7QUFIMkIsU0FBdkM7QUFLQSxjQUFLVSxTQUFMLENBQWVZLHNCQUFmLENBQXNDLENBQUUsTUFBS3RCLFVBQVAsQ0FBdEM7QUFDQUQseUJBQWlCaUIsTUFBakIsQ0FBd0JDLFdBQXhCOztBQUVBLGNBQUtqQixVQUFMLEdBQWtCLElBQWxCO0FBQ0Q7QUFDRixLQXpFMkI7O0FBRTFCLFVBQUt1QixFQUFMLENBQVEsV0FBUixFQUFxQixNQUFLekIsVUFBMUI7QUFDQSxVQUFLeUIsRUFBTCxDQUFRLFdBQVIsRUFBcUIsTUFBS2YsVUFBMUI7QUFDQSxVQUFLZSxFQUFMLENBQVEsU0FBUixFQUFtQixNQUFLRixRQUF4QjtBQUNBLFVBQUtFLEVBQUwsQ0FBUSxlQUFSLEVBQXlCLE1BQUtMLGNBQTlCOztBQUVBLFVBQUtNLGFBQUwsR0FBcUIsSUFBckI7O0FBRUEsVUFBS3hCLFVBQUwsR0FBa0IsSUFBbEI7QUFUMEI7QUFVM0I7Ozs7O2tCQWJrQkosc0IiLCJmaWxlIjoiZWRpdGFibGUtanVuY3Rpb25zLWxheWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcbmltcG9ydCB7IHBvaW50IH0gZnJvbSAnQHR1cmYvaGVscGVycyc7XG5pbXBvcnQgTGF5ZXJNb3VzZUV2ZW50IGZyb20gJy4uL2xheWVyLW1vdXNlLWV2ZW50JztcbmltcG9ydCBKdW5jdGlvbnNMYXllciBmcm9tICcuL2p1bmN0aW9ucy1sYXllcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVkaXRhYmxlSnVuY3Rpb25zTGF5ZXIgZXh0ZW5kcyBKdW5jdGlvbnNMYXllciB7XG4gIF9lZGl0aW5nSWQ6ID9zdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBPYmplY3QpIHtcbiAgICBzdXBlcihjb25maWcpO1xuICAgIHRoaXMub24oJ21vdXNlZG93bicsIHRoaXMuX21vdXNlZG93bik7XG4gICAgdGhpcy5vbignbW91c2Vtb3ZlJywgdGhpcy5fbW91c2Vtb3ZlKTtcbiAgICB0aGlzLm9uKCdtb3VzZXVwJywgdGhpcy5fbW91c2V1cCk7XG4gICAgdGhpcy5vbignbWFwTW91c2VFdmVudCcsIHRoaXMuX21hcE1vdXNlRXZlbnQpO1xuXG4gICAgdGhpcy51c2VzTWFwRXZlbnRzID0gdHJ1ZTtcblxuICAgIHRoaXMuX2VkaXRpbmdJZCA9IG51bGw7XG4gIH1cblxuICBfbW91c2Vkb3duID0gKG5lYnVsYU1vdXNlRXZlbnQ6IExheWVyTW91c2VFdmVudCkgPT4ge1xuICAgIGlmICh0aGlzLl9lZGl0aW5nSWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgYWxsb3dTdGFydCA9IHRydWU7XG4gICAgY29uc3QgY2FuY2VsRWRpdCA9ICgpID0+IChhbGxvd1N0YXJ0ID0gZmFsc2UpO1xuICAgIHRoaXMuZW1pdCgnZWRpdFN0YXJ0JywgbmVidWxhTW91c2VFdmVudCwge1xuICAgICAgY2FuY2VsRWRpdCxcbiAgICAgIGlkOiBuZWJ1bGFNb3VzZUV2ZW50LmRhdGEuaWQsXG4gICAgICBvcmlnaW5hbDogbmVidWxhTW91c2VFdmVudC5kYXRhXG4gICAgfSk7XG5cbiAgICBpZiAoYWxsb3dTdGFydCkge1xuICAgICAgdGhpcy5fZWRpdGluZ0lkID0gbmVidWxhTW91c2VFdmVudC5kYXRhLmlkO1xuXG4gICAgICAvLyBwcmV2ZW50IGRyYWcgb2YgbWFwXG4gICAgICBuZWJ1bGFNb3VzZUV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICBfbW91c2Vtb3ZlID0gKG5lYnVsYU1vdXNlRXZlbnQ6IExheWVyTW91c2VFdmVudCkgPT4ge1xuICAgIGlmICh0aGlzLl9lZGl0aW5nSWQpIHtcbiAgICAgIGNvbnN0IGZlYXR1cmUgPSB0aGlzLmRlY2tDYWNoZS5nZXREZWNrT2JqZWN0QnlJZCh0aGlzLl9lZGl0aW5nSWQpO1xuICAgICAgaWYgKGZlYXR1cmUpIHtcbiAgICAgICAgZmVhdHVyZS5nZW9Kc29uID0gcG9pbnQobmVidWxhTW91c2VFdmVudC5ncm91bmRQb2ludCk7XG5cbiAgICAgICAgdGhpcy5lbWl0KCdlZGl0VXBkYXRlJywgbmVidWxhTW91c2VFdmVudCwge1xuICAgICAgICAgIGZlYXR1cmUsXG4gICAgICAgICAgaWQ6IHRoaXMuX2VkaXRpbmdJZCxcbiAgICAgICAgICBvcmlnaW5hbDogdGhpcy5kZWNrQ2FjaGUuZ2V0T3JpZ2luYWxCeUlkKCh0aGlzLl9lZGl0aW5nSWQ6IGFueSkpXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRlY2tDYWNoZS50cmlnZ2VyVXBkYXRlKCk7XG4gICAgICAgIG5lYnVsYU1vdXNlRXZlbnQubmVidWxhLmZvcmNlVXBkYXRlKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9tYXBNb3VzZUV2ZW50ID0gKG5lYnVsYU1vdXNlRXZlbnQ6IExheWVyTW91c2VFdmVudCkgPT4ge1xuICAgIGlmICh0aGlzLl9lZGl0aW5nSWQpIHtcbiAgICAgIGlmIChuZWJ1bGFNb3VzZUV2ZW50Lm5hdGl2ZUV2ZW50LnR5cGUgPT09ICdtb3VzZW1vdmUnKSB7XG4gICAgICAgIHRoaXMuX21vdXNlbW92ZShuZWJ1bGFNb3VzZUV2ZW50KTtcbiAgICAgIH0gZWxzZSBpZiAobmVidWxhTW91c2VFdmVudC5uYXRpdmVFdmVudC50eXBlID09PSAnbW91c2V1cCcpIHtcbiAgICAgICAgdGhpcy5fbW91c2V1cChuZWJ1bGFNb3VzZUV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX21vdXNldXAgPSAobmVidWxhTW91c2VFdmVudDogTGF5ZXJNb3VzZUV2ZW50KSA9PiB7XG4gICAgaWYgKHRoaXMuX2VkaXRpbmdJZCkge1xuICAgICAgY29uc3QgZmVhdHVyZSA9IHRoaXMuZGVja0NhY2hlLmdldERlY2tPYmplY3RCeUlkKHRoaXMuX2VkaXRpbmdJZCk7XG4gICAgICB0aGlzLmVtaXQoJ2VkaXRFbmQnLCBuZWJ1bGFNb3VzZUV2ZW50LCB7XG4gICAgICAgIGZlYXR1cmUsXG4gICAgICAgIGlkOiB0aGlzLl9lZGl0aW5nSWQsXG4gICAgICAgIG9yaWdpbmFsOiB0aGlzLmRlY2tDYWNoZS5nZXRPcmlnaW5hbEJ5SWQoKHRoaXMuX2VkaXRpbmdJZDogYW55KSlcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kZWNrQ2FjaGUudXBkYXRlRGVja09iamVjdHNCeUlkcyhbKHRoaXMuX2VkaXRpbmdJZDogYW55KV0pO1xuICAgICAgbmVidWxhTW91c2VFdmVudC5uZWJ1bGEuZm9yY2VVcGRhdGUoKTtcblxuICAgICAgdGhpcy5fZWRpdGluZ0lkID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG4iXX0=