'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EditableFeatureCollection = exports.EditableFeatureCollection = function () {
  function EditableFeatureCollection(featureCollection) {
    _classCallCheck(this, EditableFeatureCollection);

    this.featureCollection = featureCollection;
  }

  _createClass(EditableFeatureCollection, [{
    key: 'getObject',
    value: function getObject() {
      return this.featureCollection;
    }

    /**
     * Replaces the position deeply nested withing the given feature's geometry.
     * Works with Point, MultiPoint, LineString, MultiLineString, Polygon, and MultiPolygon.
     *
     * @param featureIndex The index of the feature to update
     * @param positionIndexes An array containing the indexes of the position to replace
     * @param updatedPosition The updated position to place in the result (i.e. [lng, lat])
     *
     * @returns A new `EditableFeatureCollection` with the given position replaced. Does not modify this `EditableFeatureCollection`.
     */

  }, {
    key: 'replacePosition',
    value: function replacePosition(featureIndex, positionIndexes, updatedPosition) {
      var featureToUpdate = this.featureCollection.features[featureIndex];
      var isPolygonal = featureToUpdate.geometry.type === 'Polygon' || featureToUpdate.geometry.type === 'MultiPolygon';

      var updatedCoordinates = immutablyReplacePosition(featureToUpdate.geometry.coordinates, positionIndexes, updatedPosition, isPolygonal);

      var updatedFeature = _extends({}, featureToUpdate, {
        geometry: _extends({}, featureToUpdate.geometry, {
          coordinates: updatedCoordinates
        })
      });

      // Immutably replace the feature being edited in the featureCollection
      var updatedFeatureCollection = _extends({}, this.featureCollection, {
        features: [].concat(_toConsumableArray(this.featureCollection.features.slice(0, featureIndex)), [updatedFeature], _toConsumableArray(this.featureCollection.features.slice(featureIndex + 1)))
      });

      return new EditableFeatureCollection(updatedFeatureCollection);
    }

    /**
     * Removes a position deeply nested in a GeoJSON geometry coordinates array.
     * Works with MultiPoint, LineString, MultiLineString, Polygon, and MultiPolygon.
     *
     * @param featureIndex The index of the feature to update
     * @param positionIndexes An array containing the indexes of the postion to remove
     *
     * @returns A new `EditableFeatureCollection` with the given coordinate removed. Does not modify this `EditableFeatureCollection`.
     */

  }, {
    key: 'removePosition',
    value: function removePosition(featureIndex, positionIndexes) {
      var featureToUpdate = this.featureCollection.features[featureIndex];
      if (featureToUpdate.geometry.type === 'Point') {
        throw Error('Can\'t remove a position from a Point or there\'d be nothing left');
      }
      if (featureToUpdate.geometry.type === 'MultiPoint' && featureToUpdate.geometry.coordinates.length < 2) {
        throw Error('Can\'t remove the last point of a MultiPoint or there\'d be nothing left');
      }
      var isPolygonal = featureToUpdate.geometry.type === 'Polygon' || featureToUpdate.geometry.type === 'MultiPolygon';

      var updatedCoordinates = immutablyRemovePosition(featureToUpdate.geometry.coordinates, positionIndexes, isPolygonal);

      var updatedGeometry = _extends({}, featureToUpdate.geometry, {
        coordinates: updatedCoordinates
      });

      // Handle cases where geometry type is "downgraded"
      downgradeGeometryIfNecessary(updatedGeometry);

      var updatedFeature = _extends({}, featureToUpdate, {
        geometry: updatedGeometry
      });

      // Immutably replace the feature being edited in the featureCollection
      var updatedFeatureCollection = _extends({}, this.featureCollection, {
        features: [].concat(_toConsumableArray(this.featureCollection.features.slice(0, featureIndex)), [updatedFeature], _toConsumableArray(this.featureCollection.features.slice(featureIndex + 1)))
      });

      return new EditableFeatureCollection(updatedFeatureCollection);
    }

    /**
     * Adds a position deeply nested in a GeoJSON geometry coordinates array.
     * Works with MultiPoint, LineString, MultiLineString, Polygon, and MultiPolygon.
     *
     * @param featureIndex The index of the feature to update
     * @param positionIndexes An array containing the indexes of the postion that will preceed the new position
     * @param positionToAdd The new position to place in the result (i.e. [lng, lat])
     *
     * @returns A new `EditableFeatureCollection` with the given coordinate removed. Does not modify this `EditableFeatureCollection`.
     */

  }, {
    key: 'addPosition',
    value: function addPosition(featureIndex, positionIndexes, positionToAdd) {
      var featureToUpdate = this.featureCollection.features[featureIndex];

      if (featureToUpdate.geometry.type === 'Point') {
        throw new Error('Unable to add a position to a Point feature');
      }

      var isPolygonal = featureToUpdate.geometry.type === 'Polygon' || featureToUpdate.geometry.type === 'MultiPolygon';

      var updatedCoordinates = immutablyAddPosition(featureToUpdate.geometry.coordinates, positionIndexes, positionToAdd, isPolygonal);

      var updatedFeature = _extends({}, featureToUpdate, {
        geometry: _extends({}, featureToUpdate.geometry, {
          coordinates: updatedCoordinates
        })
      });

      // Immutably replace the feature being edited in the featureCollection
      var updatedFeatureCollection = _extends({}, this.featureCollection, {
        features: [].concat(_toConsumableArray(this.featureCollection.features.slice(0, featureIndex)), [updatedFeature], _toConsumableArray(this.featureCollection.features.slice(featureIndex + 1)))
      });

      return new EditableFeatureCollection(updatedFeatureCollection);
    }
  }, {
    key: 'replaceGeometry',
    value: function replaceGeometry(featureIndex, geometry) {
      var updatedFeature = _extends({}, this.featureCollection.features[featureIndex], {
        geometry: geometry
      });
      var updatedFeatureCollection = _extends({}, this.featureCollection, {
        features: [].concat(_toConsumableArray(this.featureCollection.features.slice(0, featureIndex)), [updatedFeature], _toConsumableArray(this.featureCollection.features.slice(featureIndex + 1)))
      });
      return new EditableFeatureCollection(updatedFeatureCollection);
    }
  }, {
    key: 'addFeature',
    value: function addFeature(feature) {
      var updatedFeatureCollection = _extends({}, this.featureCollection, {
        features: [].concat(_toConsumableArray(this.featureCollection.features), [feature])
      });
      return new EditableFeatureCollection(updatedFeatureCollection);
    }

    /**
     * Returns a flat array of positions for the given feature along with their indexes into the feature's geometry's coordinates.
     *
     * @param featureIndex The index of the feature to get edit handles
     */

  }, {
    key: 'getEditHandles',
    value: function getEditHandles(featureIndex) {
      var handles = [];

      var geometry = this.featureCollection.features[featureIndex].geometry;

      switch (geometry.type) {
        case 'Point':
          // positions are not nested
          handles = [{
            position: geometry.coordinates,
            positionIndexes: [],
            featureIndex: featureIndex,
            type: 'existing'
          }];
          break;
        case 'MultiPoint':
        case 'LineString':
          // positions are nested 1 level
          var includeIntermediate = geometry.type !== 'MultiPoint';
          handles = handles.concat(_getEditHandles(geometry.coordinates, [], includeIntermediate, featureIndex));
          break;
        case 'Polygon':
        case 'MultiLineString':
          // positions are nested 2 levels
          for (var a = 0; a < geometry.coordinates.length; a++) {
            handles = handles.concat(_getEditHandles(geometry.coordinates[a], [a], true, featureIndex));
          }
          break;
        case 'MultiPolygon':
          // positions are nested 3 levels
          for (var _a = 0; _a < geometry.coordinates.length; _a++) {
            for (var b = 0; b < geometry.coordinates[_a].length; b++) {
              handles = handles.concat(_getEditHandles(geometry.coordinates[_a][b], [_a, b], true, featureIndex));
            }
          }
          break;
        default:
          throw Error('Unhandled geometry type: ' + geometry.type);
      }

      return handles;
    }
  }]);

  return EditableFeatureCollection;
}();

function immutablyReplacePosition(coordinates, positionIndexes, updatedPosition, isPolygonal) {
  if (!positionIndexes) {
    return coordinates;
  }
  if (positionIndexes.length === 0) {
    return updatedPosition;
  }
  if (positionIndexes.length === 1) {
    var updated = [].concat(_toConsumableArray(coordinates.slice(0, positionIndexes[0])), [updatedPosition], _toConsumableArray(coordinates.slice(positionIndexes[0] + 1)));

    if (isPolygonal && (positionIndexes[0] === 0 || positionIndexes[0] === coordinates.length - 1)) {
      // for polygons, the first point is repeated at the end of the array
      // so, update it on both ends of the array
      updated[0] = updatedPosition;
      updated[coordinates.length - 1] = updatedPosition;
    }
    return updated;
  }

  // recursively update inner array
  return [].concat(_toConsumableArray(coordinates.slice(0, positionIndexes[0])), [immutablyReplacePosition(coordinates[positionIndexes[0]], positionIndexes.slice(1, positionIndexes.length), updatedPosition, isPolygonal)], _toConsumableArray(coordinates.slice(positionIndexes[0] + 1)));
}

function immutablyRemovePosition(coordinates, positionIndexes, isPolygonal) {
  if (!positionIndexes) {
    return coordinates;
  }
  if (positionIndexes.length === 0) {
    throw Error('Must specify the index of the position to remove');
  }
  if (positionIndexes.length === 1) {
    var updated = [].concat(_toConsumableArray(coordinates.slice(0, positionIndexes[0])), _toConsumableArray(coordinates.slice(positionIndexes[0] + 1)));

    if (isPolygonal && (positionIndexes[0] === 0 || positionIndexes[0] === coordinates.length - 1)) {
      // for polygons, the first point is repeated at the end of the array
      // so, if the first/last coordinate is to be removed, coordinates[1] will be the new first/last coordinate
      if (positionIndexes[0] === 0) {
        // change the last to be the same as the first
        updated[updated.length - 1] = updated[0];
      } else if (positionIndexes[0] === coordinates.length - 1) {
        // change the first to be the same as the last
        updated[0] = updated[updated.length - 1];
      }
    }
    return updated;
  }

  // recursively update inner array
  return [].concat(_toConsumableArray(coordinates.slice(0, positionIndexes[0])), [immutablyRemovePosition(coordinates[positionIndexes[0]], positionIndexes.slice(1, positionIndexes.length), isPolygonal)], _toConsumableArray(coordinates.slice(positionIndexes[0] + 1)));
}

function immutablyAddPosition(coordinates, positionIndexes, positionToAdd, isPolygonal) {
  if (!positionIndexes) {
    return coordinates;
  }
  if (positionIndexes.length === 0) {
    throw Error('Must specify the index of the position to remove');
  }
  if (positionIndexes.length === 1) {
    if (isPolygonal && (positionIndexes[0] < 1 || positionIndexes[0] > coordinates.length - 1)) {
      // TODO: test this case
      throw Error('Invalid position index for polygon: ' + positionIndexes[0] + '. Points must be added to a Polygon between the first and last point.');
    }
    var updated = [].concat(_toConsumableArray(coordinates.slice(0, positionIndexes[0])), [positionToAdd], _toConsumableArray(coordinates.slice(positionIndexes[0])));
    return updated;
  }

  // recursively update inner array
  return [].concat(_toConsumableArray(coordinates.slice(0, positionIndexes[0])), [immutablyAddPosition(coordinates[positionIndexes[0]], positionIndexes.slice(1, positionIndexes.length), positionToAdd, isPolygonal)], _toConsumableArray(coordinates.slice(positionIndexes[0] + 1)));
}

function downgradeGeometryIfNecessary(geometry) {
  switch (geometry.type) {
    case 'LineString':
      downgradeLineStringIfNecessary(geometry);
      break;
    case 'Polygon':
      downgradePolygonIfNecessary(geometry);
      break;
    case 'MultiLineString':
      downgradeMultiLineStringIfNecessary(geometry);
      break;
    case 'MultiPolygon':
      downgradeMultiPolygonIfNecessary(geometry);
      break;
    default:
      // Not downgradable
      break;
  }
}

function downgradeLineStringIfNecessary(geometry) {
  if (geometry.coordinates.length === 1) {
    // Only one position left, so convert to a Point
    geometry.type = 'Point';
    geometry.coordinates = geometry.coordinates[0];
  }
}

function downgradePolygonIfNecessary(geometry) {
  var polygon = geometry.coordinates;
  var outerRing = polygon[0];
  // If the outer ring is no longer a polygon, convert the whole thing to a LineString
  if (outerRing.length <= 3) {
    geometry.type = 'LineString';
    geometry.coordinates = outerRing.slice(0, outerRing.length - 1);
    return;
  }

  // If any hole is no longer a polygon, remove the hole entirely
  for (var holeIndex = 1; holeIndex < polygon.length; holeIndex++) {
    if (removeHoleIfNecessary(polygon, holeIndex)) {
      // It was removed, so keep the index the same
      holeIndex--;
    }
  }
}

function downgradeMultiLineStringIfNecessary(geometry) {
  if (geometry.coordinates.length === 1 && geometry.coordinates[0].length === 1) {
    // Only one position left, so convert to a Point
    geometry.type = 'Point';
    geometry.coordinates = geometry.coordinates[0][0];
    return;
  }
  for (var lineStringIndex = 0; lineStringIndex < geometry.coordinates.length; lineStringIndex++) {
    var lineString = geometry.coordinates[lineStringIndex];
    if (lineString.length === 1) {
      // Only a single position left on this LineString, so remove it (can't have Point in MultiLineString)
      geometry.coordinates.splice(lineStringIndex, 1);
      // Keep the index the same
      lineStringIndex--;
    }
  }
}

function downgradeMultiPolygonIfNecessary(geometry) {
  if (geometry.coordinates.length === 1) {
    var outerRing = geometry.coordinates[0][0];
    if (outerRing.length <= 3) {
      geometry.type = 'LineString';
      geometry.coordinates = outerRing.slice(0, outerRing.length - 1);
      return;
    }
  }
  for (var polygonIndex = 0; polygonIndex < geometry.coordinates.length; polygonIndex++) {
    var polygon = geometry.coordinates[polygonIndex];
    var _outerRing = polygon[0];

    // If the outer ring is no longer a polygon, remove the whole polygon
    if (_outerRing.length <= 3) {
      geometry.coordinates.splice(polygonIndex, 1);
      // It was removed, so keep the index the same
      polygonIndex--;
    }

    for (var holeIndex = 1; holeIndex < polygon.length; holeIndex++) {
      if (removeHoleIfNecessary(polygon, holeIndex)) {
        // It was removed, so keep the index the same
        holeIndex--;
      }
    }
  }
}

function removeHoleIfNecessary(polygon, holeIndex) {
  var hole = polygon[holeIndex];
  if (hole.length <= 3) {
    polygon.splice(holeIndex, 1);
    return true;
  }
  return false;
}

function getIntermediatePosition(position1, position2) {
  var intermediatePosition = [];
  for (var dimension = 0; dimension < position1.length; dimension++) {
    intermediatePosition.push((position1[dimension] + position2[dimension]) / 2.0);
  }
  return intermediatePosition;
}

function _getEditHandles(coordinates, positionIndexPrefix, includeIntermediate, featureIndex) {
  var editHandles = [];
  for (var i = 0; i < coordinates.length; i++) {
    var position = coordinates[i];
    editHandles.push({
      position: position,
      positionIndexes: [].concat(_toConsumableArray(positionIndexPrefix), [i]),
      featureIndex: featureIndex,
      type: 'existing'
    });

    if (includeIntermediate && i < coordinates.length - 1) {
      // add intermediate position after every position except the last one
      var nextPosition = coordinates[i + 1];
      editHandles.push({
        position: getIntermediatePosition(position, nextPosition),
        positionIndexes: [].concat(_toConsumableArray(positionIndexPrefix), [i + 1]),
        featureIndex: featureIndex,
        type: 'intermediate'
      });
    }
  }
  return editHandles;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,