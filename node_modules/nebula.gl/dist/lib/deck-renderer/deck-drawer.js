'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SELECTION_TYPE = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deck = require('deck.gl');

var _helpers = require('@turf/helpers');

var _bbox = require('@turf/bbox');

var _bbox2 = _interopRequireDefault(_bbox);

var _bboxPolygon = require('@turf/bbox-polygon');

var _bboxPolygon2 = _interopRequireDefault(_bboxPolygon);

var _buffer = require('@turf/buffer');

var _buffer2 = _interopRequireDefault(_buffer);

var _difference = require('@turf/difference');

var _difference2 = _interopRequireDefault(_difference);

var _distance = require('@turf/distance');

var _distance2 = _interopRequireDefault(_distance);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var POLYGON_LINE_COLOR = [0, 255, 0, 255];
var POLYGON_FILL_COLOR = [255, 255, 255, 90];
var POLYGON_LINE_WIDTH = 2;
var POLYGON_DASHES = [20, 20];
var POLYGON_THRESHOLD = 0.01;
var EXPANSION_KM = 10;
var LAYER_ID_VIEW = 'DeckDrawerView';
var LAYER_ID_PICK = 'DeckDrawerPick';

var SELECTION_TYPE = exports.SELECTION_TYPE = {
  NONE: 0,
  RECTANGLE: 1,
  POLYGON: 2
};

var DeckDrawer = function () {
  function DeckDrawer(nebula) {
    var _this = this;

    _classCallCheck(this, DeckDrawer);

    this._getPolygon = function (o) {
      var coordsToLngLatOffset = _this.nebula.projector.coordsToLngLatOffset;


      if (Array.isArray(o.polygon[0][0])) {
        // complex polygon with holes
        return o.polygon.map(function (a) {
          return a.map(coordsToLngLatOffset);
        });
      }

      // simple polygon
      return o.polygon.map(coordsToLngLatOffset);
    };

    this.nebula = nebula;
    this.usePolygon = false;
    this.landPoints = [];
    this.mousePoints = [];
  }

  _createClass(DeckDrawer, [{
    key: '_getLayerIds',
    value: function _getLayerIds() {
      // TODO: sort by mouse priority
      return this.nebula.deckgl.props.layers.filter(function (l) {
        return l && l.props && l.props.nebulaLayer && l.props.nebulaLayer.enableSelection;
      }).map(function (l) {
        return l.id;
      });
    }
  }, {
    key: '_selectFromPickingInfos',
    value: function _selectFromPickingInfos(pickingInfos) {
      var objects = pickingInfos.map(function (_ref) {
        var layer = _ref.layer,
            index = _ref.index,
            object = _ref.object;
        return object.original || layer.props.nebulaLayer.deckCache.originals[index];
      });
      this.nebula.props.onSelection(objects);
    }
  }, {
    key: '_getBoundingBox',
    value: function _getBoundingBox() {
      var mousePoints = this.mousePoints;

      var allX = mousePoints.map(function (mousePoint) {
        return mousePoint[0];
      });
      var allY = mousePoints.map(function (mousePoint) {
        return mousePoint[1];
      });
      var x = Math.min.apply(Math, _toConsumableArray(allX));
      var y = Math.min.apply(Math, _toConsumableArray(allY));
      var maxX = Math.max.apply(Math, _toConsumableArray(allX));
      var maxY = Math.max.apply(Math, _toConsumableArray(allY));

      return { x: x, y: y, width: maxX - x, height: maxY - y };
    }
  }, {
    key: '_selectRectangleObjects',
    value: function _selectRectangleObjects() {
      if (this.landPoints.length !== 2) return;

      var _mousePoints$ = _slicedToArray(this.mousePoints[0], 2),
          x1 = _mousePoints$[0],
          y1 = _mousePoints$[1];

      var _mousePoints$2 = _slicedToArray(this.mousePoints[1], 2),
          x2 = _mousePoints$2[0],
          y2 = _mousePoints$2[1];

      var pickingInfos = this.nebula.deckgl.queryVisibleObjects({
        x: Math.min(x1, x2),
        y: Math.min(y1, y2),
        width: Math.abs(x2 - x1),
        height: Math.abs(y2 - y1),
        layerIds: this._getLayerIds()
      });

      this._selectFromPickingInfos(pickingInfos);
    }
  }, {
    key: '_selectPolygonObjects',
    value: function _selectPolygonObjects() {
      var pickingInfos = this.nebula.deckgl.queryVisibleObjects(_extends({}, this._getBoundingBox(), {
        layerIds: [LAYER_ID_PICK].concat(_toConsumableArray(this._getLayerIds()))
      }));

      this._selectFromPickingInfos(pickingInfos.filter(function (item) {
        return item.layer.id !== LAYER_ID_PICK;
      }));
    }
  }, {
    key: '_getMousePosFromEvent',
    value: function _getMousePosFromEvent(event) {
      var offsetX = event.offsetX,
          offsetY = event.offsetY;

      return [offsetX, offsetY];
    }
  }, {
    key: 'handleEvent',
    value: function handleEvent(event, lngLat, selectionType) {
      // capture all events (mouse-up is needed to prevent us stuck in moving map)
      if (event.type !== 'mouseup') event.stopPropagation();

      this.usePolygon = selectionType === SELECTION_TYPE.POLYGON;

      var redraw = false;
      var deactivate = false;

      var usePolygon = this.usePolygon,
          landPoints = this.landPoints,
          mousePoints = this.mousePoints;


      if (event.type === 'mousedown') {
        if (usePolygon && landPoints.length) {
          // if landPoints.length is zero we want to insert two points (so we let it run the else)
          // also don't insert if polygon is invalid
          if (this.landPoints.length < 3 || this.validPolygon) {
            landPoints.push(lngLat);
            mousePoints.push(this._getMousePosFromEvent(event));
          }
        } else {
          this.landPoints = [lngLat, lngLat];
          var m = this._getMousePosFromEvent(event);
          this.mousePoints = [m, m];
        }
        redraw = true;
      } else if (event.type === 'mousemove' && landPoints.length) {
        // update last point
        landPoints[landPoints.length - 1] = lngLat;
        mousePoints[mousePoints.length - 1] = this._getMousePosFromEvent(event);
        redraw = true;
      } else if (event.type === 'mouseup') {
        if (usePolygon) {
          // check to see if completed
          // TODO: Maybe double-click to finish?
          if (landPoints.length > 4 && (0, _distance2.default)(landPoints[0], landPoints[landPoints.length - 1]) < POLYGON_THRESHOLD && this.validPolygon) {
            this._selectPolygonObjects();
            this.reset();
            redraw = true;
            deactivate = true;
          }
        } else {
          this._selectRectangleObjects();
          this.reset();
          redraw = true;
          deactivate = true;
        }
      }

      return { redraw: redraw, deactivate: deactivate };
    }
  }, {
    key: 'reset',
    value: function reset() {
      this.landPoints = [];
      this.mousePoints = [];
    }
  }, {
    key: '_makeStartPointHighlight',
    value: function _makeStartPointHighlight(center) {
      var buffer = (0, _buffer2.default)((0, _helpers.point)(center), POLYGON_THRESHOLD / 4.0);
      return (0, _bboxPolygon2.default)((0, _bbox2.default)(buffer)).geometry.coordinates;
    }
  }, {
    key: 'render',
    value: function render() {
      var data = [];
      var dataPick = [];

      if (!this.usePolygon && this.landPoints.length === 2) {
        var _landPoints$ = _slicedToArray(this.landPoints[0], 2),
            x1 = _landPoints$[0],
            y1 = _landPoints$[1];

        var _landPoints$2 = _slicedToArray(this.landPoints[1], 2),
            x2 = _landPoints$2[0],
            y2 = _landPoints$2[1];

        var selPolygon = [[x1, y1], [x1, y2], [x2, y2], [x2, y1], [x1, y1]];
        data.push({
          polygon: selPolygon,
          lineColor: POLYGON_LINE_COLOR,
          fillColor: POLYGON_FILL_COLOR
        });
      } else if (this.usePolygon && this.landPoints.length) {
        data.push({
          polygon: this.landPoints,
          lineColor: POLYGON_LINE_COLOR,
          fillColor: POLYGON_FILL_COLOR
        });

        // Hack: use a polygon to hide the outside, because queryVisibleObjects()
        // does not support polygons
        if (this.landPoints.length >= 3) {
          var landPointsPoly = (0, _helpers.polygon)([[].concat(_toConsumableArray(this.landPoints), [this.landPoints[0]])]);
          var bigBuffer = (0, _buffer2.default)((0, _helpers.point)(this.landPoints[0]), EXPANSION_KM);
          var bigPolygon = void 0;
          try {
            // turfDifference throws an exception if the polygon
            // intersects with itself
            bigPolygon = (0, _difference2.default)(bigBuffer, landPointsPoly);
            dataPick.push({
              polygon: bigPolygon.geometry.coordinates,
              fillColor: [0, 0, 0, 1]
            });
            this.validPolygon = true;
          } catch (e) {
            // invalid selection polygon
            this.validPolygon = false;
          }
        }
      }

      if (this.landPoints.length) {
        // highlight start point
        data.push({
          polygon: this._makeStartPointHighlight(this.landPoints[0]),
          lineColor: [0, 0, 0, 0],
          fillColor: POLYGON_LINE_COLOR
        });
      }

      // Hack to make the PolygonLayer() stay active,
      // otherwise it takes 3 seconds (!) to init!
      // TODO: fix this
      data.push({ polygon: [[0, 0]] });
      dataPick.push({ polygon: [[0, 0]] });

      return [new _deck.PolygonLayer({
        id: LAYER_ID_VIEW,
        data: data,
        fp64: false,
        opacity: 1.0,
        pickable: false,
        lineWidthMinPixels: POLYGON_LINE_WIDTH,
        lineWidthMaxPixels: POLYGON_LINE_WIDTH,
        lineDashJustified: true,
        getLineDashArray: function getLineDashArray(x) {
          return POLYGON_DASHES;
        },
        coordinateSystem: _deck.COORDINATE_SYSTEM.LNGLAT_OFFSETS,
        coordinateOrigin: this.nebula.projector.lngLat,
        getPolygon: this._getPolygon
      }), new _deck.PolygonLayer({
        id: LAYER_ID_PICK,
        data: dataPick,
        fp64: false,
        opacity: 1.0,
        stroked: false,
        pickable: true,
        coordinateSystem: _deck.COORDINATE_SYSTEM.LNGLAT_OFFSETS,
        coordinateOrigin: this.nebula.projector.lngLat,
        getPolygon: this._getPolygon
      })];
    }
  }]);

  return DeckDrawer;
}();

exports.default = DeckDrawer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,