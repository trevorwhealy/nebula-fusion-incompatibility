"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = extractJSXLayers;

var _react = _interopRequireWildcard(require("react"));

var _inheritsFrom = require("./inherits-from");

var _core = require("@deck.gl/core");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

// recursively wrap render callbacks in `View`
function wrapInView(node) {
  if (!node) {
    return node;
  }

  if (typeof node === 'function') {
    // React.Children does not traverse functions.
    // All render callbacks must be protected under a <View>
    return (0, _react.createElement)(_core.View, {}, node);
  }

  if (Array.isArray(node)) {
    return node.map(wrapInView);
  }

  if ((0, _inheritsFrom.inheritsFrom)(node.type, _core.View)) {
    return node;
  }

  return node;
} // extracts any deck.gl layers masquerading as react elements from props.children


function extractJSXLayers(_ref) {
  var children = _ref.children,
      layers = _ref.layers,
      views = _ref.views;
  var reactChildren = []; // extract real react elements (i.e. not deck.gl layers)

  var jsxLayers = []; // extracted layer from react children, will add to deck.gl layer array

  var jsxViews = {}; // React.children

  _react.default.Children.forEach(wrapInView(children), function (reactElement) {
    if (reactElement) {
      // For some reason Children.forEach doesn't filter out `null`s
      var ElementType = reactElement.type;

      if ((0, _inheritsFrom.inheritsFrom)(ElementType, _core.Layer)) {
        var layer = new ElementType(reactElement.props);
        jsxLayers.push(layer);
      } else {
        reactChildren.push(reactElement);
      } // empty id => default view


      if (ElementType !== _core.View && (0, _inheritsFrom.inheritsFrom)(ElementType, _core.View) && reactElement.props.id) {
        var view = new ElementType(reactElement.props);
        jsxViews[view.id] = view;
      }
    }
  }); // Avoid modifying views if no JSX views were found


  if (Object.keys(jsxViews).length > 0) {
    // If a view is specified in both views prop and JSX, use the one in views
    if (Array.isArray(views)) {
      views.forEach(function (view) {
        jsxViews[view.id] = view;
      });
    } else if (views) {
      jsxViews[views.id] = views;
    }

    views = Object.values(jsxViews);
  } // Avoid modifying layers array if no JSX layers were found


  layers = jsxLayers.length > 0 ? jsxLayers.concat(_toConsumableArray(layers)) : layers;
  return {
    layers: layers,
    children: reactChildren,
    views: views
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9leHRyYWN0LWpzeC1sYXllcnMuanMiXSwibmFtZXMiOlsid3JhcEluVmlldyIsIm5vZGUiLCJWaWV3IiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwidHlwZSIsImV4dHJhY3RKU1hMYXllcnMiLCJjaGlsZHJlbiIsImxheWVycyIsInZpZXdzIiwicmVhY3RDaGlsZHJlbiIsImpzeExheWVycyIsImpzeFZpZXdzIiwiUmVhY3QiLCJDaGlsZHJlbiIsImZvckVhY2giLCJyZWFjdEVsZW1lbnQiLCJFbGVtZW50VHlwZSIsIkxheWVyIiwibGF5ZXIiLCJwcm9wcyIsInB1c2giLCJpZCIsInZpZXciLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwidmFsdWVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7OztBQUVBO0FBQ0EsU0FBU0EsVUFBVCxDQUFvQkMsSUFBcEIsRUFBMEI7QUFDeEIsTUFBSSxDQUFDQSxJQUFMLEVBQVc7QUFDVCxXQUFPQSxJQUFQO0FBQ0Q7O0FBQ0QsTUFBSSxPQUFPQSxJQUFQLEtBQWdCLFVBQXBCLEVBQWdDO0FBQzlCO0FBQ0E7QUFDQSxXQUFPLDBCQUFjQyxVQUFkLEVBQW9CLEVBQXBCLEVBQXdCRCxJQUF4QixDQUFQO0FBQ0Q7O0FBQ0QsTUFBSUUsTUFBTUMsT0FBTixDQUFjSCxJQUFkLENBQUosRUFBeUI7QUFDdkIsV0FBT0EsS0FBS0ksR0FBTCxDQUFTTCxVQUFULENBQVA7QUFDRDs7QUFDRCxNQUFJLGdDQUFhQyxLQUFLSyxJQUFsQixFQUF3QkosVUFBeEIsQ0FBSixFQUFtQztBQUNqQyxXQUFPRCxJQUFQO0FBQ0Q7O0FBQ0QsU0FBT0EsSUFBUDtBQUNELEMsQ0FFRDs7O0FBQ2UsU0FBU00sZ0JBQVQsT0FBcUQ7QUFBQSxNQUExQkMsUUFBMEIsUUFBMUJBLFFBQTBCO0FBQUEsTUFBaEJDLE1BQWdCLFFBQWhCQSxNQUFnQjtBQUFBLE1BQVJDLEtBQVEsUUFBUkEsS0FBUTtBQUNsRSxNQUFNQyxnQkFBZ0IsRUFBdEIsQ0FEa0UsQ0FDeEM7O0FBQzFCLE1BQU1DLFlBQVksRUFBbEIsQ0FGa0UsQ0FFNUM7O0FBQ3RCLE1BQU1DLFdBQVcsRUFBakIsQ0FIa0UsQ0FLbEU7O0FBQ0FDLGlCQUFNQyxRQUFOLENBQWVDLE9BQWYsQ0FBdUJoQixXQUFXUSxRQUFYLENBQXZCLEVBQTZDLHdCQUFnQjtBQUMzRCxRQUFJUyxZQUFKLEVBQWtCO0FBQ2hCO0FBQ0EsVUFBTUMsY0FBY0QsYUFBYVgsSUFBakM7O0FBQ0EsVUFBSSxnQ0FBYVksV0FBYixFQUEwQkMsV0FBMUIsQ0FBSixFQUFzQztBQUNwQyxZQUFNQyxRQUFRLElBQUlGLFdBQUosQ0FBZ0JELGFBQWFJLEtBQTdCLENBQWQ7QUFDQVQsa0JBQVVVLElBQVYsQ0FBZUYsS0FBZjtBQUNELE9BSEQsTUFHTztBQUNMVCxzQkFBY1csSUFBZCxDQUFtQkwsWUFBbkI7QUFDRCxPQVJlLENBVWhCOzs7QUFDQSxVQUFJQyxnQkFBZ0JoQixVQUFoQixJQUF3QixnQ0FBYWdCLFdBQWIsRUFBMEJoQixVQUExQixDQUF4QixJQUEyRGUsYUFBYUksS0FBYixDQUFtQkUsRUFBbEYsRUFBc0Y7QUFDcEYsWUFBTUMsT0FBTyxJQUFJTixXQUFKLENBQWdCRCxhQUFhSSxLQUE3QixDQUFiO0FBQ0FSLGlCQUFTVyxLQUFLRCxFQUFkLElBQW9CQyxJQUFwQjtBQUNEO0FBQ0Y7QUFDRixHQWpCRCxFQU5rRSxDQXlCbEU7OztBQUNBLE1BQUlDLE9BQU9DLElBQVAsQ0FBWWIsUUFBWixFQUFzQmMsTUFBdEIsR0FBK0IsQ0FBbkMsRUFBc0M7QUFDcEM7QUFDQSxRQUFJeEIsTUFBTUMsT0FBTixDQUFjTSxLQUFkLENBQUosRUFBMEI7QUFDeEJBLFlBQU1NLE9BQU4sQ0FBYyxnQkFBUTtBQUNwQkgsaUJBQVNXLEtBQUtELEVBQWQsSUFBb0JDLElBQXBCO0FBQ0QsT0FGRDtBQUdELEtBSkQsTUFJTyxJQUFJZCxLQUFKLEVBQVc7QUFDaEJHLGVBQVNILE1BQU1hLEVBQWYsSUFBcUJiLEtBQXJCO0FBQ0Q7O0FBQ0RBLFlBQVFlLE9BQU9HLE1BQVAsQ0FBY2YsUUFBZCxDQUFSO0FBQ0QsR0FwQ2lFLENBc0NsRTs7O0FBQ0FKLFdBQVNHLFVBQVVlLE1BQVYsR0FBbUIsQ0FBbkIsR0FBMkJmLFNBQTNCLDJCQUF5Q0gsTUFBekMsS0FBbURBLE1BQTVEO0FBRUEsU0FBTztBQUFDQSxrQkFBRDtBQUFTRCxjQUFVRyxhQUFuQjtBQUFrQ0Q7QUFBbEMsR0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7Y3JlYXRlRWxlbWVudH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtpbmhlcml0c0Zyb219IGZyb20gJy4vaW5oZXJpdHMtZnJvbSc7XG5pbXBvcnQge0xheWVyLCBWaWV3fSBmcm9tICdAZGVjay5nbC9jb3JlJztcblxuLy8gcmVjdXJzaXZlbHkgd3JhcCByZW5kZXIgY2FsbGJhY2tzIGluIGBWaWV3YFxuZnVuY3Rpb24gd3JhcEluVmlldyhub2RlKSB7XG4gIGlmICghbm9kZSkge1xuICAgIHJldHVybiBub2RlO1xuICB9XG4gIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFJlYWN0LkNoaWxkcmVuIGRvZXMgbm90IHRyYXZlcnNlIGZ1bmN0aW9ucy5cbiAgICAvLyBBbGwgcmVuZGVyIGNhbGxiYWNrcyBtdXN0IGJlIHByb3RlY3RlZCB1bmRlciBhIDxWaWV3PlxuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KFZpZXcsIHt9LCBub2RlKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShub2RlKSkge1xuICAgIHJldHVybiBub2RlLm1hcCh3cmFwSW5WaWV3KTtcbiAgfVxuICBpZiAoaW5oZXJpdHNGcm9tKG5vZGUudHlwZSwgVmlldykpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cblxuLy8gZXh0cmFjdHMgYW55IGRlY2suZ2wgbGF5ZXJzIG1hc3F1ZXJhZGluZyBhcyByZWFjdCBlbGVtZW50cyBmcm9tIHByb3BzLmNoaWxkcmVuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRyYWN0SlNYTGF5ZXJzKHtjaGlsZHJlbiwgbGF5ZXJzLCB2aWV3c30pIHtcbiAgY29uc3QgcmVhY3RDaGlsZHJlbiA9IFtdOyAvLyBleHRyYWN0IHJlYWwgcmVhY3QgZWxlbWVudHMgKGkuZS4gbm90IGRlY2suZ2wgbGF5ZXJzKVxuICBjb25zdCBqc3hMYXllcnMgPSBbXTsgLy8gZXh0cmFjdGVkIGxheWVyIGZyb20gcmVhY3QgY2hpbGRyZW4sIHdpbGwgYWRkIHRvIGRlY2suZ2wgbGF5ZXIgYXJyYXlcbiAgY29uc3QganN4Vmlld3MgPSB7fTtcblxuICAvLyBSZWFjdC5jaGlsZHJlblxuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKHdyYXBJblZpZXcoY2hpbGRyZW4pLCByZWFjdEVsZW1lbnQgPT4ge1xuICAgIGlmIChyZWFjdEVsZW1lbnQpIHtcbiAgICAgIC8vIEZvciBzb21lIHJlYXNvbiBDaGlsZHJlbi5mb3JFYWNoIGRvZXNuJ3QgZmlsdGVyIG91dCBgbnVsbGBzXG4gICAgICBjb25zdCBFbGVtZW50VHlwZSA9IHJlYWN0RWxlbWVudC50eXBlO1xuICAgICAgaWYgKGluaGVyaXRzRnJvbShFbGVtZW50VHlwZSwgTGF5ZXIpKSB7XG4gICAgICAgIGNvbnN0IGxheWVyID0gbmV3IEVsZW1lbnRUeXBlKHJlYWN0RWxlbWVudC5wcm9wcyk7XG4gICAgICAgIGpzeExheWVycy5wdXNoKGxheWVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlYWN0Q2hpbGRyZW4ucHVzaChyZWFjdEVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICAvLyBlbXB0eSBpZCA9PiBkZWZhdWx0IHZpZXdcbiAgICAgIGlmIChFbGVtZW50VHlwZSAhPT0gVmlldyAmJiBpbmhlcml0c0Zyb20oRWxlbWVudFR5cGUsIFZpZXcpICYmIHJlYWN0RWxlbWVudC5wcm9wcy5pZCkge1xuICAgICAgICBjb25zdCB2aWV3ID0gbmV3IEVsZW1lbnRUeXBlKHJlYWN0RWxlbWVudC5wcm9wcyk7XG4gICAgICAgIGpzeFZpZXdzW3ZpZXcuaWRdID0gdmlldztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIC8vIEF2b2lkIG1vZGlmeWluZyB2aWV3cyBpZiBubyBKU1ggdmlld3Mgd2VyZSBmb3VuZFxuICBpZiAoT2JqZWN0LmtleXMoanN4Vmlld3MpLmxlbmd0aCA+IDApIHtcbiAgICAvLyBJZiBhIHZpZXcgaXMgc3BlY2lmaWVkIGluIGJvdGggdmlld3MgcHJvcCBhbmQgSlNYLCB1c2UgdGhlIG9uZSBpbiB2aWV3c1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZpZXdzKSkge1xuICAgICAgdmlld3MuZm9yRWFjaCh2aWV3ID0+IHtcbiAgICAgICAganN4Vmlld3Nbdmlldy5pZF0gPSB2aWV3O1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh2aWV3cykge1xuICAgICAganN4Vmlld3Nbdmlld3MuaWRdID0gdmlld3M7XG4gICAgfVxuICAgIHZpZXdzID0gT2JqZWN0LnZhbHVlcyhqc3hWaWV3cyk7XG4gIH1cblxuICAvLyBBdm9pZCBtb2RpZnlpbmcgbGF5ZXJzIGFycmF5IGlmIG5vIEpTWCBsYXllcnMgd2VyZSBmb3VuZFxuICBsYXllcnMgPSBqc3hMYXllcnMubGVuZ3RoID4gMCA/IFsuLi5qc3hMYXllcnMsIC4uLmxheWVyc10gOiBsYXllcnM7XG5cbiAgcmV0dXJuIHtsYXllcnMsIGNoaWxkcmVuOiByZWFjdENoaWxkcmVuLCB2aWV3c307XG59XG4iXX0=