import React from 'react';
import path from 'path';
import { createPlugin } from 'fusion-core';
import { Provider, DebugEngine, styled, withStyle, withStyleDeep, withTransform, withWrapper } from 'styletron-react';
export { styled, withStyle, withStyleDeep, withTransform, withWrapper } from 'styletron-react';
import { Client } from 'styletron-engine-atomic';

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
/**
 * Provides styletron instance via old context API
 */

class LegacyStyletronProvider extends React.Component {
  getChildContext() {
    return {
      styletron: this.styletron
    };
  } // $FlowFixMe


  constructor(props, context) {
    super(props, context);
    this.styletron = props.value;
  }

  render() {
    return React.Children.only(this.props.children);
  }

}

LegacyStyletronProvider.childContextTypes = {
  styletron: noop
};
function noop() {}

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
// $FlowFixMe
const injectDeclarationCompatMixin = Base => class extends Base {
  // $FlowFixMe
  injectDeclaration({
    prop,
    val,
    media,
    pseudo
  }) {
    let style = {
      [prop]: val
    };

    if (pseudo) {
      style = {
        [pseudo]: style
      };
    }

    if (media) {
      style = {
        [media]: style
      };
    }

    return this.renderStyle(style);
  }

};

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
const workerRoute = '/__styletron_debugger_worker.js';
const wasmRoute = '/__styletron_debugger_mappings.wasm';

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env node */
let workerPath;
let wasmPath;

if (process.env.NODE_ENV !== "production" && false) {
  const base = path.dirname(require.resolve('css-to-js-sourcemap-worker'));
  workerPath = path.resolve(base, 'worker.js');
  wasmPath = path.resolve(base, 'mappings.wasm');
}

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env browser */

/* global module */
const StyletronCompat$1 = injectDeclarationCompatMixin(Client);
let debugEngine;
let engine;
const plugin$2 = true && createPlugin({
  middleware: () => (ctx, next) => {
    if (ctx.element) {
      if (!engine) {
        engine = new StyletronCompat$1({
          hydrate: document.getElementsByClassName('_styletron_hydrate_')
        });
      }

      if (process.env.NODE_ENV !== "production" && !debugEngine && typeof Worker !== 'undefined') {
        const worker = new Worker(workerRoute);
        worker.postMessage({
          id: 'init_wasm',
          url: wasmRoute
        });
        worker.postMessage({
          id: 'set_render_interval',
          interval: 180
        }); // $FlowFixMe

        if (module.hot) {
          // $FlowFixMe
          module.hot.addStatusHandler(status => {
            if (status === 'dispose') {
              worker.postMessage({
                id: 'invalidate'
              });
            }
          });
        }

        debugEngine = new DebugEngine(worker);
      }

      ctx.element = React.createElement(Provider, {
        value: engine,
        debug: debugEngine,
        debugAfterHydration: Boolean(debugEngine)
      }, React.createElement(LegacyStyletronProvider, {
        value: engine
      }, ctx.element));
    }

    return next();
  }
});

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env browser */
var index = plugin$2;

export default index;
//# sourceMappingURL=browser.es2017.es.js.map
