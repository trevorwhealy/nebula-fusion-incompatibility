'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var path = _interopDefault(require('path'));
var fs = _interopDefault(require('fs'));
var fusionCore = require('fusion-core');
var styletronReact = require('styletron-react');
var styletronEngineAtomic = require('styletron-engine-atomic');

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
/**
 * Provides styletron instance via old context API
 */

class LegacyStyletronProvider extends React.Component {
  getChildContext() {
    return {
      styletron: this.styletron
    };
  } // $FlowFixMe


  constructor(props, context) {
    super(props, context);
    this.styletron = props.value;
  }

  render() {
    return React.Children.only(this.props.children);
  }

}

LegacyStyletronProvider.childContextTypes = {
  styletron: noop
};
function noop() {}

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
// $FlowFixMe
const injectDeclarationCompatMixin = Base => class extends Base {
  // $FlowFixMe
  injectDeclaration({
    prop,
    val,
    media,
    pseudo
  }) {
    let style = {
      [prop]: val
    };

    if (pseudo) {
      style = {
        [pseudo]: style
      };
    }

    if (media) {
      style = {
        [media]: style
      };
    }

    return this.renderStyle(style);
  }

};

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
const workerRoute = '/__styletron_debugger_worker.js';
const wasmRoute = '/__styletron_debugger_mappings.wasm';

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env node */
let workerPath;
let wasmPath;

if (process.env.NODE_ENV !== "production" && true) {
  const base = path.dirname(require.resolve('css-to-js-sourcemap-worker'));
  workerPath = path.resolve(base, 'worker.js');
  wasmPath = path.resolve(base, 'mappings.wasm');
}

const StyletronCompat = injectDeclarationCompatMixin(styletronEngineAtomic.Server);
const plugin = true && fusionCore.createPlugin({
  middleware: () => (ctx, next) => {
    if (process.env.NODE_ENV !== "production") {
      if (ctx.url === workerRoute) {
        ctx.body = fs.createReadStream(workerPath);
        return next();
      }

      if (ctx.url === wasmRoute) {
        ctx.body = fs.createReadStream(wasmPath);
        return next();
      }
    }

    if (ctx.element) {
      const engine = new StyletronCompat();
      ctx.element = React.createElement(styletronReact.Provider, {
        value: engine
      }, React.createElement(LegacyStyletronProvider, {
        value: engine
      }, ctx.element));
      return next().then(() => {
        const stylesForHead = engine.getStylesheetsHtml();
        ctx.template.head.push(fusionCore.dangerouslySetHTML(stylesForHead));
      });
    } else {
      return next();
    }
  }
});

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env browser */

/* global module */

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env browser */
var index = plugin;

exports.styled = styletronReact.styled;
exports.withStyle = styletronReact.withStyle;
exports.withStyleDeep = styletronReact.withStyleDeep;
exports.withTransform = styletronReact.withTransform;
exports.withWrapper = styletronReact.withWrapper;
exports.default = index;
//# sourceMappingURL=index.js.map
