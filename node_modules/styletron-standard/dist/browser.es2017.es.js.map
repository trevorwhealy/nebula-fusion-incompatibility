{"version":3,"file":"browser.es2017.es.js","sources":["../src/index.js"],"sourcesContent":["// @flow\n\nimport type {Properties} from \"./style-types.js\";\n\ntype fontFaceT = {\n  src?: string,\n};\n\ntype keyframesT = {\n  from?: Properties<string | 0>,\n  to?: Properties<string | 0>,\n  [string]: Properties<string | 0>,\n};\n\n// TODO: investigate why $Shape is needed\ntype NestedStyleT<T> = $Shape<{\n  ...T,\n  [string]: {\n    ...T,\n    [string]: T,\n  },\n}>;\n\ntype baseStyleT = NestedStyleT<Properties<string | 0>>;\n\ntype declarativeStyleT = NestedStyleT<\n  Properties<string | 0, string | fontFaceT, string | keyframesT>,\n>;\n\nexport interface StandardEngine {\n  renderStyle(style: baseStyleT): string;\n  renderKeyframes(keyframes: keyframesT): string;\n  renderFontFace(fontFace: fontFaceT): string;\n}\n\nexport function driver(style: declarativeStyleT, styletron: StandardEngine) {\n  const tx = renderDeclarativeRules(style, styletron);\n  return styletron.renderStyle(tx);\n}\n\nexport function getInitialStyle(): declarativeStyleT {\n  return {};\n}\n\nfunction renderDeclarativeRules(\n  style: declarativeStyleT,\n  styletron: StandardEngine,\n): baseStyleT {\n  for (const key in style) {\n    const val = style[key];\n    if (key === \"animationName\" && typeof val !== \"string\") {\n      style.animationName = ((styletron.renderKeyframes(\n        ((val: any): keyframesT),\n      ): any): keyframesT);\n      continue;\n    }\n    if (key === \"fontFamily\" && typeof val !== \"string\") {\n      style.fontFamily = ((styletron.renderFontFace(\n        ((val: any): fontFaceT),\n      ): any): fontFaceT);\n      continue;\n    }\n    if (typeof val === \"object\" && val !== null) {\n      renderDeclarativeRules((val: any), styletron);\n    }\n  }\n  // TODO avoid type casting\n  return (style: any);\n}\n\nexport type {baseStyleT, declarativeStyleT, keyframesT, fontFaceT};\n"],"names":["driver","style","styletron","tx","renderDeclarativeRules","renderStyle","getInitialStyle","key","val","animationName","renderKeyframes","fontFamily","renderFontFace"],"mappings":"AAcA;AAqBA,AAAO,SAASA,MAAT,CAAgBC,KAAhB,EAA0CC,SAA1C,EAAqE;QACpEC,KAAKC,uBAAuBH,KAAvB,EAA8BC,SAA9B,CAAX;SACOA,UAAUG,WAAV,CAAsBF,EAAtB,CAAP;;AAGF,AAAO,SAASG,eAAT,GAA8C;SAC5C,EAAP;;;AAGF,SAASF,sBAAT,CACEH,KADF,EAEEC,SAFF,EAGc;OACP,MAAMK,GAAX,IAAkBN,KAAlB,EAAyB;UACjBO,MAAMP,MAAMM,GAAN,CAAZ;;QACIA,QAAQ,eAAR,IAA2B,OAAOC,GAAP,KAAe,QAA9C,EAAwD;YAChDC,aAAN,GAAwBP,UAAUQ,eAAV,CACpBF,GADoB,CAAxB;;;;QAKED,QAAQ,YAAR,IAAwB,OAAOC,GAAP,KAAe,QAA3C,EAAqD;YAC7CG,UAAN,GAAqBT,UAAUU,cAAV,CACjBJ,GADiB,CAArB;;;;QAKE,OAAOA,GAAP,KAAe,QAAf,IAA2BA,QAAQ,IAAvC,EAA6C;6BACnBA,GAAxB,EAAmCN,SAAnC;;GAhBQ;;;SAoBJD,KAAR;;;;;"}