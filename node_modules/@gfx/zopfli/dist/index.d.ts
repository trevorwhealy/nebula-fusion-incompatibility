export interface ZopfliOptions {
    /** Whether to print output */
    verbose?: boolean;
    /** Whether to print more detailed output  */
    verbose_more?: boolean;
    /**
        Maximum amount of times to rerun forward and backward pass to optimize LZ77
        compression cost. Good values: 10, 15 for small files, 5 for files over
        several MB in size or it will be too slow.
     */
    numiterations?: number;
    /**
        If true, splits the data in multiple deflate blocks with optimal choice
        for the block boundaries. Block splitting gives better compression. Default:
        true (1).
     */
    blocksplitting?: boolean;
    /**
        Maximum amount of blocks to split into (0 for unlimited, but this can give
        extreme results that hurt compression on some files). Default value: 15.
     */
    blocksplittingmax?: number;
}
export declare type OnCompressComplete = (err: Error | null, buffer: Uint8Array) => void;
export declare type InputType = Uint8Array | Array<number> | string;
export declare function gzip(buffer: InputType, options: ZopfliOptions, cb: OnCompressComplete): void;
export declare function zlib(buffer: InputType, options: ZopfliOptions, cb: OnCompressComplete): void;
export declare function deflate(buffer: InputType, options: ZopfliOptions, cb: OnCompressComplete): void;
export declare const gzipAsync: (buffer: InputType, options: ZopfliOptions) => Promise<Uint8Array>;
export declare const zlibAsync: (buffer: InputType, options: ZopfliOptions) => Promise<Uint8Array>;
export declare const deflateAsync: (buffer: InputType, options: ZopfliOptions) => Promise<Uint8Array>;
