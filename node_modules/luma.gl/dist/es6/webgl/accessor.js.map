{"version":3,"sources":["../../../src/webgl/accessor.js"],"names":["GL_FLOAT","Accessor","DEFAULTS","type","size","offset","stride","normalized","integer","instanced","constructor","optsList","forEach","opts","_update","getOptions","combinedOpts","Object","assign","update","target","undefined","divisor","isInstanced","index"],"mappings":"AAAA,MAAMA,WAAW,MAAjB;AAEA,eAAe,MAAMC,QAAN,CAAe;AAE5B,aAAWC,QAAX,GAAsB;AACpB,WAAO;AACLC,YAAMH,QADD;AAELI,YAAM,CAFD;AAGLC,cAAQ,CAHH;AAILC,cAAQ,CAJH;AAKLC,kBAAY,KALP;AAMLC,eAAS,KANJ;AAOLC,iBAAW;AAPN,KAAP;AASD;AAED;;;;;;;;;;;;;;;AAaAC,cAAY,GAAGC,QAAf,EAAyB;AACvBA,aAASC,OAAT,CAAiBC,QAAQ,KAAKC,OAAL,CAAaD,IAAb,CAAzB;AACD,GA7B2B,CA+B5B;;;AACAE,aAAW,GAAGJ,QAAd,EAAwB;AACtB,UAAMK,eAAeC,OAAOC,MAAP,CAAc,EAAd,EAAkBjB,SAASC,QAA3B,EAAqC,IAArC,CAArB;AACAS,aAASC,OAAT,CAAiBC,QAAQ,KAAKC,OAAL,CAAaD,IAAb,EAAmBG,YAAnB,CAAzB;AACA,WAAOA,YAAP;AACD;;AAEDG,SAAON,IAAP,EAAa;AACX,SAAKC,OAAL,CAAaD,IAAb;;AACA,WAAO,IAAP;AACD;AAED;;;AACAC,UAAQD,OAAO,EAAf,EAAmBO,SAAS,IAA5B,EAAkC;AAChC,QAAIP,KAAKV,IAAL,KAAckB,SAAlB,EAA6B;AAC3BD,aAAOjB,IAAP,GAAcU,KAAKV,IAAnB;AACD;;AACD,QAAIU,KAAKT,IAAL,KAAciB,SAAlB,EAA6B;AAC3BD,aAAOhB,IAAP,GAAcS,KAAKT,IAAnB;AACD;;AACD,QAAIS,KAAKR,MAAL,KAAgBgB,SAApB,EAA+B;AAC7BD,aAAOf,MAAP,GAAgBQ,KAAKR,MAArB;AACD;;AACD,QAAIQ,KAAKP,MAAL,KAAgBe,SAApB,EAA+B;AAC7BD,aAAOd,MAAP,GAAgBO,KAAKP,MAArB;AACD;;AACD,QAAIO,KAAKN,UAAL,KAAoBc,SAAxB,EAAmC;AACjCD,aAAOb,UAAP,GAAoBM,KAAKN,UAAzB;AACD;;AACD,QAAIM,KAAKL,OAAL,KAAiBa,SAArB,EAAgC;AAC9BD,aAAOZ,OAAP,GAAiBK,KAAKL,OAAtB;AACD;;AACD,QAAIK,KAAKS,OAAL,KAAiBD,SAArB,EAAgC;AAC9BD,aAAOE,OAAP,GAAiBT,KAAKS,OAAtB;AACD,KArB+B,CAuBhC;;;AACA,QAAIT,KAAKJ,SAAL,KAAmBY,SAAvB,EAAkC;AAChCD,aAAOE,OAAP,GAAiBT,KAAKJ,SAAL,GAAiB,CAAjB,GAAqB,CAAtC;AACD;;AACD,QAAII,KAAKU,WAAL,KAAqBF,SAAzB,EAAoC;AAClCD,aAAOE,OAAP,GAAiBT,KAAKU,WAAL,GAAmB,CAAnB,GAAuB,CAAxC;AACD,KA7B+B,CA8BhC;;;AACA,QAAIV,KAAKW,KAAL,KAAeH,SAAnB,EAA8B;AAC5BD,aAAOI,KAAP,GAAeX,KAAKW,KAAL,GAAa,CAAb,GAAiB,CAAhC;AACD;;AACD,WAAOJ,MAAP;AACD;AACD;;;AAhF4B","sourcesContent":["const GL_FLOAT = 0x1406;\n\nexport default class Accessor {\n\n  static get DEFAULTS() {\n    return {\n      type: GL_FLOAT,\n      size: 1,\n      offset: 0,\n      stride: 0,\n      normalized: false,\n      integer: false,\n      instanced: 0\n    };\n  }\n\n  /**\n   * Store characteristics of a data accessor\n   * This data can be used when updating vertex attributes with the associated buffer,\n   * freeing the application from keeping track of this metadata.\n   * @class\n   * {type, size, offset, stride, normalized, integer, instanced}\n   * @param {GLuint} size - number of values per element (1-4)\n   * @param {GLuint} type - type of values (e.g. gl.FLOAT)\n   * @param {GLbool} normalized=false - normalize integers to [-1,1] or [0,1]\n   * @param {GLuint} integer=false - WebGL2 only, int-to-float conversion\n   * @param {GLuint} stride=0 - supports strided arrays\n   * @param {GLuint} offset=0 - supports strided arrays\n   */\n  constructor(...optsList) {\n    optsList.forEach(opts => this._update(opts));\n  }\n\n  // Combine with other accessors\n  getOptions(...optsList) {\n    const combinedOpts = Object.assign({}, Accessor.DEFAULTS, this);\n    optsList.forEach(opts => this._update(opts, combinedOpts));\n    return combinedOpts;\n  }\n\n  update(opts) {\n    this._update(opts);\n    return this;\n  }\n\n  /* eslint-disable complexity */\n  _update(opts = {}, target = this) {\n    if (opts.type !== undefined) {\n      target.type = opts.type;\n    }\n    if (opts.size !== undefined) {\n      target.size = opts.size;\n    }\n    if (opts.offset !== undefined) {\n      target.offset = opts.offset;\n    }\n    if (opts.stride !== undefined) {\n      target.stride = opts.stride;\n    }\n    if (opts.normalized !== undefined) {\n      target.normalized = opts.normalized;\n    }\n    if (opts.integer !== undefined) {\n      target.integer = opts.integer;\n    }\n    if (opts.divisor !== undefined) {\n      target.divisor = opts.divisor;\n    }\n\n    // Backwards compatibility\n    if (opts.instanced !== undefined) {\n      target.divisor = opts.instanced ? 1 : 0;\n    }\n    if (opts.isInstanced !== undefined) {\n      target.divisor = opts.isInstanced ? 1 : 0;\n    }\n    // TODO - should this be supported?\n    if (opts.index !== undefined) {\n      target.index = opts.index ? 1 : 0;\n    }\n    return target;\n  }\n  /* eslint-enable complexity */\n}\n"],"file":"accessor.js"}