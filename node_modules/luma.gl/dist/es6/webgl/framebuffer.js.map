{"version":3,"sources":["../../../src/webgl/framebuffer.js"],"names":["Resource","Texture2D","Renderbuffer","Buffer","clear","clearBuffer","withParameters","getFeatures","getTypedArrayFromGLType","getGLTypeFromTypedArray","glFormatToComponents","glTypeToBytes","isWebGL2","assertWebGL2Context","flipRows","scalePixels","log","assert","GL","ERR_MULTIPLE_RENDERTARGETS","Framebuffer","isSupported","gl","colorBufferFloat","colorBufferHalfFloat","supported","getExtension","getDefaultFramebuffer","luma","defaultFramebuffer","id","handle","attachments","MAX_COLOR_ATTACHMENTS","getParameter","MAX_DRAW_BUFFERS","constructor","opts","width","height","readBuffer","COLOR_ATTACHMENT0","drawBuffers","initialize","Object","seal","color","texture","depth","DEPTH_ATTACHMENT","stencil","STENCIL_ATTACHMENT","check","attachment","target","object","Array","isArray","resize","_createDefaultAttachments","update","clearAttachments","checkStatus","attach","prevHandle","bindFramebuffer","FRAMEBUFFER","_setReadBuffer","_setDrawBuffers","undefined","drawingBufferWidth","drawingBufferHeight","attachmentPoint","newAttachments","keys","forEach","key","assign","descriptor","_unattach","_attachRenderbuffer","renderbuffer","layer","level","_attachTexture","filter","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","Error","_getFrameBufferStatus","value","drawBuffer","readPixels","x","y","format","RGBA","type","pixelArray","FRONT","UNSIGNED_BYTE","ArrayType","clamped","components","readPixelsToBuffer","buffer","byteOffset","byteCount","bytes","size","bind","PIXEL_PACK_BUFFER","framebuffer","unbind","copyToDataUrl","maxHeight","Number","MAX_SAFE_INTEGER","data","canvas","document","createElement","context","getContext","imageData","createImageData","set","putImageData","toDataURL","copyToImage","image","dataUrl","readDataUrl","Image","src","copyToTexture","xoffset","yoffset","zoffset","mipmapLevel","prevBuffer","isFinite","TEXTURE_2D","TEXTURE_CUBE_MAP","copyTexSubImage2D","TEXTURE_2D_ARRAY","TEXTURE_3D","copyTexSubImage3D","blit","srcFramebuffer","srcX0","srcY0","srcX1","srcY1","dstX0","dstY0","dstX1","dstY1","mask","NEAREST","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","prevDrawHandle","DRAW_FRAMEBUFFER","prevReadHandle","READ_FRAMEBUFFER","blitFramebuffer","invalidate","invalidateAll","invalidateFramebuffer","getAttachmentParameter","pname","_getAttachmentParameterFallback","bindTexture","getFramebufferAttachmentParameter","getAttachmentParameters","parameters","ATTACHMENT_PARAMETERS","values","show","window","open","priority","message","defaultAttachments","pixels","mipmaps","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","DEPTH_COMPONENT16","bindRenderbuffer","RENDERBUFFER","framebufferRenderbuffer","framebufferTextureLayer","face","mapIndexToCubeMapFace","framebufferTexture2D","BACK","ext","drawBuffersWEBGL","length","caps","FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER","webgl2","FRAMEBUFFER_ATTACHMENT_RED_SIZE","FRAMEBUFFER_ATTACHMENT_GREEN_SIZE","FRAMEBUFFER_ATTACHMENT_BLUE_SIZE","FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE","FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE","FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE","FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE","UNSIGNED_INT","FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING","EXT_sRGB","LINEAR","_createHandle","createFramebuffer","_deleteHandle","deleteFramebuffer","_bindHandle","TEXTURE_CUBE_MAP_POSITIVE_X","STATUS"],"mappings":"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","sourcesContent":["import Resource from './resource';\nimport Texture2D from './texture-2d';\nimport Renderbuffer from './renderbuffer';\nimport Buffer from './buffer';\nimport {clear, clearBuffer} from './clear';\n\nimport {withParameters} from '../webgl-context';\nimport {getFeatures} from '../webgl-context/context-features';\n\nimport {getTypedArrayFromGLType, getGLTypeFromTypedArray} from '../webgl-utils/typed-array-utils';\nimport {glFormatToComponents, glTypeToBytes} from '../webgl-utils/format-utils';\nimport {isWebGL2, assertWebGL2Context} from '../webgl-utils';\nimport {flipRows, scalePixels} from '../webgl-utils';\n\nimport {log} from '../utils';\nimport assert from '../utils/assert';\n\nimport GL from '../constants';\n\nconst ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\n\nexport default class Framebuffer extends Resource {\n\n  static isSupported(gl, {\n    colorBufferFloat,    // Whether floating point textures can be rendered and read\n    colorBufferHalfFloat // Whether half float textures can be rendered and read\n  } = {}) {\n    let supported = true;\n    supported = colorBufferFloat &&\n      gl.getExtension(isWebGL2(gl) ? 'EXT_color_buffer_float' : 'WEBGL.color_buffer_float');\n    supported = colorBufferHalfFloat &&\n      gl.getExtension(isWebGL2(gl) ? 'EXT_color_buffer_float' : 'EXT_color_buffer_half_float');\n    return supported;\n  }\n\n  // Create a Framebuffer wrapper for the default framebuffer (target === null)\n  static getDefaultFramebuffer(gl) {\n    gl.luma = gl.luma || {};\n    gl.luma.defaultFramebuffer = gl.luma.defaultFramebuffer || new Framebuffer(gl, {\n      id: 'default-framebuffer',\n      handle: null,\n      attachments: {}\n    });\n    // TODO - can we query for and get a handle to the GL.FRONT renderbuffer?\n    return gl.luma.defaultFramebuffer;\n  }\n\n  get MAX_COLOR_ATTACHMENTS() {\n    return this.gl.getParameter(this.gl.MAX_COLOR_ATTACHMENTS);\n  }\n\n  get MAX_DRAW_BUFFERS() {\n    return this.gl.getParameter(this.gl.MAX_DRAW_BUFFERS);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // Public members\n    this.width = null;\n    this.height = null;\n    this.attachments = {};\n    this.readBuffer = GL.COLOR_ATTACHMENT0;\n    this.drawBuffers = [GL.COLOR_ATTACHMENT0];\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  get color() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get texture() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get depth() {\n    return this.attachments[GL.DEPTH_ATTACHMENT] || null;\n  }\n\n  get stencil() {\n    return this.attachments[GL.STENCIL_ATTACHMENT] || null;\n  }\n\n  initialize({\n    width = 1,\n    height = 1,\n    attachments = null,\n    color = true,\n    depth = true,\n    stencil = false,\n    check = true,\n    readBuffer,\n    drawBuffers\n  }) {\n    assert(width >= 0 && height >= 0, 'Width and height need to be integers');\n\n    // Store actual width and height for diffing\n    this.width = width;\n    this.height = height;\n\n    // Resize any provided attachments - note that resize only resizes if needed\n    // Note: A framebuffer has no separate size, it is defined by its attachments (which must agree)\n    if (attachments) {\n      for (const attachment in attachments) {\n        const target = attachments[attachment];\n        const object = Array.isArray(target) ? target[0] : target;\n        object.resize({width, height});\n      }\n    } else {\n      // Create any requested default attachments\n      attachments = this._createDefaultAttachments({color, depth, stencil, width, height});\n    }\n\n    this.update({clearAttachments: true, attachments, readBuffer, drawBuffers});\n\n    // Checks that framebuffer was properly set up, if not, throws an explanatory error\n    if (attachments && check) {\n      this.checkStatus();\n    }\n  }\n\n  update({\n    attachments = {},\n    readBuffer,\n    drawBuffers,\n    clearAttachments = false\n  }) {\n    this.attach(attachments, {clearAttachments});\n\n    const {gl} = this;\n    // Multiple render target support, set read buffer and draw buffers\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    if (readBuffer) {\n      this._setReadBuffer(readBuffer);\n    }\n    if (drawBuffers) {\n      this._setDrawBuffers(drawBuffers);\n    }\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // Attachment resize is expected to be a noop if size is same\n  resize({width, height} = {}) {\n    // for default framebuffer, just update the stored size\n    if (this.handle === null) {\n      assert(width === undefined && height === undefined);\n      this.width = this.gl.drawingBufferWidth;\n      this.height = this.gl.drawingBufferHeight;\n      return this;\n    }\n\n    if (width === undefined) {\n      width = this.gl.drawingBufferWidth;\n    }\n    if (height === undefined) {\n      height = this.gl.drawingBufferHeight;\n    }\n\n    if (width !== this.width && height !== this.height) {\n      log.log(2, `Resizing framebuffer ${this.id} to ${width}x${height}`);\n    }\n    for (const attachmentPoint in this.attachments) {\n      this.attachments[attachmentPoint].resize({width, height});\n    }\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  // Attach from a map of attachments\n  attach(attachments, {\n    clearAttachments = false\n  } = {}) {\n    const newAttachments = {};\n\n    // Any current attachments need to be removed, add null values to map\n    if (clearAttachments) {\n      Object.keys(this.attachments).forEach(key => {\n        newAttachments[key] = null;\n      });\n    }\n\n    // Overlay the new attachments\n    Object.assign(newAttachments, attachments);\n\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    // Walk the attachments\n    for (const attachment in newAttachments) {\n      // Ensure key is not undefined\n      assert(attachment !== 'undefined', 'Misspelled framebuffer binding point?');\n\n      const descriptor = newAttachments[attachment];\n      let object = descriptor;\n      if (!object) {\n        this._unattach({attachment});\n      } else if (object instanceof Renderbuffer) {\n        this._attachRenderbuffer({attachment, renderbuffer: object});\n      } else if (Array.isArray(descriptor)) {\n        const [texture, layer = 0, level = 0] = descriptor;\n        object = texture;\n        this._attachTexture({attachment, texture, layer, level});\n      } else {\n        this._attachTexture({attachment, texture: object, layer: 0, level: 0});\n      }\n\n      // Resize objects\n      if (object) {\n        object.resize({width: this.width, height: this.height});\n      }\n    }\n\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    // Assign to attachments and remove any nulls to get a clean attachment map\n    Object.assign(this.attachments, attachments);\n    Object.keys(this.attachments).filter(key => !this.attachments[key]).forEach(key => {\n      delete this.attachments[key];\n    });\n  }\n\n  checkStatus() {\n    const {gl} = this;\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    const status = gl.checkFramebufferStatus(GL.FRAMEBUFFER);\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n      throw new Error(_getFrameBufferStatus(status));\n    }\n    return this;\n  }\n\n  clear({\n    color,\n    depth,\n    stencil,\n    drawBuffers = []\n  } = {}) {\n    // Bind framebuffer and delegate to global clear functions\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    if (color || depth || stencil) {\n      clear(this.gl, {color, depth, stencil});\n    }\n\n    drawBuffers.forEach((value, drawBuffer) => {\n      clearBuffer({drawBuffer, value});\n    });\n\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // NOTE: Slow requires roundtrip to GPU\n  // App can provide pixelArray or have it auto allocated by this method\n  // @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n  //  newly allocated by this method unless provided by app.\n  readPixels({\n    x = 0,\n    y = 0,\n    width = this.width,\n    height = this.height,\n    format = GL.RGBA,\n    type, // Auto deduced from pixelArray or gl.UNSIGNED_BYTE\n    pixelArray = null,\n    attachment = GL.COLOR_ATTACHMENT0 // TODO - support gl.readBuffer\n  }) {\n    const {gl} = this;\n\n    // TODO - Set and unset gl.readBuffer\n    if (attachment === GL.COLOR_ATTACHMENT0 && this.handle === null) {\n      attachment = GL.FRONT;\n    }\n\n    // Deduce type and allocated pixelArray if needed\n    if (!pixelArray) {\n      // Allocate pixel array if not already available, using supplied type\n      type = type || gl.UNSIGNED_BYTE;\n      const ArrayType = getTypedArrayFromGLType(type, {clamped: false});\n      const components = glFormatToComponents(format);\n      // TODO - check for composite type (components = 1).\n      pixelArray = pixelArray || new ArrayType(width * height * components);\n    }\n\n    // Pixel array available, if necessary, deduce type from it.\n    type = type || getGLTypeFromTypedArray(pixelArray);\n\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    this.gl.readPixels(x, y, width, height, format, type, pixelArray);\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return pixelArray;\n  }\n\n  // Reads data into provided buffer object asynchronously\n  // This function doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n  readPixelsToBuffer({\n    x = 0,\n    y = 0,\n    width = this.width,\n    height = this.height,\n    format = GL.RGBA,\n    type, // When not provided, auto deduced from buffer or GL.UNSIGNED_BYTE\n    buffer = null, // A new Buffer object is created when not provided.\n    byteOffset = 0 // byte offset in buffer object\n  }) {\n    const {gl} = this;\n\n    // Asynchronus read (PIXEL_PACK_BUFFER) is WebGL2 only feature\n    assertWebGL2Context(gl);\n\n    // deduce type if not available.\n    type = type || (buffer ? buffer.type : GL.UNSIGNED_BYTE);\n\n    if (!buffer) {\n      // Create new buffer with enough size\n      const components = glFormatToComponents(format);\n      const byteCount = glTypeToBytes(type);\n      const bytes = byteOffset + (width * height * components * byteCount);\n      buffer = new Buffer(gl, {\n        bytes,\n        type,\n        size: components\n      });\n    }\n\n    buffer.bind({target: GL.PIXEL_PACK_BUFFER});\n    withParameters(gl, {framebuffer: this}, () => {\n      gl.readPixels(x, y, width, height, format, type, byteOffset);\n    });\n    buffer.unbind({target: GL.PIXEL_PACK_BUFFER});\n\n    return buffer;\n  }\n\n  // Reads pixels as a dataUrl\n  copyToDataUrl({\n    attachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    maxHeight = Number.MAX_SAFE_INTEGER\n  } = {}) {\n    let data = this.readPixels({attachment});\n\n    // Scale down\n    let {width, height} = this;\n    while (height > maxHeight) {\n      ({data, width, height} = scalePixels({data, width, height}));\n    }\n\n    // Flip to top down coordinate system\n    flipRows({data, width, height});\n\n    /* global document */\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const context = canvas.getContext('2d');\n\n    // Copy the pixels to a 2D canvas\n    const imageData = context.createImageData(width, height);\n    imageData.data.set(data);\n    context.putImageData(imageData, 0, 0);\n\n    return canvas.toDataURL();\n  }\n\n  // Reads pixels into an HTML Image\n  copyToImage({\n    image = null,\n    attachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    maxHeight = Number.MAX_SAFE_INTEGER\n  } = {}) {\n    /* global Image */\n    const dataUrl = this.readDataUrl({attachment});\n    image = image || new Image();\n    image.src = dataUrl;\n    return image;\n  }\n\n  // copyToFramebuffer({width, height}) {\n  //   const scaleX = width / this.width;\n  //   const scaleY = height / this.height;\n  //   const scale = Math.min(scaleX, scaleY);\n  //   width = width * scale;\n  //   height = height * scale;\n  //   const scaledFramebuffer = new Framebuffer(this.gl, {width, height});\n  //   this.blit();\n  // }\n\n  // Copy a rectangle from a framebuffer attachment into a texture (at an offset)\n  copyToTexture({\n    // Target\n    texture,\n    target, // for cubemaps\n    xoffset = 0,\n    yoffset = 0,\n    zoffset = 0,\n    mipmapLevel = 0,\n\n    // Source\n    attachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    x = 0,\n    y = 0,\n    width, // defaults to texture width\n    height // defaults to texture height\n  }) {\n    const {gl} = this;\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    const prevBuffer = gl.readBuffer(attachment);\n\n    width = Number.isFinite(width) ? width : texture.width;\n    height = Number.isFinite(height) ? height : texture.height;\n\n    // target\n    switch (texture.target) {\n    case GL.TEXTURE_2D:\n    case GL.TEXTURE_CUBE_MAP:\n      gl.copyTexSubImage2D(\n        target || texture.target,\n        mipmapLevel,\n        xoffset,\n        yoffset,\n        x,\n        y,\n        width,\n        height\n      );\n      break;\n    case GL.TEXTURE_2D_ARRAY:\n    case GL.TEXTURE_3D:\n      gl.copyTexSubImage3D(\n        target || texture.target,\n        mipmapLevel,\n        xoffset,\n        yoffset,\n        zoffset,\n        x,\n        y,\n        width,\n        height\n      );\n      break;\n    default:\n    }\n\n    gl.readBuffer(prevBuffer);\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n    return texture;\n  }\n\n  // WEBGL2 INTERFACE\n\n  // Copies a rectangle of pixels between framebuffers\n  blit({\n    srcFramebuffer,\n    attachment = GL.COLOR_ATTACHMENT0,\n    srcX0 = 0, srcY0 = 0, srcX1, srcY1,\n    dstX0 = 0, dstY0 = 0, dstX1, dstY1,\n    color = true,\n    depth = false,\n    stencil = false,\n    mask = 0,\n    filter = GL.NEAREST\n  }) {\n    const {gl} = this;\n    assertWebGL2Context(gl);\n\n    if (!srcFramebuffer.handle && attachment === GL.COLOR_ATTACHMENT0) {\n      attachment = GL.FRONT;\n    }\n\n    if (color) {\n      mask |= GL.COLOR_BUFFER_BIT;\n    }\n    if (depth) {\n      mask |= GL.DEPTH_BUFFER_BIT;\n    }\n    if (stencil) {\n      mask |= GL.STENCIL_BUFFER_BIT;\n    }\n    assert(mask);\n\n    srcX1 = srcX1 === undefined ? srcFramebuffer.width : srcX1;\n    srcY1 = srcY1 === undefined ? srcFramebuffer.height : srcY1;\n    dstX1 = dstX1 === undefined ? this.width : dstX1;\n    dstY1 = dstY1 === undefined ? this.height : dstY1;\n\n    const prevDrawHandle = gl.bindFramebuffer(GL.DRAW_FRAMEBUFFER, this.handle);\n    const prevReadHandle = gl.bindFramebuffer(GL.READ_FRAMEBUFFER, srcFramebuffer.handle);\n    gl.readBuffer(attachment);\n    gl.blitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);\n    gl.readBuffer(this.readBuffer);\n    gl.bindFramebuffer(GL.READ_FRAMEBUFFER, prevReadHandle || null);\n    gl.bindFramebuffer(GL.DRAW_FRAMEBUFFER, prevDrawHandle || null);\n\n    return this;\n  }\n\n  // signals to the GL that it need not preserve all pixels of a specified region of the framebuffer\n  invalidate({attachments = [], x = 0, y = 0, width, height}) {\n    const {gl} = this;\n    assertWebGL2Context(gl);\n    const prevHandle = gl.bindFramebuffer(GL.READ_FRAMEBUFFER, this.handle);\n    const invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n    if (invalidateAll) {\n      gl.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments);\n    } else {\n      gl.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments, x, y, width, height);\n    }\n    gl.bindFramebuffer(GL.READ_FRAMEBUFFER, prevHandle);\n    return this;\n  }\n\n  // Return the value for `pname` of the specified attachment.\n  // The type returned is the type of the requested pname\n  getAttachmentParameter({attachment = GL.COLOR_ATTACHMENT0, pname} = {}) {\n    let value = this._getAttachmentParameterFallback(pname);\n    if (value === null) {\n      this.gl.bindTexture(GL.FRAMEBUFFER, this.handle);\n      value = this.gl.getFramebufferAttachmentParameter(GL.FRAMEBUFFER, attachment, pname);\n      this.gl.bindTexture(GL.FRAMEBUFFER, null);\n    }\n    return value;\n  }\n\n  getAttachmentParameters(\n    attachment = GL.COLOR_ATTACHMENT0,\n    parameters = this.constructor.ATTACHMENT_PARAMETERS || {}\n  ) {\n    const values = {};\n    for (const pname in parameters) {\n      values[pname] = this.getAttachmentParameter(pname);\n    }\n    return this;\n  }\n\n  // DEBUG\n\n  // Note: Will only work when called in an event handler\n  show() {\n    /* global window */\n    if (typeof window !== 'undefined') {\n      window.open(this.copyToDataUrl(), 'luma-debug-texture');\n    }\n    return this;\n  }\n\n  log(priority = 0, message = '') {\n    if (priority > log.priority || typeof window === 'undefined') {\n      return this;\n    }\n    message = message || `Framebuffer ${this.id}`;\n    const image = this.copyToDataUrl({maxHeight: 100});\n    log.image({priority, message, image}, message)();\n    return this;\n  }\n\n  // WEBGL INTERFACE\n  bind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, this.handle);\n    return this;\n  }\n\n  unbind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, null);\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _createDefaultAttachments({color, depth, stencil, width, height}) {\n    let defaultAttachments = null;\n\n    // Add a color buffer if requested and not supplied\n    if (color) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.COLOR_ATTACHMENT0] = new Texture2D(this.gl, {\n        pixels: null, // reserves texture memory, but texels are undefined\n        format: GL.RGBA,\n        type: GL.UNSIGNED_BYTE,\n        width,\n        height,\n        // Note: Mipmapping can be disabled by texture resource when we resize the texture\n        // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant\n        // behavior we always disable mipmaps.\n        mipmaps: false,\n        // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.\n        // Set WRAP modes that support NPOT textures too.\n        parameters: {\n          [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n          [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n        }\n      });\n    }\n\n    // Add a depth buffer if requested and not supplied\n    if (depth) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_ATTACHMENT] =\n        new Renderbuffer(this.gl, {format: GL.DEPTH_COMPONENT16, width, height});\n    }\n\n    // TODO - handle stencil and combined depth and stencil\n\n    return defaultAttachments;\n  }\n\n  _unattach({attachment}) {\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, this.handle);\n    this.gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, null);\n    delete this.attachments[attachment];\n  }\n\n  _attachRenderbuffer({attachment = GL.COLOR_ATTACHMENT0, renderbuffer}) {\n    const {gl} = this;\n    // TODO - is the bind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer.handle);\n    gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, renderbuffer.handle);\n    // TODO - is the unbind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n    this.attachments[attachment] = renderbuffer;\n  }\n\n  // layer = 0 - index into Texture2DArray and Texture3D or face for `TextureCubeMap`\n  // level = 0 - mipmapLevel (must be 0 in WebGL1)\n  _attachTexture({attachment = GL.COLOR_ATTACHMENT0, texture, layer, level}) {\n    const {gl} = this;\n    gl.bindTexture(texture.target, texture.handle);\n\n    switch (texture.target) {\n    case GL.TEXTURE_2D_ARRAY:\n    case GL.TEXTURE_3D:\n      gl.framebufferTextureLayer(GL.FRAMEBUFFER, attachment, texture.target, level, layer);\n      break;\n\n    case GL.TEXTURE_CUBE_MAP:\n      // layer must be a cubemap face (or if index, converted to cube map face)\n      const face = mapIndexToCubeMapFace(layer);\n      gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, face, texture.handle, level);\n      break;\n\n    case GL.TEXTURE_2D:\n      gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, texture.handle, level);\n      break;\n\n    default:\n      assert(false, 'Illegal texture type');\n    }\n\n    gl.bindTexture(texture.target, null);\n    this.attachments[attachment] = texture;\n  }\n\n  // Expects framebuffer to be bound\n  _setReadBuffer(gl, readBuffer) {\n    if (isWebGL2(gl)) {\n      gl.readBuffer(readBuffer);\n    } else {\n      // Setting to color attachment 0 is a noop, so allow it in WebGL1\n      assert(readBuffer === GL.COLOR_ATTACHMENT0 || readBuffer === GL.BACK,\n        ERR_MULTIPLE_RENDERTARGETS);\n    }\n    this.readBuffer = readBuffer;\n  }\n\n  // Expects framebuffer to be bound\n  _setDrawBuffers(gl, drawBuffers) {\n    if (isWebGL2(gl)) {\n      gl.drawBuffers(drawBuffers);\n    } else {\n      const ext = gl.getExtension('WEBGL.draw_buffers');\n      if (ext) {\n        ext.drawBuffersWEBGL(drawBuffers);\n      } else {\n        // Setting a single draw buffer to color attachment 0 is a noop, allow in WebGL1\n        assert(drawBuffers.length === 1 &&\n          (drawBuffers[0] === GL.COLOR_ATTACHMENT0 || drawBuffers[0] === GL.BACK),\n          ERR_MULTIPLE_RENDERTARGETS);\n      }\n    }\n    this.drawBuffers = drawBuffers;\n  }\n\n  // Attempt to provide workable defaults for WebGL2 symbols under WebGL1\n  // null means OK to query\n  /* eslint-disable complexity */\n  _getAttachmentParameterFallback(pname) {\n    const caps = getFeatures(this.gl);\n\n    switch (pname) {\n    case GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: // GLint\n      return !caps.webgl2 ? 0 : null;\n    case GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: // GLint\n      return !caps.webgl2 ? 8 : null;\n    case GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: // GLenum\n      return !caps.webgl2 ? GL.UNSIGNED_INT : null;\n    case GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:\n      return !caps.webgl2 && !caps.EXT_sRGB ? GL.LINEAR : null;\n    default:\n      return null;\n    }\n  }\n  /* eslint-enable complexity */\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createFramebuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteFramebuffer(this.handle);\n  }\n\n  _bindHandle(handle) {\n    return this.gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  }\n}\n\n// PUBLIC METHODS\n\n// Map an index to a cube map face constant\nfunction mapIndexToCubeMapFace(layer) {\n  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)\n  // if smaller assume layer is index, otherwise assume it is already a cube map face constant\n  return layer < GL.TEXTURE_CUBE_MAP_POSITIVE_X ?\n    layer + GL.TEXTURE_CUBE_MAP_POSITIVE_X :\n    layer;\n}\n\n// Helper METHODS\n// Get a string describing the framebuffer error if installed\nfunction _getFrameBufferStatus(status) {\n  // Use error mapping if installed\n  const STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || `Framebuffer error ${status}`;\n}\n"],"file":"framebuffer.js"}