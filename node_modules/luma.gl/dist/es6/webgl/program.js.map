{"version":3,"sources":["../../../src/webgl/program.js"],"names":["GL","Resource","Texture","Framebuffer","parseUniformName","getUniformSetter","VertexShader","FragmentShader","ProgramConfiguration","withParameters","checkUniformValues","areUniformsEqual","assertWebGL2Context","isWebGL2","getPrimitiveDrawMode","log","uid","assert","LOG_PROGRAM_PERF_PRIORITY","GL_SEPARATE_ATTRIBS","Program","constructor","gl","opts","_isCached","initialize","stubRemovedMethods","Object","seal","_setId","id","props","vs","fs","varyings","bufferMode","uniforms","samplers","transformFeedbackVaryings","handle","_compileAndLink","_readUniformLocationsFromLinkedProgram","configuration","setProps","delete","setUniforms","draw","logPriority","drawMode","TRIANGLES","vertexCount","offset","start","end","isIndexed","indexType","UNSIGNED_SHORT","isInstanced","instanceCount","vertexArray","transformFeedback","framebuffer","parameters","undefined","fb","message","useProgram","bind","assign","primitiveMode","begin","drawElementsInstanced","isNaN","drawElementsRange","drawElements","drawArraysInstanced","drawArrays","setSamplers","_onChangeCallback","somethingChanged","key","_setUniforms","uniformName","uniform","uniformSetter","_uniformSetters","sampler","texture","textureIndex","_textureIndexCounter","_createHandle","createProgram","_deleteHandle","deleteProgram","_getOptionsFromHandle","shaderHandles","getAttachedShaders","shaderHandle","type","getShaderParameter","SHADER_TYPE","VERTEX_SHADER","FRAGMENT_SHADER","_getParameter","pname","getProgramParameter","programName","_getName","getName","replace","attachShader","time","linkProgram","timeEnd","debug","priority","validateProgram","linked","LINK_STATUS","Error","getProgramInfoLog","_uniformCount","ACTIVE_UNIFORMS","i","info","getActiveUniform","name","isArray","location","getUniformLocation","reset","getActiveUniforms","uniformIndices","getUniformBlockIndex","blockName","getActiveUniformBlockParameter","blockIndex","uniformBlockBinding","blockBinding"],"mappings":"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","sourcesContent":["/* eslint-disable no-inline-comments */\nimport GL from '../constants';\nimport Resource from './resource';\nimport Texture from './texture';\nimport Framebuffer from './framebuffer';\nimport {parseUniformName, getUniformSetter} from './uniforms';\nimport {VertexShader, FragmentShader} from './shader';\nimport ProgramConfiguration from './program-configuration';\nimport {withParameters} from '../webgl-context/context-state';\nimport {checkUniformValues, areUniformsEqual} from '../webgl/uniforms';\nimport {assertWebGL2Context, isWebGL2} from '../webgl-utils';\nimport {getPrimitiveDrawMode} from '../webgl-utils/attribute-utils';\nimport {log, uid} from '../utils';\nimport assert from '../utils/assert';\n\nconst LOG_PROGRAM_PERF_PRIORITY = 4;\n\n// const GL_INTERLEAVED_ATTRIBS = 0x8C8C;\nconst GL_SEPARATE_ATTRIBS = 0x8C8D;\n\nexport default class Program extends Resource {\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // For backwards compatibility, each program creates a vertex array.\n    // It can (should) be overridden in draw.\n    // this.vertexArray = null;\n\n    // Experimental flag to avoid deleting Program object while it is cached\n    this._isCached = false;\n\n    this.initialize(opts);\n\n    this.stubRemovedMethods('Program', 'v6.0', [\n      'setVertexArray',\n      'setAttributes',\n      'setBuffers',\n      'unsetBuffers',\n\n      'use',\n      'getUniformCount',\n      'getUniformInfo',\n      'getUniformLocation',\n      'getUniformValue',\n\n      'getVarying',\n      'getFragDataLocation',\n      'getAttachedShaders',\n      'getAttributeCount',\n      'getAttributeLocation',\n      'getAttributeInfo'\n    ]);\n\n    Object.seal(this);\n\n    this._setId(opts.id);\n  }\n\n  initialize(props = {}) {\n    const {vs, fs, varyings, bufferMode = GL_SEPARATE_ATTRIBS} = props;\n    // Create shaders if needed\n    this.vs = typeof vs === 'string' ? new VertexShader(this.gl, vs) : vs;\n    this.fs = typeof fs === 'string' ? new FragmentShader(this.gl, fs) : fs;\n    assert(this.vs instanceof VertexShader, 'Program: bad vertex shader');\n    assert(this.fs instanceof FragmentShader, 'Program: bad fragment shader');\n\n    // uniforms\n    this.uniforms = {};\n    this.samplers = {};\n\n    // Setup varyings if supplied\n    if (varyings) {\n      assertWebGL2Context(this.gl);\n      this.varyings = varyings;\n      this.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n    }\n\n    this._compileAndLink();\n    this._readUniformLocationsFromLinkedProgram();\n    this.configuration = new ProgramConfiguration(this);\n\n    return this.setProps(props);\n  }\n\n  delete(opts = {}) {\n    if (this._isCached) {\n      // This object is cached, do not delete\n      return this;\n    }\n    return super.delete(opts);\n  }\n\n  setProps(props) {\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms, props.samplers);\n    }\n    return this;\n  }\n\n  // Another thing about the WebGL API is that there are so many ways to draw things.\n  // This function unifies those ways into a single call using common parameters with sane defaults\n  draw({\n    logPriority,\n    drawMode = GL.TRIANGLES,\n    vertexCount,\n    offset = 0,\n    start,\n    end,\n    isIndexed = false,\n    indexType = GL.UNSIGNED_SHORT,\n    isInstanced = false,\n    instanceCount = 0,\n\n    vertexArray = null, // VertexArray.getDefaultArray(this.gl),\n    transformFeedback,\n    framebuffer,\n    uniforms = {},\n    samplers = {},\n    parameters = {}\n  }) {\n    if (logPriority !== undefined) {\n      const fb = framebuffer ? framebuffer.id : 'default';\n      const message =\n        `Framebuffer=${fb}: mode=${drawMode} verts=${vertexCount} instances=${instanceCount}` +\n        ` isIndexed=${isIndexed} isInstanced=${isInstanced}`;\n      log.log(logPriority, message)();\n    }\n\n    this.gl.useProgram(this.handle);\n\n    // TODO - move vertex array binding and transform feedback binding to withParameters?\n    assert(vertexArray);\n\n    vertexArray.bind(() => {\n\n      this.setUniforms(uniforms, samplers);\n\n      if (framebuffer !== undefined) {\n        parameters = Object.assign({}, parameters, {framebuffer});\n      }\n\n      if (transformFeedback) {\n        const primitiveMode = getPrimitiveDrawMode(drawMode);\n        transformFeedback.begin(primitiveMode);\n      }\n\n      withParameters(this.gl, parameters,\n        () => {\n          // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n          if (isIndexed && isInstanced) {\n            this.gl.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n          } else if (isIndexed && isWebGL2(this.gl) && !isNaN(start) && !isNaN(end)) {\n            this.gl.drawElementsRange(drawMode, start, end, vertexCount, indexType, offset);\n          } else if (isIndexed) {\n            this.gl.drawElements(drawMode, vertexCount, indexType, offset);\n          } else if (isInstanced) {\n            this.gl.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n          } else {\n            this.gl.drawArrays(drawMode, offset, vertexCount);\n          }\n        }\n      );\n\n      if (transformFeedback) {\n        transformFeedback.end();\n      }\n\n    });\n\n    return this;\n  }\n\n  setSamplers(samplers) {\n    Object.assign(this.samplers, samplers);\n  }\n\n  setUniforms(uniforms = {}, samplers = {}, _onChangeCallback = () => {}) {\n    // Simple change detection - if all uniforms are unchanged, do nothing\n    // TODO - Disabled since it interferes with textures\n    // we must still rebind texture units to current program's textures before drawing\n    // If modifying, test with `picking` example on website\n    let somethingChanged = false;\n    for (const key in uniforms) {\n      if (!areUniformsEqual(this.uniforms[key], uniforms[key])) {\n        somethingChanged = true;\n        break;\n      }\n    }\n\n    if (somethingChanged) {\n      _onChangeCallback();\n      checkUniformValues(uniforms, this.id);\n      Object.assign(this.uniforms, uniforms);\n      Object.assign(this.samplers, samplers);\n    }\n\n    // TODO - should only set updated uniforms\n    this._setUniforms(this.uniforms, this.samplers);\n\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  // Apply a set of uniform values to a program\n  // Only uniforms actually present in the linked program will be updated.\n  /* eslint-disable max-depth */\n  _setUniforms(uniforms, samplers = {}) {\n    this.gl.useProgram(this.handle);\n\n    for (const uniformName in uniforms) {\n      let uniform = uniforms[uniformName];\n      const uniformSetter = this._uniformSetters[uniformName];\n      const sampler = samplers[uniformName];\n\n      if (uniformSetter) {\n        if (uniform instanceof Framebuffer) {\n          uniform = uniform.texture;\n        }\n        if (uniform instanceof Texture) {\n          if (uniformSetter.textureIndex === undefined) {\n            uniformSetter.textureIndex = this._textureIndexCounter++;\n          }\n\n          // Bind texture to index\n          const texture = uniform;\n          const {textureIndex} = uniformSetter;\n\n          // TODO - this should be separated out from uniform setting, since it needs to be done\n          // before every draw even if uniforms have not changed\n          texture.bind(textureIndex);\n\n          // Bind a sampler (if supplied) to index\n          if (sampler) {\n            sampler.bind(textureIndex);\n          }\n\n          // Set the uniform sampler to the texture index\n          uniformSetter(textureIndex);\n        } else {\n          // Just set the value\n          uniformSetter(uniform);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createProgram();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteProgram(this.handle);\n  }\n\n  // Extract opts needed to initialize a `Program` from an independently created WebGLProgram handle\n  _getOptionsFromHandle(handle) {\n    const shaderHandles = this.gl.getAttachedShaders(handle);\n    const opts = {};\n    for (const shaderHandle of shaderHandles) {\n      const type = this.gl.getShaderParameter(this.handle, GL.SHADER_TYPE);\n      switch (type) {\n      case GL.VERTEX_SHADER:\n        opts.vs = new VertexShader({handle: shaderHandle});\n        break;\n      case GL.FRAGMENT_SHADER:\n        opts.fs = new FragmentShader({handle: shaderHandle});\n        break;\n      default:\n      }\n    }\n    return opts;\n  }\n\n  _getParameter(pname) {\n    return this.gl.getProgramParameter(this.handle, pname);\n  }\n\n  // If program is not named, name it after shader names\n  // TODO - this.id will already have been initialized\n  _setId(id) {\n    if (!id) {\n      const programName = this._getName();\n      this.id = uid(programName);\n    }\n  }\n\n  // Generate a default name for the program based on names of the shaders\n  _getName() {\n    let programName = this.vs.getName() || this.fs.getName();\n    programName = programName.replace(/shader/i, '');\n    programName = programName ? `${programName}-program` : 'program';\n    return programName;\n  }\n\n  _compileAndLink() {\n    const {gl} = this;\n    gl.attachShader(this.handle, this.vs.handle);\n    gl.attachShader(this.handle, this.fs.handle);\n    log.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n    gl.linkProgram(this.handle);\n    log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n\n    // Avoid checking program linking error in production\n    if (gl.debug || log.priority > 0) {\n      gl.validateProgram(this.handle);\n      const linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n      if (!linked) {\n        throw new Error(`Error linking: ${gl.getProgramInfoLog(this.handle)}`);\n      }\n    }\n  }\n\n  // query uniform locations and build name to setter map.\n  _readUniformLocationsFromLinkedProgram() {\n    const {gl} = this;\n    this._uniformSetters = {};\n    this._uniformCount = this._getParameter(GL.ACTIVE_UNIFORMS);\n    for (let i = 0; i < this._uniformCount; i++) {\n      const info = this.gl.getActiveUniform(this.handle, i);\n      const {name, isArray} = parseUniformName(info.name);\n      const location = gl.getUniformLocation(this.handle, name);\n      this._uniformSetters[name] = getUniformSetter(gl, location, info, isArray);\n    }\n    this._textureIndexCounter = 0;\n  }\n\n  // stub for shader chache, should reset uniforms to default valiues\n  reset() {\n  }\n\n  // TO BE REMOVED in v7?\n\n  // Rretrieves information about active uniforms identifed by their indices (`uniformIndices`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniforms\n  getActiveUniforms(uniformIndices, pname) {\n    return this.gl.getActiveUniforms(this.handle, uniformIndices, pname);\n  }\n\n  // Retrieves the index of a uniform block\n  getUniformBlockIndex(blockName) {\n    return this.gl.getUniformBlockIndex(this.handle, blockName);\n  }\n\n  // Retrieves information about an active uniform block (`blockIndex`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter\n  getActiveUniformBlockParameter(blockIndex, pname) {\n    return this.gl.getActiveUniformBlockParameter(this.handle, blockIndex, pname);\n  }\n\n  // Binds a uniform block (`blockIndex`) to a specific binding point (`blockBinding`)\n  uniformBlockBinding(blockIndex, blockBinding) {\n    this.gl.uniformBlockBinding(this.handle, blockIndex, blockBinding);\n  }\n}\n"],"file":"program.js"}