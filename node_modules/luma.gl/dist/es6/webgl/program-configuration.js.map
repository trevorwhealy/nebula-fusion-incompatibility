{"version":3,"sources":["../../../src/webgl/program-configuration.js"],"names":["isWebGL2","decomposeCompositeGLType","Accessor","ProgramConfiguration","constructor","program","attributeInfos","attributeInfosByName","varyings","varyingsByName","Object","seal","_readAttributesFromProgram","_readVaryingsFromProgram","getAttributeInfo","locationOrName","location","Number","isFinite","getLocation","attributeInfo","getVaryingInfo","getVaryingIndex","varying","_addAttribute","name","compositeType","size","type","components","accessor","_inferProperties","push","test","merge","instanced","_addVarying","gl","count","getProgramParameter","handle","ACTIVE_ATTRIBUTES","index","getActiveAttrib","getAttribLocation","sort","a","b","TRANSFORM_FEEDBACK_VARYINGS","getTransformFeedbackVarying"],"mappings":"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","sourcesContent":["// Contains metadata describing attribute configurations for a program's shaders\n// Much of this is automatically extracted from shaders after program linking\nimport {isWebGL2} from '../webgl-utils';\nimport {decomposeCompositeGLType} from '../webgl-utils/attribute-utils';\nimport Accessor from './accessor';\n\nexport default class ProgramConfiguration {\n\n  constructor(program) {\n    this.attributeInfos = [];\n    this.attributeInfosByName = {};\n    this.varyings = [];\n    this.varyingsByName = {};\n    Object.seal(this);\n    this._readAttributesFromProgram(program);\n    this._readVaryingsFromProgram(program);\n  }\n\n  getAttributeInfo(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return this.attributeInfos[location];\n    }\n    return this.attributeInfosByName[locationOrName] || null;\n  }\n\n  getLocation(locationOrName) {\n    const attributeInfo = this.getAttributeInfo(locationOrName);\n    return attributeInfo ? attributeInfo.location : -1;\n  }\n\n  getVaryingInfo(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return this.varyings[location];\n    }\n    return this.varyingsByName[locationOrName] || null;\n  }\n\n  getVaryingIndex(locationOrName) {\n    const varying = this.getVaryingInfo();\n    return varying ? varying.location : -1;\n  }\n\n  _addAttribute(location, name, compositeType, size) {\n    const {type, components} = decomposeCompositeGLType(compositeType);\n    const accessor = new Accessor({type, size: size * components});\n    this._inferProperties(name, accessor);\n\n    const attributeInfo = {location, name, accessor}; // Base values\n    this.attributeInfos.push(attributeInfo);\n    this.attributeInfosByName[attributeInfo.name] = attributeInfo; // For quick name based lookup\n  }\n\n  // Extract additional attribute metadata from shader names (based on attribute naming conventions)\n  _inferProperties(location, name, accessor) {\n    if ((/instance/i).test(name)) {\n      // Any attribute containing the word \"instance\" will be assumed to be instanced\n      accessor.merge({instanced: true});\n    }\n  }\n\n  _addVarying(location, name, compositeType, size) {\n    const {type, components} = decomposeCompositeGLType(compositeType);\n    const accessor = new Accessor({type, size: size * components});\n\n    const varying = {location, name, accessor}; // Base values\n    this.varyings.push(varying);\n    this.varyingsByName[varying.name] = varying; // For quick name based lookup\n  }\n\n  // linkProgram needs to have been called, although linking does not need to have been successful\n  _readAttributesFromProgram(program) {\n    const {gl} = program;\n    const count = gl.getProgramParameter(program.handle, gl.ACTIVE_ATTRIBUTES);\n\n    for (let index = 0; index < count; index++) {\n      const {name, type, size} = gl.getActiveAttrib(program.handle, index);\n      const location = gl.getAttribLocation(program.handle, name);\n      this._addAttribute(location, name, type, size);\n    }\n\n    this.attributeInfos.sort((a, b) => a.location - b.location);\n  }\n\n  // linkProgram needs to have been called, although linking does not need to have been successful\n  _readVaryingsFromProgram(program) {\n    const {gl} = program;\n    if (!isWebGL2(gl)) {\n      return;\n    }\n\n    const count = gl.getProgramParameter(program.handle, gl.TRANSFORM_FEEDBACK_VARYINGS);\n    for (let location = 0; location < count; location++) {\n      const {name, type, size} = gl.getTransformFeedbackVarying(program.handle, location);\n      this._addVarying(location, name, type, size);\n    }\n\n    this.varyings.sort((a, b) => a.location - b.location);\n  }\n}\n"],"file":"program-configuration.js"}