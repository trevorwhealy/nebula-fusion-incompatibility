{"version":3,"sources":["../../../src/webgl/vertex-array.js"],"names":["GL","Resource","Accessor","Buffer","isWebGL2","glKey","getCompositeGLType","log","formatValue","assert","OES_vertex_array_object","GL_ELEMENT_ARRAY_BUFFER","ERR_WEBGL1","ERR_ELEMENTS","ERR_ATTRIBUTE_TYPE","VertexArray","isSupported","gl","getExtension","getDefaultArray","luma","defaultVertexArray","handle","getMaxAttributes","MAX_VERTEX_ATTRIBS","getParameter","constructor","opts","Error","id","program","Object","assign","configuration","elements","values","infos","accessors","unused","drawParams","unbindBuffer","stubRemovedMethods","_initialize","seal","delete","MAX_ATTRIBUTES","setProps","props","bindOnUse","setAttributes","attributes","setElements","reset","clear","disableZero","_unbindBuffers","bind","bindBuffer","ELEMENT_ARRAY_BUFFER","i","setConstant","Array","fill","isInstanced","isIndexed","indexType","locationOrName","value","isArray","length","buffer","accessor","setBuffer","ArrayBuffer","isView","elementBuffer","target","Boolean","getOptions","type","location","_getAttributeIndex","once","accessInfo","_getAttributeInfo","name","String","size","stride","offset","normalized","divisor","Number","isFinite","ARRAY_BUFFER","integer","vertexAttribPointer","vertexAttribIPointer","enableVertexAttribArray","vertexAttribDivisor","arrayValue","warn","Float32Array","_setConstant","disableVertexAttribArray","attributeName","getAttributeInfo","getLocation","array","_setConstantFloatArray","Int32Array","_setConstantIntArray","Uint32Array","_setConstantUintArray","vertexAttrib1fv","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttribI1iv","vertexAttribI2iv","vertexAttribI3iv","vertexAttribI4iv","vertexAttribI1uiv","vertexAttribI2uiv","vertexAttribI3uiv","vertexAttribI4uiv","unbindBuffers","FLOAT","bindBuffers","_setConstantAttributes","constant","_createHandle","createVertexArray","error","_deleteHandle","deleteVertexArray","_bindHandle","bindVertexArray","_getParameter","pname","VERTEX_ATTRIB_ARRAY_POINTER","getVertexAttribOffset","getVertexAttrib","_getDebugTable","header","table","_getDebugTableRow","info","rowHeader","typeAndName","attribute","verts","bytes","isInteger","marker","replace","indexOf","getDebugData","data","modified","BYTES_PER_ELEMENT","format","instanced"],"mappings":"AAAA;AACA,OAAOA,EAAP,MAAe,cAAf;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAAQC,QAAR,QAAuB,gBAAvB;AACA,SAAQC,KAAR,QAAoB,kCAApB;AACA,SAAQC,kBAAR,QAAiC,gCAAjC;AACA,SAAQC,GAAR,EAAaC,WAAb,EAA0BC,MAA1B,QAAuC,UAAvC;AAEA;;AACA,MAAMC,0BAA0B,yBAAhC;AAEA,MAAMC,0BAA0B,MAAhC;AAEA,MAAMC,aAAa;+DAAnB;AAEA,MAAMC,eAAe,0CAArB;AACA,MAAMC,qBAAqB,gEAA3B;AAEA,eAAe,MAAMC,WAAN,SAA0Bd,QAA1B,CAAmC;AAEhD;AACA,SAAOe,WAAP,CAAmBC,EAAnB,EAAuB;AACrB,WAAOb,SAASa,EAAT,KAAgBA,GAAGC,YAAH,CAAgBR,uBAAhB,CAAvB;AACD,GAL+C,CAOhD;;;AACA,SAAOS,eAAP,CAAuBF,EAAvB,EAA2B;AACzBA,OAAGG,IAAH,GAAUH,GAAGG,IAAH,IAAW,EAArB;;AACA,QAAI,CAACH,GAAGG,IAAH,CAAQC,kBAAb,EAAiC;AAC/BJ,SAAGG,IAAH,CAAQC,kBAAR,GAA6B,IAAIN,WAAJ,CAAgBE,EAAhB,EAAoB;AAACK,gBAAQ;AAAT,OAApB,CAA7B;AACD;;AACD,WAAOL,GAAGG,IAAH,CAAQC,kBAAf;AACD;;AAED,SAAOE,gBAAP,CAAwBN,EAAxB,EAA4B;AAC1BF,gBAAYS,kBAAZ,GAAiCT,YAAYS,kBAAZ,IAC/BP,GAAGQ,YAAH,CAAgBR,GAAGO,kBAAnB,CADF;AAEA,WAAOT,YAAYS,kBAAnB;AACD,GApB+C,CAsBhD;;;AACAE,cAAYT,EAAZ,EAAgBU,OAAO,EAAvB,EAA2B;AACzB,QAAIA,KAAKL,MAAL,IAAe,CAACP,YAAYC,WAAZ,CAAwBC,EAAxB,CAApB,EAAiD;AAC/C,YAAM,IAAIW,KAAJ,CAAUhB,UAAV,CAAN;AACD,KAHwB,CAKzB;;;AACA,UAAMiB,KAAKF,KAAKE,EAAL,IAAWF,KAAKG,OAAL,IAAgBH,KAAKG,OAAL,CAAaD,EAAnD;AACA,UAAMZ,EAAN,EAAUc,OAAOC,MAAP,CAAc,EAAd,EAAkBL,IAAlB,EAAwB;AAACE;AAAD,KAAxB,CAAV;AAEA,SAAKI,aAAL,GAAqB,IAArB,CATyB,CAWzB;;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,YAAL,GAAoB,IAApB,CAlByB,CAkBC;;AAE1B,SAAKC,kBAAL,CAAwB,aAAxB,EAAuC,MAAvC,EAA+C,CAC7C,YAD6C,EAE7C,YAF6C,EAG7C,eAH6C,EAI7C,cAJ6C,EAK7C,kBAL6C,EAM7C,YAN6C,EAO7C,QAP6C,EAQ7C,SAR6C,CAA/C;;AAWA,SAAKC,WAAL,CAAiBf,IAAjB;;AACAI,WAAOY,IAAP,CAAY,IAAZ;AACD;;AAEDC,WAAS;AACP,UAAMA,MAAN;;AACA,QAAI,KAAKJ,YAAT,EAAuB;AACrB,WAAKA,YAAL,CAAkBI,MAAlB;AACD;AACF;;AAED,MAAIC,cAAJ,GAAqB;AACnB,WAAO9B,YAAYQ,gBAAZ,CAA6B,KAAKN,EAAlC,CAAP;AACD;;AAED6B,WAASC,KAAT,EAAgB;AACd,QAAI,aAAaA,KAAjB,EAAwB;AACtB,WAAKd,aAAL,GAAqBc,MAAMjB,OAAN,IAAiBiB,MAAMjB,OAAN,CAAcG,aAApD;AACD;;AACD,QAAI,mBAAmBc,KAAvB,EAA8B;AAC5B,WAAKd,aAAL,GAAqBc,MAAMd,aAA3B;AACD;;AACD,QAAI,eAAec,KAAnB,EAA0B;AACxBA,cAAQA,MAAMC,SAAd;AACD;;AACD,QAAI,gBAAgBD,KAApB,EAA2B;AACzB,WAAKE,aAAL,CAAmBF,MAAMG,UAAzB;AACD;;AACD,QAAI,cAAcH,KAAlB,EAAyB;AACvB,WAAKI,WAAL,CAAiBJ,MAAMb,QAAvB;AACD;;AACD,WAAO,IAAP;AACD,GAtF+C,CAwFhD;;;AACAkB,QAAMC,QAAQ,IAAd,EAAoBC,cAAc,IAAlC,EAAwC;AACtC,QAAID,KAAJ,EAAW;AACT,WAAKE,cAAL;;AACA,WAAKC,IAAL,CAAU,MAAM;AACd;AACA,aAAKvC,EAAL,CAAQwC,UAAR,CAAmB,KAAKxC,EAAL,CAAQyC,oBAA3B,EAAiD,IAAjD;;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKd,cAAzB,EAAyCc,GAAzC,EAA8C;AAC5C,cAAIA,IAAI,CAAJ,IAASL,WAAb,EAA0B;AACxB,iBAAKM,WAAL,CAAiBD,CAAjB,EAAoB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAApB,EADwB,CACW;AACpC;AACF;AACF,OARD;AASD;;AAED,SAAKzB,QAAL,GAAgB,IAAhB;AACA,SAAKC,MAAL,GAAc,IAAI0B,KAAJ,CAAU,KAAKrC,kBAAf,EAAmCsC,IAAnC,CAAwC,IAAxC,CAAd;AACA,SAAK1B,KAAL,GAAa,IAAIyB,KAAJ,CAAU,KAAKrC,kBAAf,EAAmCsC,IAAnC,CAAwC,EAAxC,CAAb;AACA,SAAKzB,SAAL,GAAiB,IAAIwB,KAAJ,CAAU,KAAKrC,kBAAf,EAAmCsC,IAAnC,CAAwC,IAAxC,CAAjB;AACA,SAAKxB,MAAL,GAAc,EAAd,CAlBsC,CAoBtC;;AACA,SAAKC,UAAL,GAAkB;AAChBwB,mBAAa,KADG;AAEhB;AACA;AACAC,iBAAW,KAJK;AAKhBC,iBAAW;AALK,KAAlB;AAQA,WAAO,IAAP;AACD,GAvH+C,CAyHhD;AACA;AACA;;;AACAhB,gBAAcC,UAAd,EAA0B;AACxB,SAAKM,IAAL,CAAU,MAAM;AACd,WAAK,MAAMU,cAAX,IAA6BhB,UAA7B,EAAyC;AACvC,cAAMiB,QAAQjB,WAAWgB,cAAX,CAAd;;AACA,YAAIL,MAAMO,OAAN,CAAcD,KAAd,KAAwBA,MAAME,MAA9B,IAAwCF,MAAM,CAAN,aAAoBhE,MAAhE,EAAwE;AACtE,gBAAMmE,SAASH,MAAM,CAAN,CAAf;AACA,gBAAMI,WAAWJ,MAAM,CAAN,CAAjB;AACA,eAAKK,SAAL,CAAeN,cAAf,EAA+BI,MAA/B,EAAuCC,QAAvC;AACD,SAJD,MAIO,IAAIJ,iBAAiBhE,MAArB,EAA6B;AAClC,eAAKqE,SAAL,CAAeN,cAAf,EAA+BC,KAA/B;AACD,SAFM,MAEA,IAAIM,YAAYC,MAAZ,CAAmBP,KAAnB,KAA6BN,MAAMO,OAAN,CAAcD,KAAd,CAAjC,EAAuD;AAC5D,eAAKP,WAAL,CAAiBM,cAAjB,EAAiCC,KAAjC;AACD,SAFM,MAEA;AACL,gBAAM,IAAIvC,KAAJ,CAAUd,kBAAV,CAAN;AACD;AACF;AACF,KAfD;AAiBA,WAAO,IAAP;AACD,GA/I+C,CAiJhD;AACA;;;AACAqC,cAAYwB,gBAAgB,IAA5B,EAAkChD,OAAO,EAAzC,EAA6C;AAC3ClB,WAAO,CAACkE,aAAD,IAAkBA,cAAcC,MAAd,KAAyBjE,uBAAlD,EAA2EE,YAA3E;AAEA,SAAK2C,IAAL,CAAU,MAAM;AACd,WAAKvC,EAAL,CAAQwC,UAAR,CAAmB9C,uBAAnB,EAA4CgE,gBAAgBA,cAAcrD,MAA9B,GAAuC,IAAnF;AACD,KAFD;AAGA,SAAKY,QAAL,GAAgByC,aAAhB,CAN2C,CAQ3C;;AACA,SAAKpC,UAAL,CAAgByB,SAAhB,GAA4Ba,QAAQF,aAAR,CAA5B;;AACA,QAAIA,aAAJ,EAAmB;AACjB,WAAKpC,UAAL,CAAgB0B,SAAhB,GAA4BU,cAAcJ,QAAd,CAAuBO,UAAvB,CAAkCnD,IAAlC,EAAwCoD,IAApE;AACD,KAFD,MAEO;AACL,aAAO,KAAKxC,UAAL,CAAgB0B,SAAvB;AACD;;AAED,WAAO,IAAP;AACD,GApK+C,CAsKhD;;;AACAO,YAAUN,cAAV,EAA0BI,MAA1B,EAAkC3C,OAAO,EAAzC,EAA6C;AAAA,UACpCV,EADoC,GAC9B,IAD8B,CACpCA,EADoC,EAG3C;;AACA,QAAIqD,OAAOM,MAAP,KAAkB3D,GAAGyC,oBAAzB,EAA+C;AAC7C,aAAO,KAAKP,WAAL,CAAiBmB,MAAjB,CAAP;AACD;;AAED,UAAMU,WAAW,KAAKC,kBAAL,CAAwBf,cAAxB,CAAjB;;AACA,QAAIc,WAAW,CAAf,EAAkB;AAChB,WAAK1C,MAAL,CAAY4B,cAAZ,IAA8BI,MAA9B;AACA/D,UAAI2E,IAAJ,CAAS,CAAT,EAAY,MAAO,2BAA0BhB,cAAe,OAAM,KAAKrC,EAAG,EAA1E;AACA,aAAO,IAAP;AACD;;AAED,SAAK2B,IAAL,CAAU,MAAM;AACd,YAAM2B,aAAa,KAAKC,iBAAL,CAAuBlB,cAAvB,EAAuCI,MAAvC,EAA+C3C,IAA/C,CAAnB;;AACA,YAAM0D,OAAOF,aAAaA,WAAWE,IAAxB,GAA+BC,OAAON,QAAP,CAA5C,CAFc,CAId;;AACA,UAAIT,WAAWY,aAAaA,WAAWZ,QAAxB,GAAmC,IAAIrE,QAAJ,EAAlD;AACAqE,iBAAWA,SAASO,UAAT,CAAoBR,MAApB,EAA4BA,OAAOC,QAAnC,EAA6C5C,IAA7C,CAAX;AAEA,WAAKQ,MAAL,CAAY6C,QAAZ,IAAwBV,MAAxB;AACA,WAAKjC,SAAL,CAAe2C,QAAf,IAA2BT,QAA3B;AACA,WAAKnC,KAAL,CAAW4C,QAAX,IAAuB;AAACA,gBAAD;AAAWK,YAAX;AAAiBd;AAAjB,OAAvB;AAVc,wBAY4CA,QAZ5C;AAAA,YAYPgB,IAZO,aAYPA,IAZO;AAAA,YAYDR,IAZC,aAYDA,IAZC;AAAA,YAYKS,MAZL,aAYKA,MAZL;AAAA,YAYaC,MAZb,aAYaA,MAZb;AAAA,YAYqBC,UAZrB,aAYqBA,UAZrB;AAAA,YAYiCC,OAZjC,aAYiCA,OAZjC;AAadlF,aAAOmF,OAAOC,QAAP,CAAgBN,IAAhB,KAAyBK,OAAOC,QAAP,CAAgBd,IAAhB,CAAhC,EAbc,CAed;;AACAT,aAAOd,IAAP,CAAY;AAACoB,gBAAQ3D,GAAG6E;AAAZ,OAAZ,EAhBc,CAkBd;;AACA,UAAI,CAACnE,KAAKoE,OAAV,EAAmB;AACjB9E,WAAG+E,mBAAH,CAAuBhB,QAAvB,EAAiCO,IAAjC,EAAuCR,IAAvC,EAA6CW,UAA7C,EAAyDF,MAAzD,EAAiEC,MAAjE;AACD,OAFD,MAEO;AACL;AACAhF,eAAOL,SAASa,EAAT,CAAP;AACAA,WAAGgF,oBAAH,CAAwBjB,QAAxB,EAAkCO,IAAlC,EAAwCR,IAAxC,EAA8CS,MAA9C,EAAsDC,MAAtD;AACD;;AACDxE,SAAGiF,uBAAH,CAA2BlB,QAA3B;AACA/D,SAAGkF,mBAAH,CAAuBnB,QAAvB,EAAiCW,WAAW,CAA5C,EA3Bc,CA6Bd;AAEA;;AACA,YAAM5B,cAAc4B,UAAU,CAA9B;AACA,WAAKpD,UAAL,CAAgBwB,WAAhB,GAA8B,KAAKxB,UAAL,CAAgBwB,WAAhB,IAA+BA,WAA7D;AACD,KAlCD;AAoCA,WAAO,IAAP;AACD,GA3N+C,CA6NhD;AACA;AACA;;;AACAH,cAAYM,cAAZ,EAA4BkC,UAA5B,EAAwCzE,IAAxC,EAA8C;AAC5C,UAAMwD,aAAa,KAAKC,iBAAL,CAAuBlB,cAAvB,EAAuCkC,UAAvC,EAAmDzE,IAAnD,CAAnB;;AACA,QAAI,CAACwD,UAAL,EAAiB;AACf,WAAK7C,MAAL,CAAY4B,cAAZ,IAA8BkC,UAA9B;AACA7F,UAAI8F,IAAJ,CAAS,MAAO,GAAE,KAAKxE,EAAG,8BAA6BqC,cAAe,EAAtE;AACA,aAAO,IAAP;AACD,KAN2C,CAQ5C;;;AACA,QAAIL,MAAMO,OAAN,CAAcgC,UAAd,CAAJ,EAA+B;AAC7BA,mBAAa,IAAIE,YAAJ,CAAiBF,UAAjB,CAAb;AACD;;AAED,SAAK5C,IAAL,CAAU,MAAM;AAAA,YACPwB,QADO,GACKG,UADL,CACPH,QADO;;AAGd,WAAKuB,YAAL,CAAkBvB,QAAlB,EAA4BoB,UAA5B,EAHc,CAKd;AAEA;AACA;AACA;;;AACA,WAAKnF,EAAL,CAAQuF,wBAAR,CAAiCxB,QAAjC,EAVc,CAYd;;AACA,WAAK/D,EAAL,CAAQkF,mBAAR,CAA4BnB,QAA5B,EAAsC,CAAtC,EAbc,CAed;;AACA,WAAK7C,MAAL,CAAY6C,QAAZ,IAAwBoB,UAAxB;AACD,KAjBD;AAkBA,WAAO,IAAP;AACD,GAhQ+C,CAkQhD;;;AAEAhB,oBAAkBqB,aAAlB,EAAiC;AAC/B,WAAO,KAAKxE,aAAL,IAAsB,KAAKA,aAAL,CAAmByE,gBAAnB,CAAoCD,aAApC,CAA7B;AACD;;AAEDxB,qBAAmBf,cAAnB,EAAmC;AACjC,QAAI,KAAKjC,aAAT,EAAwB;AACtB,aAAO,KAAKA,aAAL,CAAmB0E,WAAnB,CAA+BzC,cAA/B,CAAP;AACD;;AACD,UAAMc,WAAWY,OAAO1B,cAAP,CAAjB;;AACA,QAAI0B,OAAOC,QAAP,CAAgBb,QAAhB,CAAJ,EAA+B;AAC7B,aAAOA,QAAP;AACD;;AACD,WAAO,CAAC,CAAR;AACD;;AAEDtC,cAAYK,QAAQ,EAApB,EAAwB;AACtB,SAAKK,KAAL,CAAW,KAAX;AACA,SAAKnB,aAAL,GAAqB,IAArB;AACA,SAAKe,SAAL,GAAiB,KAAjB;AACA,WAAO,KAAKF,QAAL,CAAcC,KAAd,CAAP;AACD,GAxR+C,CA0RhD;AACA;AACA;;;AACAwD,eAAavB,QAAb,EAAuB4B,KAAvB,EAA8B;AAC5B,YAAQA,MAAMlF,WAAd;AACA,WAAK4E,YAAL;AACE,aAAKO,sBAAL,CAA4B7B,QAA5B,EAAsC4B,KAAtC;;AACA;;AACF,WAAKE,UAAL;AACE,aAAKC,oBAAL,CAA0B/B,QAA1B,EAAoC4B,KAApC;;AACA;;AACF,WAAKI,WAAL;AACE,aAAKC,qBAAL,CAA2BjC,QAA3B,EAAqC4B,KAArC;;AACA;;AACF;AACEnG,eAAO,KAAP;AAXF;AAaD;;AAEDoG,yBAAuB7B,QAAvB,EAAiC4B,KAAjC,EAAwC;AAAA,UAC/B3F,EAD+B,GACzB,IADyB,CAC/BA,EAD+B;;AAEtC,YAAQ2F,MAAMvC,MAAd;AACA,WAAK,CAAL;AAAQpD,WAAGiG,eAAH,CAAmBlC,QAAnB,EAA6B4B,KAA7B;AAAqC;;AAC7C,WAAK,CAAL;AAAQ3F,WAAGkG,eAAH,CAAmBnC,QAAnB,EAA6B4B,KAA7B;AAAqC;;AAC7C,WAAK,CAAL;AAAQ3F,WAAGmG,eAAH,CAAmBpC,QAAnB,EAA6B4B,KAA7B;AAAqC;;AAC7C,WAAK,CAAL;AAAQ3F,WAAGoG,eAAH,CAAmBrC,QAAnB,EAA6B4B,KAA7B;AAAqC;;AAC7C;AAASnG,eAAO,KAAP;AALT;AAOD;;AAEDsG,uBAAqB/B,QAArB,EAA+B4B,KAA/B,EAAsC;AAAA,UAC7B3F,EAD6B,GACvB,IADuB,CAC7BA,EAD6B;AAEpCR,WAAOL,SAASa,EAAT,CAAP;;AACA,YAAQ2F,MAAMvC,MAAd;AACA,WAAK,CAAL;AAAQpD,WAAGqG,gBAAH,CAAoBtC,QAApB,EAA8B4B,KAA9B;AAAsC;;AAC9C,WAAK,CAAL;AAAQ3F,WAAGsG,gBAAH,CAAoBvC,QAApB,EAA8B4B,KAA9B;AAAsC;;AAC9C,WAAK,CAAL;AAAQ3F,WAAGuG,gBAAH,CAAoBxC,QAApB,EAA8B4B,KAA9B;AAAsC;;AAC9C,WAAK,CAAL;AAAQ3F,WAAGwG,gBAAH,CAAoBzC,QAApB,EAA8B4B,KAA9B;AAAsC;;AAC9C;AAASnG,eAAO,KAAP;AALT;AAOD;;AAEDwG,wBAAsBjC,QAAtB,EAAgC4B,KAAhC,EAAuC;AAAA,UAC9B3F,EAD8B,GACxB,IADwB,CAC9BA,EAD8B;AAErCR,WAAOL,SAASa,EAAT,CAAP;;AACA,YAAQ2F,MAAMvC,MAAd;AACA,WAAK,CAAL;AAAQpD,WAAGyG,iBAAH,CAAqB1C,QAArB,EAA+B4B,KAA/B;AAAuC;;AAC/C,WAAK,CAAL;AAAQ3F,WAAG0G,iBAAH,CAAqB3C,QAArB,EAA+B4B,KAA/B;AAAuC;;AAC/C,WAAK,CAAL;AAAQ3F,WAAG2G,iBAAH,CAAqB5C,QAArB,EAA+B4B,KAA/B;AAAuC;;AAC/C,WAAK,CAAL;AAAQ3F,WAAG4G,iBAAH,CAAqB7C,QAArB,EAA+B4B,KAA/B;AAAuC;;AAC/C;AAASnG,eAAO,KAAP;AALT;AAOD,GA9U+C,CAgVhD;;;AACAqH,gBAAcxE,cAAc,IAA5B,EAAkC;AAChC,SAAKE,IAAL,CAAU,MAAM;AACd;AACA;AACA,WAAKhB,YAAL,GAAoB,KAAKA,YAAL,IAAqB,IAAIrC,MAAJ,CAAW,KAAKc,EAAhB,EAAoB;AAACsE,cAAM;AAAP,OAApB,CAAzC;;AAEA,WAAK,MAAMP,QAAX,IAAuB,KAAK7C,MAA5B,EAAoC;AAClC,YAAI,KAAKA,MAAL,CAAY6C,QAAZ,aAAiC7E,MAArC,EAA6C;AAC3C,eAAKc,EAAL,CAAQuF,wBAAR,CAAiCxB,QAAjC;AACA,eAAK/D,EAAL,CAAQwC,UAAR,CAAmB,KAAKxC,EAAL,CAAQ6E,YAA3B,EAAyC,KAAKtD,YAAL,CAAkBlB,MAA3D;AACA,eAAKL,EAAL,CAAQ+E,mBAAR,CAA4BhB,QAA5B,EAAsC,CAAtC,EAAyC,KAAK/D,EAAL,CAAQ8G,KAAjD,EAAwD,KAAxD,EAA+D,CAA/D,EAAkE,CAAlE;AACD;AACF;AACF,KAZD;AAaD,GA/V+C,CAiWhD;;;AACAC,gBAAc;AACZ,SAAKxE,IAAL,CAAU,MAAM;AACd,WAAK,MAAMwB,QAAX,IAAuB,KAAK7C,MAA5B,EAAoC;AAClC,cAAMmC,SAAS,KAAKnC,MAAL,CAAY6C,QAAZ,CAAf;;AACA,YAAIV,kBAAkBnE,MAAtB,EAA8B;AAC5B,eAAKqE,SAAL,CAAeQ,QAAf,EAAyBV,MAAzB;AACD;AACF;AACF,KAPD;AAQD,GA3W+C,CA6WhD;AACA;AACA;;;AACA2D,2BAAyB;AACvB,SAAK,MAAMjD,QAAX,IAAuB,KAAK7C,MAA5B,EAAoC;AAClC,YAAM+F,WAAW,KAAK/F,MAAL,CAAY6C,QAAZ,CAAjB;;AACA,UAAIP,YAAYC,MAAZ,CAAmBwD,QAAnB,CAAJ,EAAkC;AAChC,aAAK3B,YAAL,CAAkBX,OAAOZ,QAAP,CAAlB,EAAoCkD,QAApC;;AACA,aAAKjH,EAAL,CAAQuF,wBAAR,CAAiCZ,OAAOZ,QAAP,CAAjC;AACA,aAAK/D,EAAL,CAAQkF,mBAAR,CAA4BP,OAAOZ,QAAP,CAA5B,EAA8C,CAA9C;AACD;AACF;AACF,GAzX+C,CA2XhD;;;AAEAmD,kBAAgB;AACd,QAAI;AACF,aAAO,KAAKlH,EAAL,CAAQmH,iBAAR,EAAP;AACD,KAFD,CAEE,OAAOC,KAAP,EAAc;AACd9H,UAAI8H,KAAJ,CAAUzH,UAAV;AACA,YAAMyH,KAAN;AACD;AACF;;AAEDC,gBAAchH,MAAd,EAAsB;AACpB,SAAKL,EAAL,CAAQsH,iBAAR,CAA0BjH,MAA1B;AACA,WAAO,CAAC,KAAKY,QAAN,CAAP,CAFoB,CAGpB;AACD;;AAEDsG,cAAYlH,MAAZ,EAAoB;AAClB,SAAKL,EAAL,CAAQwH,eAAR,CAAwBnH,MAAxB,EADkB,CAElB;;AACA,QAAIA,WAAW,KAAKA,MAApB,EAA4B;AAC1B,WAAK2G,sBAAL;AACD;AACF,GAlZ+C,CAoZhD;;;AACAS,gBAAcC,KAAd,EAAqB;AAAC3D;AAAD,GAArB,EAAiC;AAC/BvE,WAAOmF,OAAOC,QAAP,CAAgBb,QAAhB,CAAP;AACA,WAAO,KAAKxB,IAAL,CAAU,MAAM;AACrB,cAAQmF,KAAR;AACA,aAAK3I,GAAG4I,2BAAR;AAAqC,iBAAO,KAAK3H,EAAL,CAAQ4H,qBAAR,CAA8B7D,QAA9B,EAAwC2D,KAAxC,CAAP;;AACrC;AAAS,iBAAO,KAAK1H,EAAL,CAAQ6H,eAAR,CAAwB9D,QAAxB,EAAkC2D,KAAlC,CAAP;AAFT;AAID,KALM,CAAP;AAMD;;AAEDI,iBAAe;AAACC,aAAS;AAAV,MAA0B,EAAzC,EAA6C;AAC3C,QAAI,CAAC,KAAK/G,aAAV,EAAyB;AACvB,aAAO,EAAP;AACD;;AAED,UAAMgH,QAAQ,EAAd,CAL2C,CAKzB;AAElB;;AACA,QAAI,KAAK/G,QAAT,EAAmB;AACjB;AACA+G,YAAMvF,oBAAN,GACE,KAAKwF,iBAAL,CAAuB,KAAKhH,QAA5B,EAAsC,IAAtC,EAA4C8G,MAA5C,CADF;AAED,KAZ0C,CAc3C;;;AACA,UAAM9F,aAAa,KAAKf,MAAxB;;AAEA,SAAK,MAAMsE,aAAX,IAA4BvD,UAA5B,EAAwC;AACtC,YAAMiG,OAAO,KAAK/D,iBAAL,CAAuBqB,aAAvB,CAAb;;AACA,UAAI0C,IAAJ,EAAU;AACR,YAAIC,YAAa,GAAE3C,aAAc,KAAI0C,KAAK9D,IAAK,EAA/C;AACA,cAAMd,WAAW,KAAKlC,SAAL,CAAe8G,KAAKnE,QAApB,CAAjB;;AACA,YAAIT,QAAJ,EAAc;AACZ,gBAAM8E,cAAc/I,mBAAmBiE,SAASQ,IAA5B,EAAkCR,SAASgB,IAA3C,CAApB;;AACA,cAAI8D,WAAJ,EAAiB;AAAE;AACjBD,wBAAa,GAAE3C,aAAc,KAAI0C,KAAK9D,IAAK,KAAIgE,YAAYhE,IAAK,GAAhE;AACD;AACF;;AACD4D,cAAMG,SAAN,IACE,KAAKF,iBAAL,CAAuBhG,WAAWuD,aAAX,CAAvB,EAAkDlC,QAAlD,EAA4DyE,MAA5D,CADF;AAED;AACF;;AAED,WAAOC,KAAP;AACD;AAED;;;AACAC,oBAAkBI,SAAlB,EAA6B/E,QAA7B,EAAuCyE,MAAvC,EAA+C;AAAA,UACtC/H,EADsC,GAChC,IADgC,CACtCA,EADsC,EAE7C;;AAEA,QAAI8D,OAAO,cAAX;AACA,QAAIQ,OAAO,KAAX;AACA,QAAIgE,QAAQ,KAAZ;AACA,QAAIC,QAAQ,KAAZ;AAEA,QAAIC,SAAJ;AACA,QAAIC,MAAJ;AACA,QAAIvF,KAAJ;;AAEA,QAAII,QAAJ,EAAc;AACZQ,aAAOR,SAASQ,IAAhB;AACAQ,aAAOhB,SAASgB,IAAhB,CAFY,CAIZ;;AACAR,aAAOO,OAAOP,IAAP,EAAa4E,OAAb,CAAqB,OAArB,EAA8B,EAA9B,CAAP,CALY,CAOZ;;AACAF,kBAAY1E,KAAK6E,OAAL,CAAa,IAAb,MAAuB,CAAC,CAApC;AACD;;AAED,QAAIN,qBAAqBnJ,MAAzB,EAAiC;AAC/B,YAAMmE,SAASgF,SAAf;;AAD+B,mCAGNhF,OAAOuF,YAAP,EAHM;AAAA,YAGxBC,IAHwB,wBAGxBA,IAHwB;AAAA,YAGlBC,QAHkB,wBAGlBA,QAHkB;;AAI/BL,eAASK,WAAW,GAAX,GAAiB,EAA1B;AAEA5F,cAAQ2F,IAAR;AACAN,cAAQlF,OAAOkF,KAAf;AACAD,cAAQC,QAAQM,KAAKE,iBAAb,GAAiCzE,IAAzC;AAEA,UAAI0E,MAAJ;;AAEA,UAAI1F,QAAJ,EAAc;AACZ,cAAM2F,YAAY3F,SAASoB,OAAT,GAAmB,CAArC;AACAsE,iBAAU,GAAEC,YAAY,IAAZ,GAAmB,IAAK,IAAGX,KAAM,MAAKhE,IAAK,IAAGiE,KAAM,UAASnJ,MAAMY,EAAN,EAAU8D,IAAV,CAAgB,GAAzF;AACD,OAHD,MAGO;AACL;AACA0E,oBAAY,IAAZ;AACAQ,iBAAU,GAAET,KAAM,QAAlB;AACD;;AAED,aAAO;AACL,SAACR,MAAD,GAAW,GAAEU,MAAO,GAAElJ,YAAY2D,KAAZ,EAAmB;AAACoB,cAAD;AAAOkE;AAAP,SAAnB,CAAsC,EADvD;AAEL,mBAAWQ;AAFN,OAAP;AAID,KAjD4C,CAmD7C;;;AACA9F,YAAQmF,SAAR;AACA/D,WAAO+D,UAAUjF,MAAjB,CArD6C,CAsD7C;;AACAU,WAAOO,OAAOgE,UAAU5H,WAAV,CAAsB2D,IAA7B,EAAmCsE,OAAnC,CAA2C,OAA3C,EAAoD,EAApD,CAAP,CAvD6C,CAwD7C;;AACAF,gBAAY1E,KAAK6E,OAAL,CAAa,IAAb,MAAuB,CAAC,CAApC;AAEA,WAAO;AACL,OAACZ,MAAD,GAAW,GAAExI,YAAY2D,KAAZ,EAAmB;AAACoB,YAAD;AAAOkE;AAAP,OAAnB,CAAsC,aAD9C;AAEL,iBAAY,GAAElE,IAAK,IAAGR,IAAK;AAFtB,KAAP;AAKD;AACD;;;AArgBgD","sourcesContent":["// WebGL2 VertexArrayObject class (polyfilled/extended in WebGL1)\nimport GL from '../constants';\nimport Resource from './resource';\nimport Accessor from './accessor';\nimport Buffer from './buffer';\nimport {isWebGL2} from '../webgl-utils';\nimport {glKey} from '../webgl-utils/constants-to-keys';\nimport {getCompositeGLType} from '../webgl-utils/attribute-utils';\nimport {log, formatValue, assert} from '../utils';\n\n/* eslint-disable camelcase */\nconst OES_vertex_array_object = 'OES_vertex_array_object';\n\nconst GL_ELEMENT_ARRAY_BUFFER = 0x8893;\n\nconst ERR_WEBGL1 = 'Only WebGL2 contexts are supported by default. \\\nTo enable support for  older browsers, import \"luma.gl/webgl1\"';\nconst ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';\nconst ERR_ATTRIBUTE_TYPE = 'VertexArray: attributes must be Buffer or typed array constant';\n\nexport default class VertexArray extends Resource {\n\n  // Not correct if webgl1 polyfills not installed\n  static isSupported(gl) {\n    return isWebGL2(gl) || gl.getExtension(OES_vertex_array_object);\n  }\n\n  // Returns the global (null) vertex array object. Exists even when no extension available\n  static getDefaultArray(gl) {\n    gl.luma = gl.luma || {};\n    if (!gl.luma.defaultVertexArray) {\n      gl.luma.defaultVertexArray = new VertexArray(gl, {handle: null});\n    }\n    return gl.luma.defaultVertexArray;\n  }\n\n  static getMaxAttributes(gl) {\n    VertexArray.MAX_VERTEX_ATTRIBS = VertexArray.MAX_VERTEX_ATTRIBS ||\n      gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    return VertexArray.MAX_VERTEX_ATTRIBS;\n  }\n\n  // Create a VertexArray\n  constructor(gl, opts = {}) {\n    if (opts.handle && !VertexArray.isSupported(gl)) {\n      throw new Error(ERR_WEBGL1);\n    }\n\n    // Use program's id if program but no id is supplied\n    const id = opts.id || opts.program && opts.program.id;\n    super(gl, Object.assign({}, opts, {id}));\n\n    this.configuration = null;\n\n    // Extracted information\n    this.elements = null;\n    this.values = null;\n    this.infos = null;\n    this.accessors = null;\n    this.unused = null;\n    this.drawParams = null;\n    this.unbindBuffer = null; // Created when unbinding buffers\n\n    this.stubRemovedMethods('VertexArray', 'v6.0', [\n      'setBuffers',\n      'setGeneric',\n      'clearBindings',\n      'setLocations',\n      'setGenericValues',\n      'setDivisor',\n      'enable',\n      'disable'\n    ]);\n\n    this._initialize(opts);\n    Object.seal(this);\n  }\n\n  delete() {\n    super.delete();\n    if (this.unbindBuffer) {\n      this.unbindBuffer.delete();\n    }\n  }\n\n  get MAX_ATTRIBUTES() {\n    return VertexArray.getMaxAttributes(this.gl);\n  }\n\n  setProps(props) {\n    if ('program' in props) {\n      this.configuration = props.program && props.program.configuration;\n    }\n    if ('configuration' in props) {\n      this.configuration = props.configuration;\n    }\n    if ('bindOnUse' in props) {\n      props = props.bindOnUse;\n    }\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n    if ('elements' in props) {\n      this.setElements(props.elements);\n    }\n    return this;\n  }\n\n  // Resets all attributes (to default valued constants)\n  reset(clear = true, disableZero = true) {\n    if (clear) {\n      this._unbindBuffers();\n      this.bind(() => {\n        // Clear elements buffer\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);\n        for (let i = 0; i < this.MAX_ATTRIBUTES; i++) {\n          if (i > 0 || disableZero) {\n            this.setConstant(i, [0, 0, 0, 1]); // match assumed WebGL defaults\n          }\n        }\n      });\n    }\n\n    this.elements = null;\n    this.values = new Array(this.MAX_VERTEX_ATTRIBS).fill(null);\n    this.infos = new Array(this.MAX_VERTEX_ATTRIBS).fill({});\n    this.accessors = new Array(this.MAX_VERTEX_ATTRIBS).fill(null);\n    this.unused = [];\n\n    // Auto detects draw params\n    this.drawParams = {\n      isInstanced: false,\n      // indexing is autodetected - buffer with target gl.ELEMENT_ARRAY_BUFFER\n      // index type is saved for drawElement calls\n      isIndexed: false,\n      indexType: null\n    };\n\n    return this;\n  }\n\n  // Set (bind) an array or map of vertex array buffers, either in numbered or named locations.\n  // For names that are not present in `location`, the supplied buffers will be ignored.\n  // if a single buffer of type GL.ELEMENT_ARRAY_BUFFER is present, it will be set as elements\n  setAttributes(attributes) {\n    this.bind(() => {\n      for (const locationOrName in attributes) {\n        const value = attributes[locationOrName];\n        if (Array.isArray(value) && value.length && value[0] instanceof Buffer) {\n          const buffer = value[0];\n          const accessor = value[1];\n          this.setBuffer(locationOrName, buffer, accessor);\n        } else if (value instanceof Buffer) {\n          this.setBuffer(locationOrName, value);\n        } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {\n          this.setConstant(locationOrName, value);\n        } else {\n          throw new Error(ERR_ATTRIBUTE_TYPE);\n        }\n      }\n    });\n\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElements(elementBuffer = null, opts = {}) {\n    assert(!elementBuffer || elementBuffer.target === GL_ELEMENT_ARRAY_BUFFER, ERR_ELEMENTS);\n\n    this.bind(() => {\n      this.gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER, elementBuffer ? elementBuffer.handle : null);\n    });\n    this.elements = elementBuffer;\n\n    // Auto-deduce isIndexed draw param\n    this.drawParams.isIndexed = Boolean(elementBuffer);\n    if (elementBuffer) {\n      this.drawParams.indexType = elementBuffer.accessor.getOptions(opts).type;\n    } else {\n      delete this.drawParams.indexType;\n    }\n\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a buffer\n  setBuffer(locationOrName, buffer, opts = {}) {\n    const {gl} = this;\n\n    // Check target\n    if (buffer.target === gl.ELEMENT_ARRAY_BUFFER) {\n      return this.setElements(buffer);\n    }\n\n    const location = this._getAttributeIndex(locationOrName);\n    if (location < 0) {\n      this.unused[locationOrName] = buffer;\n      log.once(3, () => `unused buffer attribute ${locationOrName} in ${this.id}`)();\n      return this;\n    }\n\n    this.bind(() => {\n      const accessInfo = this._getAttributeInfo(locationOrName, buffer, opts);\n      const name = accessInfo ? accessInfo.name : String(location);\n\n      // Override with any additional attribute configuration params\n      let accessor = accessInfo ? accessInfo.accessor : new Accessor();\n      accessor = accessor.getOptions(buffer, buffer.accessor, opts);\n\n      this.values[location] = buffer;\n      this.accessors[location] = accessor;\n      this.infos[location] = {location, name, accessor};\n\n      const {size, type, stride, offset, normalized, divisor} = accessor;\n      assert(Number.isFinite(size) && Number.isFinite(type));\n\n      // A non-zero buffer object must be bound to the GL_ARRAY_BUFFER target\n      buffer.bind({target: gl.ARRAY_BUFFER});\n\n      // Attach ARRAY_BUFFER with specified buffer format to location\n      if (!opts.integer) {\n        gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n      } else {\n        // specifies *integer* data formats and locations of vertex attributes\n        assert(isWebGL2(gl));\n        gl.vertexAttribIPointer(location, size, type, stride, offset);\n      }\n      gl.enableVertexAttribArray(location);\n      gl.vertexAttribDivisor(location, divisor || 0);\n\n      // NOTE We don't unbind buffer here\n\n      // Auto deduce isInstanced drawParam\n      const isInstanced = divisor > 0;\n      this.drawParams.isInstanced = this.drawParams.isInstanced || isInstanced;\n    });\n\n    return this;\n  }\n\n  // Set attribute to constant value (small typed array corresponding to one vertex' worth of data)\n  // TODO - handle single values for size 1 attributes?\n  // TODO - convert classic arrays based on known type?\n  setConstant(locationOrName, arrayValue, opts) {\n    const accessInfo = this._getAttributeInfo(locationOrName, arrayValue, opts);\n    if (!accessInfo) {\n      this.unused[locationOrName] = arrayValue;\n      log.warn(() => `${this.id} unused constant attribute ${locationOrName}`)();\n      return this;\n    }\n\n    // TODO - read type if provided\n    if (Array.isArray(arrayValue)) {\n      arrayValue = new Float32Array(arrayValue);\n    }\n\n    this.bind(() => {\n      const {location} = accessInfo;\n\n      this._setConstant(location, arrayValue);\n\n      // To use the constant value, disable reading from arrays\n\n      // NOTE: Possible perf penalty when disabling attribute 0:\n      // https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-\n      // this-has-significant-performance-penalt\n      this.gl.disableVertexAttribArray(location);\n\n      // Reset instanced divisor\n      this.gl.vertexAttribDivisor(location, 0);\n\n      // Save the value for debugging\n      this.values[location] = arrayValue;\n    });\n    return this;\n  }\n\n  // PRIVATE\n\n  _getAttributeInfo(attributeName) {\n    return this.configuration && this.configuration.getAttributeInfo(attributeName);\n  }\n\n  _getAttributeIndex(locationOrName) {\n    if (this.configuration) {\n      return this.configuration.getLocation(locationOrName);\n    }\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return location;\n    }\n    return -1;\n  }\n\n  _initialize(props = {}) {\n    this.reset(false);\n    this.configuration = null;\n    this.bindOnUse = false;\n    return this.setProps(props);\n  }\n\n  // Note: Constants are stored on the WebGL context, not the VAO\n  // TODO - cache these to avoid setting them unnecessarily?\n  // TODO - use known type (in configuration or passed in) to allow non-typed arrays?\n  _setConstant(location, array) {\n    switch (array.constructor) {\n    case Float32Array:\n      this._setConstantFloatArray(location, array);\n      break;\n    case Int32Array:\n      this._setConstantIntArray(location, array);\n      break;\n    case Uint32Array:\n      this._setConstantUintArray(location, array);\n      break;\n    default:\n      assert(false);\n    }\n  }\n\n  _setConstantFloatArray(location, array) {\n    const {gl} = this;\n    switch (array.length) {\n    case 1: gl.vertexAttrib1fv(location, array); break;\n    case 2: gl.vertexAttrib2fv(location, array); break;\n    case 3: gl.vertexAttrib3fv(location, array); break;\n    case 4: gl.vertexAttrib4fv(location, array); break;\n    default: assert(false);\n    }\n  }\n\n  _setConstantIntArray(location, array) {\n    const {gl} = this;\n    assert(isWebGL2(gl));\n    switch (array.length) {\n    case 1: gl.vertexAttribI1iv(location, array); break;\n    case 2: gl.vertexAttribI2iv(location, array); break;\n    case 3: gl.vertexAttribI3iv(location, array); break;\n    case 4: gl.vertexAttribI4iv(location, array); break;\n    default: assert(false);\n    }\n  }\n\n  _setConstantUintArray(location, array) {\n    const {gl} = this;\n    assert(isWebGL2(gl));\n    switch (array.length) {\n    case 1: gl.vertexAttribI1uiv(location, array); break;\n    case 2: gl.vertexAttribI2uiv(location, array); break;\n    case 3: gl.vertexAttribI3uiv(location, array); break;\n    case 4: gl.vertexAttribI4uiv(location, array); break;\n    default: assert(false);\n    }\n  }\n\n  // Workaround for Chrome issue, unbind temporarily to avoid conflicting with TransformFeednack\n  unbindBuffers(disableZero = true) {\n    this.bind(() => {\n      // No clear way to set a buffer to null, so create a minimal \"dummy buffer\"\n      // Save it to avoid inflating buffer creation statistics\n      this.unbindBuffer = this.unbindBuffer || new Buffer(this.gl, {size: 4});\n\n      for (const location in this.values) {\n        if (this.values[location] instanceof Buffer) {\n          this.gl.disableVertexAttribArray(location);\n          this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.unbindBuffer.handle);\n          this.gl.vertexAttribPointer(location, 1, this.gl.FLOAT, false, 0, 0);\n        }\n      }\n    });\n  }\n\n  // Workaround for Chrome issue, rebind after temporary unbind\n  bindBuffers() {\n    this.bind(() => {\n      for (const location in this.values) {\n        const buffer = this.values[location];\n        if (buffer instanceof Buffer) {\n          this.setBuffer(location, buffer);\n        }\n      }\n    });\n  }\n\n  // Updates all constant attribute values (constants are used when vertex attributes are disabled).\n  // This needs to be done repeatedly since in contrast to buffer bindings,\n  // constants are stored on the WebGL context, not the VAO\n  _setConstantAttributes() {\n    for (const location in this.values) {\n      const constant = this.values[location];\n      if (ArrayBuffer.isView(constant)) {\n        this._setConstant(Number(location), constant);\n        this.gl.disableVertexAttribArray(Number(location));\n        this.gl.vertexAttribDivisor(Number(location), 0);\n      }\n    }\n  }\n\n  // RESOURCE IMPLEMENTATION\n\n  _createHandle() {\n    try {\n      return this.gl.createVertexArray();\n    } catch (error) {\n      log.error(ERR_WEBGL1)();\n      throw error;\n    }\n  }\n\n  _deleteHandle(handle) {\n    this.gl.deleteVertexArray(handle);\n    return [this.elements];\n    // return [this.elements, ...this.buffers];\n  }\n\n  _bindHandle(handle) {\n    this.gl.bindVertexArray(handle);\n    // Make sure that any constant attributes are updated (stored on the context, not the VAO)\n    if (handle === this.handle) {\n      this._setConstantAttributes();\n    }\n  }\n\n  // Generic getter for information about a vertex attribute at a given position\n  _getParameter(pname, {location}) {\n    assert(Number.isFinite(location));\n    return this.bind(() => {\n      switch (pname) {\n      case GL.VERTEX_ATTRIB_ARRAY_POINTER: return this.gl.getVertexAttribOffset(location, pname);\n      default: return this.gl.getVertexAttrib(location, pname);\n      }\n    });\n  }\n\n  _getDebugTable({header = 'Attributes'} = {}) {\n    if (!this.configuration) {\n      return {};\n    }\n\n    const table = {}; // {[header]: {}};\n\n    // Add index (elements) if available\n    if (this.elements) {\n      // const elements = Object.assign({size: 1}, this.elements);\n      table.ELEMENT_ARRAY_BUFFER =\n        this._getDebugTableRow(this.elements, null, header);\n    }\n\n    // Add used attributes\n    const attributes = this.values;\n\n    for (const attributeName in attributes) {\n      const info = this._getAttributeInfo(attributeName);\n      if (info) {\n        let rowHeader = `${attributeName}: ${info.name}`;\n        const accessor = this.accessors[info.location];\n        if (accessor) {\n          const typeAndName = getCompositeGLType(accessor.type, accessor.size);\n          if (typeAndName) { // eslint-disable-line\n            rowHeader = `${attributeName}: ${info.name} (${typeAndName.name})`;\n          }\n        }\n        table[rowHeader] =\n          this._getDebugTableRow(attributes[attributeName], accessor, header);\n      }\n    }\n\n    return table;\n  }\n\n  /* eslint-disable max-statements */\n  _getDebugTableRow(attribute, accessor, header) {\n    const {gl} = this;\n    // const round = xnum => Math.round(num * 10) / 10;\n\n    let type = 'NOT PROVIDED';\n    let size = 'N/A';\n    let verts = 'N/A';\n    let bytes = 'N/A';\n\n    let isInteger;\n    let marker;\n    let value;\n\n    if (accessor) {\n      type = accessor.type;\n      size = accessor.size;\n\n      // Generate a type name by dropping Array from Float32Array etc.\n      type = String(type).replace('Array', '');\n\n      // Look for 'nt' to detect integer types, e.g. Int32Array, Uint32Array\n      isInteger = type.indexOf('nt') !== -1;\n    }\n\n    if (attribute instanceof Buffer) {\n      const buffer = attribute;\n\n      const {data, modified} = buffer.getDebugData();\n      marker = modified ? '*' : '';\n\n      value = data;\n      bytes = buffer.bytes;\n      verts = bytes / data.BYTES_PER_ELEMENT / size;\n\n      let format;\n\n      if (accessor) {\n        const instanced = accessor.divisor > 0;\n        format = `${instanced ? 'I ' : 'P '} ${verts} (x${size}=${bytes} bytes ${glKey(gl, type)})`;\n      } else {\n        // element buffer\n        isInteger = true;\n        format = `${bytes} bytes`;\n      }\n\n      return {\n        [header]: `${marker}${formatValue(value, {size, isInteger})}`,\n        'Format ': format\n      };\n    }\n\n    // CONSTANT VALUE\n    value = attribute;\n    size = attribute.length;\n    // Generate a type name by dropping Array from Float32Array etc.\n    type = String(attribute.constructor.name).replace('Array', '');\n    // Look for 'nt' to detect integer types, e.g. Int32Array, Uint32Array\n    isInteger = type.indexOf('nt') !== -1;\n\n    return {\n      [header]: `${formatValue(value, {size, isInteger})} (constant)`,\n      'Format ': `${size}x${type} (constant)`\n    };\n\n  }\n  /* eslint-ensable max-statements */\n}\n"],"file":"vertex-array.js"}