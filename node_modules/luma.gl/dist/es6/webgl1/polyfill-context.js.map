{"version":3,"sources":["../../../src/webgl1/polyfill-context.js"],"names":["GL","getParameterPolyfill","polyfillVertexArrayObject","WebGLRenderingContext","assert","condition","message","Error","OES_vertex_array_object","ANGLE_instanced_arrays","WEBGL_draw_buffers","EXT_disjoint_timer_query","EXT_disjoint_timer_query_webgl2","EXT_texture_filter_anisotropic","ERR_VAO_NOT_SUPPORTED","isWebGL2","gl","TEXTURE_BINDING_3D","getExtensionData","extension","webgl2","ext","getExtension","WEBGL_CONTEXT_POLYFILLS","meta","suffix","createVertexArray","deleteVertexArray","bindVertexArray","isVertexArray","vertexAttribDivisor","location","divisor","drawElementsInstanced","drawArraysInstanced","drawBuffers","createQuery","deleteQuery","beginQuery","endQuery","getQuery","handle","pname","getQueryObject","getQueryParameter","queryCounter","OVERRIDES","readBuffer","originalFunc","attachment","getVertexAttrib","result","VERTEX_ATTRIB_ARRAY_INTEGER","undefined","VERTEX_ATTRIB_ARRAY_DIVISOR","getProgramParameter","program","TRANSFORM_FEEDBACK_BUFFER_MODE","SEPARATE_ATTRIBS","TRANSFORM_FEEDBACK_VARYINGS","ACTIVE_UNIFORM_BLOCKS","getInternalformatParameter","target","format","SAMPLES","Int32Array","getTexParameter","TEXTURE_MAX_ANISOTROPY_EXT","extensions","luma","getParameter","hint","value","initializeExtensions","EXTENSIONS","getSupportedExtensions","polyfillExtension","target2","defaults","Object","keys","forEach","key","extKey","polyfill","args","bind","installOverrides","polyfillContext","polyfilled","global_","global","window"],"mappings":"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","sourcesContent":["// WebGL1/WebGL2 extension polyfill support\n//\n// Provides a function that creates polyfills for WebGL2 functions based\n// on available extensions and installs them on a supplied target (could be\n// the WebGLContext or its prototype, or a separate object).\n//\n// This is intended to be a stand-alone file with minimal dependencies,\n// easy to reuse or repurpose in other projects.\n\n/* eslint-disable camelcase, brace-style */\nimport GL from '../constants';\nimport {getParameterPolyfill} from './polyfill-get-parameter';\nimport polyfillVertexArrayObject from './polyfill-vertex-array-object';\nimport {WebGLRenderingContext} from './webgl-rendering-context';\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'luma.gl: assertion failed.');\n  }\n}\n\nconst OES_vertex_array_object = 'OES_vertex_array_object';\nconst ANGLE_instanced_arrays = 'ANGLE_instanced_arrays';\nconst WEBGL_draw_buffers = 'WEBGL_draw_buffers';\nconst EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';\nconst EXT_disjoint_timer_query_webgl2 = 'EXT_disjoint_timer_query_webgl2';\nconst EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';\n\nconst ERR_VAO_NOT_SUPPORTED =\n  'VertexArray requires WebGL2 or OES_vertex_array_object extension';\n\n// Return true if WebGL2 context\nfunction isWebGL2(gl) {\n  return gl && gl.TEXTURE_BINDING_3D === GL.TEXTURE_BINDING_3D;\n}\n\n// Return object with webgl2 flag and an extension\nfunction getExtensionData(gl, extension) {\n  return {\n    webgl2: isWebGL2(gl),\n    ext: gl.getExtension(extension)\n  };\n}\n\n// function mapExtensionConstant(gl, constant) {\n//   switch (constant) {\n//   case ext.FRAGMENT_SHADER_DERIVATIVE_HINT_OES: return GL.FRAGMENT_SHADER_DERIVATIVE_HINT;\n//   }\n// }\n\nconst WEBGL_CONTEXT_POLYFILLS = {\n  // POLYFILL TABLE\n  [OES_vertex_array_object]: {\n    meta: {suffix: 'OES'},\n    // NEW METHODS\n    createVertexArray: () => { assert(false, ERR_VAO_NOT_SUPPORTED); },\n    deleteVertexArray: () => {},\n    bindVertexArray: () => {},\n    isVertexArray: () => false\n  },\n  [ANGLE_instanced_arrays]: {\n    meta: {\n      suffix: 'ANGLE'\n      // constants: {\n      //   VERTEX_ATTRIB_ARRAY_DIVISOR: 'VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE'\n      // }\n    },\n    vertexAttribDivisor(location, divisor) {\n      // Accept divisor 0 even if instancing is not supported (0 = no instancing)\n      assert(divisor === 0, 'WebGL instanced rendering not supported');\n    },\n    drawElementsInstanced: () => {},\n    drawArraysInstanced: () => {}\n  },\n  [WEBGL_draw_buffers]: {\n    meta: {\n      suffix: 'WEBGL'\n    },\n    drawBuffers: () => { assert(false); }\n  },\n  [EXT_disjoint_timer_query]: {\n    meta: {suffix: 'EXT'},\n    // WebGL1: Polyfills the WebGL2 Query API\n    createQuery: () => { assert(false); },\n    deleteQuery: () => { assert(false); },\n    beginQuery: () => { assert(false); },\n    endQuery: () => {},\n    getQuery(handle, pname) { return this.getQueryObject(handle, pname); },\n    // The WebGL1 extension uses getQueryObject rather then getQueryParameter\n    getQueryParameter(handle, pname) { return this.getQueryObject(handle, pname); },\n    // plus the additional `queryCounter` method\n    queryCounter: () => {},\n    getQueryObject: () => {}\n  },\n  // WebGL2: Adds `queryCounter` to the query API\n  [EXT_disjoint_timer_query_webgl2]: {\n    meta: {suffix: 'EXT'},\n    // install `queryCounter`\n    // `null` avoids overwriting WebGL1 `queryCounter` if the WebGL2 extension is not available\n    queryCounter: null\n  },\n  OVERRIDES: {\n    // Ensure readBuffer is a no-op\n    readBuffer: (gl, originalFunc, attachment) => {\n      if (isWebGL2(gl)) {\n        originalFunc(attachment);\n      } else {\n        // assert(attachment !== GL_COLOR_ATTACHMENT0 && attachment !== GL_FRONT);\n      }\n    },\n    // Override for getVertexAttrib that returns sane values for non-WebGL1 constants\n    getVertexAttrib: (gl, originalFunc, location, pname) => {\n      // const gl = this; // eslint-disable-line\n      const {webgl2, ext} = getExtensionData(gl, ANGLE_instanced_arrays);\n\n      let result;\n      switch (pname) {\n      // WebGL1 attributes will never be integer\n      case GL.VERTEX_ATTRIB_ARRAY_INTEGER: result = !webgl2 ? false : undefined; break;\n        // if instancing is not available, return 0 meaning divisor has not been set\n      case GL.VERTEX_ATTRIB_ARRAY_DIVISOR: result = !webgl2 && !ext ? 0 : undefined; break;\n      default:\n      }\n\n      return result !== undefined ? result : originalFunc(location, pname);\n    },\n    // Handle transform feedback and uniform block queries in WebGL1\n    getProgramParameter: (gl, originalFunc, program, pname) => {\n      if (!isWebGL2(gl)) {\n        switch (pname) {\n        case GL.TRANSFORM_FEEDBACK_BUFFER_MODE: return GL.SEPARATE_ATTRIBS;\n        case GL.TRANSFORM_FEEDBACK_VARYINGS: return 0;\n        case GL.ACTIVE_UNIFORM_BLOCKS: return 0;\n        default:\n        }\n      }\n      return originalFunc(program, pname);\n    },\n    getInternalformatParameter: (gl, originalFunc, target, format, pname) => {\n      if (!isWebGL2(gl)) {\n        switch (pname) {\n        case GL.SAMPLES:\n          return new Int32Array([0]);\n        default:\n        }\n      }\n      return gl.getInternalformatParameter(target, format, pname);\n    },\n    getTexParameter(gl, originalFunc, target, pname) {\n      switch (pname) {\n      case GL.TEXTURE_MAX_ANISOTROPY_EXT:\n        const {extensions} = gl.luma;\n        const ext = extensions[EXT_texture_filter_anisotropic];\n        pname = (ext && ext.TEXTURE_MAX_ANISOTROPY_EXT) || GL.TEXTURE_MAX_ANISOTROPY_EXT;\n        break;\n      default:\n      }\n      return originalFunc(target, pname);\n    },\n    getParameter: getParameterPolyfill,\n    hint(gl, originalFunc, pname, value) {\n      // TODO - handle GL.FRAGMENT_SHADER_DERIVATIVE_HINT:\n      // switch (pname) {\n      // case GL.FRAGMENT_SHADER_DERIVATIVE_HINT:\n      // }\n      return originalFunc(pname, value);\n    }\n  }\n};\n\nfunction initializeExtensions(gl) {\n  gl.luma.extensions = {};\n  const EXTENSIONS = gl.getSupportedExtensions();\n  for (const extension of EXTENSIONS) {\n    gl.luma[extension] = gl.getExtension(extension);\n  }\n}\n\n// Polyfills a single WebGL extension into the `target` object\nfunction polyfillExtension(gl, {extension, target, target2}) {\n  const defaults = WEBGL_CONTEXT_POLYFILLS[extension];\n  assert(defaults);\n\n  const {meta = {}} = defaults;\n  const {suffix = ''} = meta;\n\n  const ext = gl.getExtension(extension);\n\n  Object.keys(defaults).forEach(key => {\n    const extKey = `${key}${suffix}`;\n\n    let polyfill = null;\n    if (key === 'meta') {\n      // ignore\n    } else if (typeof gl[key] === 'function') {\n      // WebGL2 implementation is already\n    } else if (ext && typeof ext[extKey] === 'function') {\n      // pick extension implemenentation,if available\n      polyfill = (...args) => ext[extKey](...args);\n    } else if (typeof defaults[key] === 'function') {\n      // pick the mock implementation, if no implementation was detected\n      polyfill = defaults[key].bind(target);\n    }\n\n    if (polyfill) {\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  });\n}\n\n// Install simple overrides (mostly get* functions)\nfunction installOverrides(gl, {target, target2}) {\n  const {OVERRIDES} = WEBGL_CONTEXT_POLYFILLS;\n  Object.keys(OVERRIDES).forEach(key => {\n    if (typeof OVERRIDES[key] === 'function') {\n      // install an override, if no implementation was detected\n      const originalFunc = gl[key] ? gl[key].bind(gl) : () => {};\n      const polyfill = OVERRIDES[key].bind(null, gl, originalFunc);\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  });\n}\n\n// Registers polyfill or mock functions for all known extensions\nexport default function polyfillContext(gl) {\n  polyfillVertexArrayObject(WebGLRenderingContext, gl);\n  gl.luma = gl.luma || {};\n  initializeExtensions(gl);\n  if (!gl.luma.polyfilled) {\n    for (const extension in WEBGL_CONTEXT_POLYFILLS) {\n      if (extension !== 'overrides') {\n        polyfillExtension(gl, {extension, target: gl.luma, target2: gl});\n      }\n    }\n    installOverrides(gl, {target: gl.luma, target2: gl});\n    gl.luma.polyfilled = true;\n  }\n  return gl;\n}\n\n/* global window, global */\nconst global_ = typeof global !== 'undefined' ? global : window;\nglobal_.polyfillContext = polyfillContext;\n"],"file":"polyfill-context.js"}