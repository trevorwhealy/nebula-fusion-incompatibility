{"version":3,"sources":["../../../src/core/pick-models.js"],"names":["clear","isWebGL","Group","assert","getDevicePixelRatio","window","devicePixelRatio","pickModels","gl","props","models","position","uniforms","parameters","settings","useDevicePixels","framebuffer","context","x","y","resize","width","canvas","height","dpr","deviceX","deviceY","group","children","traverseReverse","model","pickable","color","depth","setUniforms","picking_uActive","draw","Object","assign","readPixels","format","RGBA","type","UNSIGNED_BYTE","isPicked"],"mappings":"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","sourcesContent":["/* global window */\nimport {clear, isWebGL} from '../webgl';\nimport Group from './group';\nimport assert from '../utils/assert';\n\nfunction getDevicePixelRatio() {\n  return typeof window !== 'undefined' ? window.devicePixelRatio : 1;\n}\n\nexport default function pickModels(gl, props) {\n  const {\n    models,\n    position,\n    uniforms = {}, // eslint-disable-line\n    parameters = {},\n    settings,\n    useDevicePixels = true,\n    framebuffer,\n    context\n  } = props;\n\n  assert(isWebGL(gl) && framebuffer && position);\n\n  const [x, y] = position;\n\n  // Match our picking framebuffer with the size of the canvas drawing buffer\n  framebuffer.resize({width: gl.canvas.width, height: gl.canvas.height});\n\n  // Compensate for devicePixelRatio\n  // Note: this assumes the canvas framebuffer has been matched\n  const dpr = useDevicePixels ? getDevicePixelRatio() : 1;\n  // Reverse the y coordinate\n  const deviceX = x * dpr;\n  const deviceY = gl.canvas.height - y * dpr;\n\n  // return withParameters(gl, {\n  //   // framebuffer,\n  //   // // We are only interested in one pixel, no need to render anything else\n  //   // scissorTest: {x: deviceX, y: deviceY, w: 1, h: 1}\n  // }, () => {\n  const group = new Group({children: models});\n  return group.traverseReverse(model => {\n\n    if (model.pickable) {\n      // Clear the frame buffer\n      clear(gl, {framebuffer, color: true, depth: true});\n\n      // Render picking colors\n      /* eslint-disable camelcase */\n      model.setUniforms({picking_uActive: 1});\n      model.draw(Object.assign({}, props, {uniforms, parameters, settings, framebuffer, context}));\n      model.setUniforms({picking_uActive: 0});\n\n      // Sample Read color in the central pixel, to be mapped as a picking color\n      const color = framebuffer.readPixels({\n        x: deviceX,\n        y: deviceY,\n        width: 1,\n        height: 1,\n        format: gl.RGBA,\n        type: gl.UNSIGNED_BYTE});\n\n      const isPicked = color[0] !== 0 || color[1] !== 0 || color[2] !== 0;\n\n      // Add the information to the stack\n      if (isPicked) {\n        return {\n          model,\n          color,\n          x,\n          y,\n          deviceX,\n          deviceY\n        };\n      }\n    }\n\n    return null;\n  });\n  // });\n}\n"],"file":"pick-models.js"}