{"version":3,"sources":["../../../src/core/model.js"],"names":["GL","Attribute","Object3D","getDrawMode","Buffer","Query","Program","TransformFeedback","VertexArray","clear","isWebGL","getUniformsTable","MODULAR_SHADERS","assembleShaders","addModel","removeModel","logModel","getOverrides","log","isObjectEmpty","assert","ERR_MODEL_PARAMS","LOG_DRAW_PRIORITY","LOG_DRAW_TIMEOUT","DEPRECATED_PICKING_UNIFORMS","Model","constructor","gl","props","lastLogTime","initialize","vertexCount","Number","isFinite","geometry","getVertexCount","drawMode","program","_createProgram","vertexArray","userData","needsRedraw","_attributes","attributes","animatedUniforms","animated","animationLoop","timerQueryEnabled","timeElapsedQuery","undefined","lastQueryReturned","stats","accumulatedFrameTime","averageFrameTime","profileFrameCount","pickable","setProps","setUniforms","Object","assign","getModuleUniforms","moduleSettings","isInstanced","instanced","onBeforeRender","onAfterRender","instanceCount","setGeometry","setAttributes","uniforms","samplers","isSupported","warn","_setFeedbackBuffers","_feedbackBuffers","_setAnimationProps","_animationProps","_animationLoop","delete","key","id","destroy","getNeedsRedraw","clearRedrawFlags","redraw","getInstanceCount","getProgram","getAttributes","getUniforms","setNeedsRedraw","setDrawMode","setVertexCount","setInstanceCount","buffers","_createBuffersFromAttributeDescriptors","_extractAnimatedUniforms","_checkForDeprecatedUniforms","updateModuleSettings","opts","draw","framebuffer","transformFeedback","parameters","animationProps","_refreshAnimationProps","logPriority","_logDrawCallStart","drawParams","isIndexed","indexType","_timerQueryStart","_timerQueryEnd","_logDrawCallEnd","transform","discard","feedbackBuffers","unbindModels","RASTERIZER_DISCARD","forEach","model","unbindBuffers","bindBuffers","render","arguments","length","vs","fs","modules","defines","inject","shaderCache","varyings","bufferMode","SEPARATE_ATTRIBS","x","assembleResult","uniform","deprecated","_evaluateAnimateUniforms","uniformName","valueFunction","foundAnimated","newValue","staticUniforms","setBuffers","beginTimeElapsedQuery","end","isResultAvailable","elapsedTime","getResult","lastFrameTime","attributeName","descriptor","attribute","layout","update","buffer","getValue","priority","logDrawTimeout","Date","now","group","collapsed","attributeTable","_getDebugTable","header","uniformTable","table","unusedTable","unusedCount","undefinedOnly","missingTable","missingCount","count","keys","message","groupEnd"],"mappings":"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","sourcesContent":["import GL from '../constants';\nimport Attribute from './attribute';\nimport Object3D from './object-3d';\nimport {getDrawMode} from '../geometry/geometry';\nimport {Buffer, Query, Program, TransformFeedback, VertexArray, clear} from '../webgl';\nimport {isWebGL} from '../webgl-utils';\nimport {getUniformsTable} from '../webgl/uniforms';\nimport {MODULAR_SHADERS} from '../shadertools/src/shaders';\nimport {assembleShaders} from '../shadertools/src';\nimport {addModel, removeModel, logModel, getOverrides} from '../debug/seer-integration';\nimport {log, isObjectEmpty} from '../utils';\nimport assert from '../utils/assert';\n\nconst ERR_MODEL_PARAMS = 'Model needs drawMode and vertexCount';\n\nconst LOG_DRAW_PRIORITY = 2;\nconst LOG_DRAW_TIMEOUT = 10000;\n\n// These old picking uniforms should be avoided and we should use picking module\n// and set uniforms using Model class 'updateModuleSettings()'\n// TODO - move to shader modules\nconst DEPRECATED_PICKING_UNIFORMS = ['renderPickingBuffer', 'pickingEnabled'];\n\n// Model abstract O3D Class\nexport default class Model extends Object3D {\n  constructor(gl, props = {}) {\n    super(props);\n    assert(isWebGL(gl));\n    this.gl = gl;\n    this.lastLogTime = 0; // TODO - move to probe.gl\n    this.initialize(props);\n    // intended to be subclassed, do not seal\n  }\n\n  get vertexCount() {\n    if (Number.isFinite(this.props.vertexCount)) {\n      return this.props.vertexCount;\n    }\n    return this.geometry && this.geometry.getVertexCount();\n  }\n\n  get drawMode() {\n    if (Number.isFinite(this.props.drawMode)) {\n      return this.props.drawMode;\n    }\n    return this.geometry && this.geometry.drawMode;\n  }\n\n  /* eslint-disable max-statements  */\n  /* eslint-disable complexity  */\n  initialize(props = {}) {\n    this.props = {};\n    this.program = this._createProgram(props);\n\n    // Create a vertex array configured after this program\n    this.vertexArray = new VertexArray(this.gl, {program: this.program});\n\n    // Initialize state\n    this.userData = {};\n    this.needsRedraw = true;\n    // Model manages auto Buffer creation from typed arrays\n    this._attributes = {}; // All attributes\n    this.attributes = {}; // User defined attributes\n\n    // Model manages uniform animation\n    this.animatedUniforms = {};\n    this.animated = false;\n    this.animationLoop = null; // if set, used as source for animationProps\n\n    this.timerQueryEnabled = false;\n    this.timeElapsedQuery = undefined;\n    this.lastQueryReturned = true;\n\n    this.stats = {\n      accumulatedFrameTime: 0,\n      averageFrameTime: 0,\n      profileFrameCount: 0\n    };\n\n    // picking options\n    this.pickable = true;\n    // this.pick = pick || (() => false);\n\n    this.setProps(props);\n\n    // Make sure we have some reasonable default uniforms in place\n    this.setUniforms(Object.assign(\n      {},\n      this.getModuleUniforms(), // Get all default uniforms\n      this.getModuleUniforms(props.moduleSettings) // Get unforms for supplied parameters\n    ));\n\n    // Attributes and buffers\n\n    // geometry might have set drawMode and vertexCount\n    this.isInstanced = props.isInstanced || props.instanced;\n\n    this.onBeforeRender = props.onBeforeRender || (() => {});\n    this.onAfterRender = props.onAfterRender || (() => {});\n\n    // assert(program || program instanceof Program);\n    assert(this.drawMode !== undefined && Number.isFinite(this.vertexCount), ERR_MODEL_PARAMS);\n\n  }\n  /* eslint-enable max-statements */\n\n  setProps(props) {\n    Object.assign(this.props, props);\n\n    // params\n    // if ('drawMode' in props) {\n    //   this.drawMode = getDrawMode(props.drawMode);\n    // }\n    // if ('vertexCount' in props) {\n    //   this.vertexCount = props.vertexCount;\n    // }\n    if ('instanceCount' in props) {\n      this.instanceCount = props.instanceCount;\n    }\n    if ('geometry' in props) {\n      this.setGeometry(props.geometry);\n    }\n\n    // webgl settings\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms, props.samplers);\n    }\n\n    if ('pickable' in props) {\n      this.pickable = props.pickable;\n    }\n\n    // Experimental props\n    if ('timerQueryEnabled' in props) {\n      this.timerQueryEnabled = props.timerQueryEnabled && Query.isSupported(this.gl, ['timers']);\n      if (props.timerQueryEnabled && !this.timerQueryEnabled) {\n        log.warn('GPU timer not supported')();\n      }\n    }\n    if ('_feedbackBuffers' in props) {\n      this._setFeedbackBuffers(props._feedbackBuffers);\n    }\n    if ('_animationProps' in props) {\n      this._setAnimationProps(props._animationProps);\n    }\n    if ('_animationLoop' in props) {\n      this.animationLoop = props._animationLoop;\n    }\n  }\n\n  delete() {\n    // delete all attributes created by this model\n    // TODO - should buffer deletes be handled by vertex array?\n    for (const key in this._attributes) {\n      if (this._attributes[key] !== this.attributes[key]) {\n        this._attributes[key].delete();\n      }\n    }\n\n    this.program.delete();\n    this.vertexArray.delete();\n\n    removeModel(this.id);\n  }\n\n  destroy() {\n    this.delete();\n  }\n\n  // GETTERS\n\n  getNeedsRedraw({clearRedrawFlags = false} = {}) {\n    let redraw = false;\n    redraw = redraw || this.needsRedraw;\n    this.needsRedraw = this.needsRedraw && !clearRedrawFlags;\n    if (this.geometry) {\n      redraw = redraw || this.geometry.getNeedsRedraw({clearRedrawFlags});\n    }\n    return redraw;\n  }\n\n  getDrawMode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  getInstanceCount() {\n    return this.instanceCount;\n  }\n\n  getProgram() {\n    return this.program;\n  }\n\n  getAttributes() {\n    return this.attributes;\n  }\n\n  getUniforms() {\n    return this.program.getUniforms;\n  }\n\n  // SETTERS\n\n  setNeedsRedraw(redraw = true) {\n    this.needsRedraw = redraw;\n    return this;\n  }\n\n  setDrawMode(drawMode) {\n    this.props.drawMode = getDrawMode(drawMode);\n    return this;\n  }\n\n  setVertexCount(vertexCount) {\n    assert(Number.isFinite(vertexCount));\n    this.props.vertexCount = vertexCount;\n    return this;\n  }\n\n  setInstanceCount(instanceCount) {\n    assert(Number.isFinite(instanceCount));\n    this.instanceCount = instanceCount;\n    return this;\n  }\n\n  // TODO - just set attributes, don't hold on to geometry\n  setGeometry(geometry) {\n    this.geometry = geometry;\n    const buffers = this._createBuffersFromAttributeDescriptors(this.geometry.getAttributes());\n    this.vertexArray.setAttributes(buffers);\n    this.setNeedsRedraw();\n    return this;\n  }\n\n  setAttributes(attributes = {}) {\n    // Avoid setting needsRedraw if no attributes\n    if (isObjectEmpty(attributes)) {\n      return this;\n    }\n\n    Object.assign(this.attributes, attributes);\n    const buffers = this._createBuffersFromAttributeDescriptors(attributes);\n\n    // Object.assign(this.attributes, buffers);\n    this.vertexArray.setAttributes(buffers);\n    this.setNeedsRedraw();\n\n    return this;\n  }\n\n  // TODO - should actually set the uniforms\n  setUniforms(uniforms = {}, samplers = {}) {\n    // Let Seer override edited uniforms\n    uniforms = Object.assign({}, uniforms);\n    getOverrides(this.id, uniforms);\n\n    // Resolve any animated uniforms so that we have an initial value\n    uniforms = this._extractAnimatedUniforms(uniforms);\n\n    this.program.setUniforms(uniforms, samplers, () => {\n      // if something changed\n      this._checkForDeprecatedUniforms(uniforms);\n      this.setNeedsRedraw();\n    });\n  }\n\n  updateModuleSettings(opts) {\n    const uniforms = this.getModuleUniforms(opts || {});\n    return this.setUniforms(uniforms);\n  }\n\n  // DRAW CALLS\n\n  clear(opts) {\n    clear(this.program.gl, opts);\n    return this;\n  }\n\n  /* eslint-disable max-statements  */\n  draw(opts = {}) {\n    const {\n      moduleSettings = null,\n      framebuffer,\n      uniforms = {},\n      attributes = {},\n      samplers = {},\n      transformFeedback = this.transformFeedback,\n      parameters = {},\n      vertexArray = this.vertexArray,\n      animationProps\n    } = opts;\n\n    // Update module settings\n\n    addModel(this);\n\n    // Update model with any just provided attributes, settings or uniforms\n    this.setAttributes(attributes);\n    this.updateModuleSettings(moduleSettings);\n    this.setUniforms(uniforms, samplers);\n\n    // Animate any function valued uniforms\n    this._refreshAnimationProps(animationProps);\n\n    const logPriority = this._logDrawCallStart(2);\n\n    const drawParams = this.vertexArray.drawParams;\n    if (drawParams.isInstanced && !this.isInstanced) {\n      log.warn('Found instanced attributes on non-instanced model', this.id)();\n    }\n\n    const {isIndexed, indexType} = drawParams;\n    const {isInstanced, instanceCount} = this;\n\n    this.onBeforeRender();\n    this._timerQueryStart();\n\n    this.program.draw(Object.assign({}, opts, {\n      logPriority,\n      framebuffer,\n      parameters,\n      drawMode: this.getDrawMode(),\n      vertexCount: this.getVertexCount(),\n      vertexArray,\n      transformFeedback,\n      isIndexed,\n      indexType,\n      isInstanced,\n      instanceCount\n    }));\n\n    this._timerQueryEnd();\n    this.onAfterRender();\n\n    this.setNeedsRedraw(false);\n\n    this._logDrawCallEnd(logPriority, vertexArray, framebuffer);\n\n    return this;\n  }\n  /* eslint-enable max-statements  */\n\n  // Draw call for transform feedback\n  transform(opts = {}) {\n    const {\n      discard = true,\n      feedbackBuffers,\n      unbindModels = []\n    } = opts;\n\n    let {\n      parameters\n    } = opts;\n\n    if (feedbackBuffers) {\n      this._setFeedbackBuffers(feedbackBuffers);\n    }\n\n    if (discard) {\n      parameters = Object.assign({}, parameters, {[GL.RASTERIZER_DISCARD]: discard});\n    }\n\n    unbindModels.forEach(model => model.vertexArray.unbindBuffers());\n    try {\n      this.draw(Object.assign({}, opts, {parameters}));\n    } finally {\n      unbindModels.forEach(model => model.vertexArray.bindBuffers());\n    }\n\n    return this;\n  }\n\n  // DEPRECATED METHODS\n\n  render(uniforms = {}) {\n    assert(arguments.length <= 1);\n    // log.deprecated('Model.render()', 'Model.draw()')();\n    return this.draw({uniforms});\n  }\n\n  // PRIVATE METHODS\n\n  _createProgram({\n    vs = null,\n    fs = null,\n    // 1: Modular shaders\n    modules = null,\n    defines = {},\n    inject = {},\n    shaderCache = null,\n    // TransformFeedback\n    varyings = null,\n    bufferMode = GL.SEPARATE_ATTRIBS,\n    program = null\n  }) {\n    this.getModuleUniforms = x => {};\n\n    if (!program) {\n      // Assign default shaders if none are provided\n      vs = vs || MODULAR_SHADERS.vs;\n      fs = fs || MODULAR_SHADERS.fs;\n\n      const assembleResult = assembleShaders(this.gl, {vs, fs, modules, inject, defines, log});\n      ({vs, fs} = assembleResult);\n\n      if (shaderCache) {\n        program = shaderCache.getProgram(this.gl, {vs, fs, id: this.id});\n      } else {\n        program = new Program(this.gl, {vs, fs, varyings, bufferMode});\n      }\n\n      this.getModuleUniforms = assembleResult.getUniforms || (x => {});\n    }\n\n    assert(program instanceof Program, 'Model needs a program');\n    return program;\n  }\n  /* eslint-enable complexity */\n\n  // Uniforms\n\n  _checkForDeprecatedUniforms(uniforms) {\n    // deprecated picking uniforms\n    DEPRECATED_PICKING_UNIFORMS.forEach((uniform) => {\n      if (uniform in uniforms) {\n        log.deprecated(uniform,\n          'use picking shader module and Model class updateModuleSettings()')();\n      }\n    });\n  }\n\n  // Refreshes animated uniforms, attempting to get animated props from animationLoop if registered\n  _refreshAnimationProps(animationProps) {\n    // Try to read animationProps\n    animationProps = animationProps || (this.animationLoop && this.animationLoop.animationProps);\n    this._setAnimationProps(animationProps);\n  }\n\n  // Generates and sets uniform values based on new animationProps\n  _setAnimationProps(animationProps) {\n    if (this.animated) {\n      assert(animationProps, 'Model.draw(): animated uniforms but no animationProps');\n      const animatedUniforms = this._evaluateAnimateUniforms(animationProps);\n      this.program.setUniforms(animatedUniforms, {}, () => {\n        // if something changed\n        this._checkForDeprecatedUniforms(animatedUniforms);\n        this.setNeedsRedraw();\n      });\n    }\n  }\n\n  // Calculate new values for any function uniforms based on supplied animationProps\n  _evaluateAnimateUniforms(animationProps) {\n    if (!this.animated) {\n      return {};\n    }\n    const animatedUniforms = {};\n    for (const uniformName in this.animatedUniforms) {\n      const valueFunction = this.animatedUniforms[uniformName];\n      animatedUniforms[uniformName] = valueFunction(animationProps);\n    }\n    return animatedUniforms;\n  }\n\n  // Extracts a list of function valued uniforms, so we can update them before each draw call\n  // Also removes such uniforms from the returned list\n  _extractAnimatedUniforms(uniforms) {\n    let foundAnimated = false;\n\n    // Keep our animatedUniforms map up-to-date\n    for (const uniformName in uniforms) {\n      const newValue = uniforms[uniformName];\n      if (typeof newValue === 'function') {\n        this.animatedUniforms[uniformName] = newValue;\n        foundAnimated = true;\n      } else {\n        delete this.animatedUniforms[uniformName];\n      }\n    }\n\n    // Update animated flag: `Model` is animated if any uniforms are animated (i.e. functions)\n    this.animated = !isObjectEmpty(this.animatedUniforms);\n\n    if (!foundAnimated) {\n      return uniforms;\n    }\n\n    // If animated uniforms were found, remove them from ordinary uniform list\n    // `Program` class can't (and shouldn't) handle function valued uniforms\n    const staticUniforms = {};\n    for (const uniformName in uniforms) {\n      if (!this.animatedUniforms[uniformName]) {\n        staticUniforms[uniformName] = uniforms[uniformName];\n      }\n    }\n    return staticUniforms;\n  }\n\n  // Transform Feedback\n\n  _setFeedbackBuffers(feedbackBuffers = {}) {\n    // Avoid setting needsRedraw if no feedbackBuffers\n    if (isObjectEmpty(feedbackBuffers)) {\n      return this;\n    }\n\n    const {gl} = this.program;\n    this.transformFeedback = this.transformFeedback || new TransformFeedback(gl, {\n      program: this.program\n    });\n\n    this.transformFeedback.setBuffers(feedbackBuffers);\n\n    this.setNeedsRedraw();\n\n    return this;\n  }\n\n  // Timer Queries\n\n  _timerQueryStart() {\n    if (this.timerQueryEnabled === true) {\n      if (!this.timeElapsedQuery) {\n        this.timeElapsedQuery = new Query(this.gl);\n      }\n      if (this.lastQueryReturned) {\n        this.lastQueryReturned = false;\n        this.timeElapsedQuery.beginTimeElapsedQuery();\n      }\n    }\n  }\n\n  _timerQueryEnd() {\n    if (this.timerQueryEnabled === true) {\n      this.timeElapsedQuery.end();\n      // TODO: Skip results if 'gl.getParameter(this.ext.GPU_DISJOINT_EXT)' returns false\n      // should this be incorporated into Query object?\n      if (this.timeElapsedQuery.isResultAvailable()) {\n        this.lastQueryReturned = true;\n        const elapsedTime = this.timeElapsedQuery.getResult();\n\n        // Update stats (e.g. for seer)\n        this.stats.lastFrameTime = elapsedTime;\n        this.stats.accumulatedFrameTime += elapsedTime;\n        this.stats.profileFrameCount++;\n        this.stats.averageFrameTime =\n          this.stats.accumulatedFrameTime / this.stats.profileFrameCount;\n\n        // Log stats\n        log.log(LOG_DRAW_PRIORITY, `\\\nGPU time ${this.program.id}: ${this.stats.lastFrameTime}ms \\\naverage ${this.stats.averageFrameTime}ms \\\naccumulated: ${this.stats.accumulatedFrameTime}ms \\\ncount: ${this.stats.profileFrameCount}`\n        )();\n      }\n    }\n  }\n\n  // Makes sure buffers are created for all attributes\n  // and that the program is updated with those buffers\n  // TODO - do we need the separation between \"attributes\" and \"buffers\"\n  // couldn't apps just create buffers directly?\n  _createBuffersFromAttributeDescriptors(attributes) {\n    const {program: {gl}} = this;\n\n    // const attributes = {};\n    const buffers = {};\n\n    for (const attributeName in attributes) {\n\n      const descriptor = attributes[attributeName];\n\n      let attribute = this._attributes[attributeName];\n\n      if (descriptor instanceof Attribute) {\n        attribute = descriptor;\n      } else if (descriptor instanceof Buffer) {\n        attribute = attribute || new Attribute(gl, Object.assign({}, descriptor.layout, {\n          id: attributeName\n        }));\n        attribute.update({buffer: descriptor});\n      } else if (attribute) {\n        attribute.update(descriptor);\n      } else {\n        attribute = new Attribute(gl, Object.assign({}, descriptor, {\n          id: attributeName\n        }));\n      }\n\n      this._attributes[attributeName] = attribute;\n      buffers[attributeName] = attribute.getValue();\n    }\n\n    return buffers;\n  }\n\n  _logDrawCallStart(priority) {\n    const logDrawTimeout = priority > 3 ? 0 : LOG_DRAW_TIMEOUT;\n    if (log.priority < priority || (Date.now() - this.lastLogTime < logDrawTimeout)) {\n      return undefined;\n    }\n\n    this.lastLogTime = Date.now();\n\n    log.group(LOG_DRAW_PRIORITY, `>>> DRAWING MODEL ${this.id}`, {collapsed: log.priority <= 2})();\n\n    return priority;\n  }\n\n  _logDrawCallEnd(priority, vertexArray, uniforms, framebuffer) {\n    if (priority === undefined) {\n      return;\n    }\n\n    const attributeTable = vertexArray._getDebugTable({\n      header: `${this.id} attributes`,\n      attributes: this._attributes\n    });\n\n    const {table: uniformTable, unusedTable, unusedCount} = getUniformsTable({\n      header: `${this.id} uniforms`,\n      program: this.program,\n      uniforms: Object.assign({}, this.program.uniforms, uniforms)\n    });\n\n    // log missing uniforms\n    const {table: missingTable, count: missingCount} = getUniformsTable({\n      header: `${this.id} uniforms`,\n      program: this.program,\n      uniforms: Object.assign({}, this.program.uniforms, uniforms),\n      undefinedOnly: true\n    });\n\n    if (missingCount > 0) {\n      log.log('MISSING UNIFORMS', Object.keys(missingTable))();\n      // log.table(priority, missingTable)();\n    }\n    if (unusedCount > 0) {\n      log.log('UNUSED UNIFORMS', Object.keys(unusedTable))();\n      // log.log(priority, 'Unused uniforms ', unusedTable)();\n    }\n\n    log.table(priority, attributeTable)();\n\n    log.table(priority, uniformTable)();\n\n    logModel(this, uniforms);\n\n    if (framebuffer) {\n      framebuffer.log({priority: LOG_DRAW_PRIORITY, message: `Rendered to ${framebuffer.id}`});\n    }\n\n    log.groupEnd(LOG_DRAW_PRIORITY, `>>> DRAWING MODEL ${this.id}`)();\n  }\n}\n"],"file":"model.js"}