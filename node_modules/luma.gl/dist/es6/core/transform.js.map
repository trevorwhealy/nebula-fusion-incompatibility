{"version":3,"sources":["../../../src/core/transform.js"],"names":["GL","Model","Buffer","TransformFeedback","isWebGL2","assertWebGL2Context","getShaderVersion","assert","log","FS100","FS300","Transform","isSupported","gl","constructor","opts","model","currentIndex","sourceBuffers","Array","feedbackBuffers","transformFeedbacks","_buffersCreated","_initialize","Object","seal","delete","name","elementCount","getVertexCount","getBuffer","varyingName","run","uniforms","unbindModels","setAttributes","transform","transformFeedback","parameters","RASTERIZER_DISCARD","swapBuffers","feedbackMap","update","warn","setVertexCount","bufferName","assign","_createFeedbackBuffers","setBuffers","_setupSwapBuffers","id","vs","varyings","drawMode","POINTS","destinationBuffers","sourceDestinationMap","deprecated","isArray","varyingsArray","values","_setupBuffers","_buildModel","current","sourceBufferName","feedbackBufferName","sourceBuffer","bytes","type","usage","accessor","buffer","next","fs","vertexCount","program","buffers"],"mappings":"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","sourcesContent":["import GL from '../constants';\nimport Model from './model';\nimport Buffer from '../webgl/buffer';\nimport TransformFeedback from '../webgl/transform-feedback';\nimport {isWebGL2, assertWebGL2Context, getShaderVersion} from '../webgl-utils';\nimport assert from '../utils/assert';\nimport {log} from '../utils';\n\nconst FS100 = 'void main() {}';\nconst FS300 = `#version 300 es\\n${FS100}`;\n\nexport default class Transform {\n\n  static isSupported(gl) {\n    // For now WebGL2 only\n    return isWebGL2(gl);\n  }\n\n  constructor(gl, opts = {}) {\n    assertWebGL2Context(gl);\n\n    this.gl = gl;\n    this.model = null;\n    this.currentIndex = 0;\n    this.sourceBuffers = new Array(2);\n    this.feedbackBuffers = new Array(2);\n    this.transformFeedbacks = new Array(2);\n    this._buffersCreated = {};\n\n    this._initialize(opts);\n    Object.seal(this);\n  }\n\n  // Delete owned resources.\n  delete() {\n    for (const name in this._buffersCreated) {\n      this._buffersCreated[name].delete();\n    }\n    this.model.delete();\n  }\n\n  get elementCount() {\n    return this.model.getVertexCount();\n  }\n\n  // Return Buffer object for given varying name.\n  getBuffer(varyingName = null) {\n    assert(varyingName && this.feedbackBuffers[this.currentIndex][varyingName]);\n    return this.feedbackBuffers[this.currentIndex][varyingName];\n  }\n\n  // Run one transform feedback loop.\n  run({uniforms = {}, unbindModels = []} = {}) {\n    this.model.setAttributes(this.sourceBuffers[this.currentIndex]);\n    this.model.transform({\n      transformFeedback: this.transformFeedbacks[this.currentIndex],\n      parameters: {[GL.RASTERIZER_DISCARD]: true},\n      uniforms,\n      unbindModels\n    });\n  }\n\n  // Swap source and destination buffers.\n  swapBuffers() {\n    assert(this.feedbackMap);\n    this.currentIndex = (this.currentIndex + 1) % 2;\n  }\n\n  // Update some or all buffer bindings.\n  update({sourceBuffers = null, feedbackBuffers = null, elementCount = this.elementCount}) {\n    if (!sourceBuffers && !feedbackBuffers) {\n      log.warn('Transform : no buffers updated')();\n      return this;\n    }\n\n    this.model.setVertexCount(elementCount);\n\n    for (const bufferName in feedbackBuffers) {\n      assert(feedbackBuffers[bufferName] instanceof Buffer);\n    }\n\n    const {currentIndex} = this;\n    Object.assign(this.sourceBuffers[currentIndex], sourceBuffers);\n    Object.assign(this.feedbackBuffers[currentIndex], feedbackBuffers);\n    this._createFeedbackBuffers({feedbackBuffers});\n    this.transformFeedbacks[currentIndex].setBuffers(this.feedbackBuffers[currentIndex]);\n\n    // Buffer have changed, need to re-setup swap buffers.\n    this._setupSwapBuffers();\n    return this;\n  }\n\n  // Private\n\n  _initialize({\n    // Program parameters\n    id = 'transform',\n    vs,\n    varyings,\n    drawMode = GL.POINTS,\n    elementCount,\n\n    // buffers\n    sourceBuffers,\n    feedbackBuffers = null,\n    feedbackMap = null,\n\n    // deprecated\n    destinationBuffers = null,\n    sourceDestinationMap = null\n  }) {\n    if (destinationBuffers) {\n      log.deprecated('destinationBuffers', 'feedbackBuffers')();\n      feedbackBuffers = feedbackBuffers || destinationBuffers;\n    }\n    if (sourceDestinationMap) {\n      log.deprecated('sourceDestinationMap', 'feedbackMap')();\n      feedbackMap = feedbackMap || sourceDestinationMap;\n    }\n\n    assert(sourceBuffers && vs && elementCount >= 0);\n    // If feedbackBuffers are not provided, sourceDestinationMap must be provided\n    // to create destinaitonBuffers with layout of corresponding source buffer.\n    assert(feedbackBuffers || feedbackMap, ' Transform needs feedbackBuffers or feedbackMap');\n    for (const bufferName in feedbackBuffers || {}) {\n      assert(feedbackBuffers[bufferName] instanceof Buffer);\n    }\n\n    // If varyings are not provided feedbackMap must be provided to deduce varyings\n    assert(Array.isArray(varyings) || feedbackMap);\n    let varyingsArray = varyings;\n    if (!Array.isArray(varyings)) {\n      varyingsArray = Object.values(feedbackMap);\n    }\n\n    this.feedbackMap = feedbackMap;\n\n    this._setupBuffers({sourceBuffers, feedbackBuffers});\n    this._setupSwapBuffers();\n    this._buildModel({id, vs, varyings: varyingsArray, drawMode, elementCount});\n  }\n\n  // setup source and destination buffers\n  _setupBuffers({sourceBuffers = null, feedbackBuffers = null}) {\n    this.sourceBuffers[0] = Object.assign({}, sourceBuffers);\n    this.feedbackBuffers[0] = Object.assign({}, feedbackBuffers);\n    this._createFeedbackBuffers({feedbackBuffers});\n    this.sourceBuffers[1] = {};\n    this.feedbackBuffers[1] = {};\n  }\n\n  // auto create any feedback buffers\n  _createFeedbackBuffers({feedbackBuffers}) {\n    if (!this.feedbackMap) {\n      // feedbackMap required to auto create buffers.\n      return;\n    }\n    const current = this.currentIndex;\n    for (const sourceBufferName in this.feedbackMap) {\n      const feedbackBufferName = this.feedbackMap[sourceBufferName];\n      if (!feedbackBuffers || !feedbackBuffers[feedbackBufferName]) {\n        // Create new buffer with same layout and settings as source buffer\n        const sourceBuffer = this.sourceBuffers[current][sourceBufferName];\n        const {bytes, type, usage, accessor} = sourceBuffer;\n        const buffer = new Buffer(this.gl, {bytes, type, usage, accessor});\n\n        if (this._buffersCreated[feedbackBufferName]) {\n          this._buffersCreated[feedbackBufferName].delete();\n          this._buffersCreated[feedbackBufferName] = buffer;\n        }\n        this.feedbackBuffers[current][feedbackBufferName] = buffer;\n      }\n    }\n  }\n\n  // setup buffers for swapping.\n  // Second set of source and feedback objects are setup to point\n  // to corresponding feedback and source buffers.\n  _setupSwapBuffers() {\n    if (!this.feedbackMap) {\n      // feedbackMap required set up swap buffers.\n      return;\n    }\n    const current = this.currentIndex;\n    const next = (current + 1) % 2;\n\n    for (const sourceBufferName in this.feedbackMap) {\n      const feedbackBufferName = this.feedbackMap[sourceBufferName];\n\n      this.sourceBuffers[next][sourceBufferName] =\n        this.feedbackBuffers[current][feedbackBufferName];\n      this.feedbackBuffers[next][feedbackBufferName] =\n        this.sourceBuffers[current][sourceBufferName];\n\n      // make sure the new destination buffer is a Buffer object\n      assert(this.feedbackBuffers[next][feedbackBufferName] instanceof Buffer);\n    }\n\n    // When triggered by `update()` TranformFeedback objects are already set up,\n    // if so update buffers\n    if (this.transformFeedbacks[next]) {\n      this.transformFeedbacks[next].setBuffers(this.feedbackBuffers[next]);\n    }\n  }\n\n  // build Model and TransformFeedback objects\n  _buildModel({id, vs, varyings, drawMode, elementCount}) {\n    // use a minimal fragment shader with matching version of vertex shader.\n    const fs = getShaderVersion(vs) === 300 ? FS300 : FS100;\n\n    this.model = new Model(this.gl, {\n      id,\n      vs,\n      fs,\n      varyings,\n      drawMode,\n      vertexCount: elementCount\n    });\n\n    this.transformFeedbacks[0] = new TransformFeedback(this.gl, {\n      program: this.model.program,\n      buffers: this.feedbackBuffers[0]\n    });\n\n    // If buffers are swappable setup second transform feedback object.\n    if (this.feedbackMap) {\n      this.transformFeedbacks[1] = new TransformFeedback(this.gl, {\n        program: this.model.program,\n        buffers: this.feedbackBuffers[1]\n      });\n    }\n  }\n}\n"],"file":"transform.js"}