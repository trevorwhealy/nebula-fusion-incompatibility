{"version":3,"sources":["../../../../../src/shadertools/test/lib/assemble-shaders.spec.js"],"names":["createGLContext","assembleShaders","picking","fp64","getShaderModule","sinon","test","fixture","gl","VS_GLSL_300","FS_GLSL_300","t","ok","undefined","end","assembleResult","vs","fs","modules","equal","indexOf","testModuleSettings","pickingActive","picking2","Object","assign","getUniforms","spy","testModule","name","opts","context","picking_uActive","dependencies","is","called","deepEqual","getCall","args","calledAfter"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport {createGLContext, assembleShaders, picking, fp64} from 'luma.gl';\nimport {getShaderModule} from 'luma.gl/shadertools/src/lib/resolve-modules';\nimport sinon from 'sinon';\nimport test from 'tape-catch';\n\nconst fixture = {\n  gl: createGLContext()\n};\n\nconst VS_GLSL_300 = `\\\n#version 300 es\n\nin vec4 positions;\n\nvoid main(void) {\n  gl_Position = positions;\n}\n`;\nconst FS_GLSL_300 = `\\\n#version 300 es\n\nprecision highp float;\n\nout vec4 fragmentColor;\n\nvoid main(void) {\n  fragmentColor = vec4(1.0, 1.0, 1.0, 1.0);\n}\n`;\n\ntest('assembleShaders#import', t => {\n  t.ok(assembleShaders !== undefined, 'assembleShaders import successful');\n  t.end();\n});\n\ntest('assembleShaders#version_directive', t => {\n  const assembleResult = assembleShaders(fixture.gl, {\n    vs: VS_GLSL_300,\n    fs: FS_GLSL_300,\n    modules: [picking]\n  });\n  // Verify version directive remains as first line.\n  t.equal(assembleResult.vs.indexOf('#version 300 es'), 0,\n    'version directive should be first statement');\n  t.equal(assembleResult.fs.indexOf('#version 300 es'), 0,\n    'version directive should be first statement');\n  t.end();\n});\n\ntest('assembleShaders#getUniforms', t => {\n\n  const testModuleSettings = {pickingActive: true};\n\n  // inject spy into the picking module's getUniforms\n  const picking2 = Object.assign(getShaderModule(picking), {\n    getUniforms: sinon.spy(getShaderModule(picking).getUniforms)\n  });\n\n  const testModule = {\n    name: 'test-module',\n    vs: '',\n    fs: '',\n    getUniforms: sinon.spy((opts, context) => {\n      // Check a uniform generated by its dependency\n      t.ok(context.picking_uActive, 'module getUniforms is called with correct context');\n    }),\n    dependencies: ['picking']\n  };\n\n  let assembleResult;\n\n  // Without shader modules\n  assembleResult = assembleShaders(fixture.gl, {\n    vs: VS_GLSL_300,\n    fs: FS_GLSL_300\n  });\n  // Verify getUniforms is function\n  t.is(typeof assembleResult.getUniforms, 'function', 'getUniforms should be function');\n\n  // With shader modules\n  assembleResult = assembleShaders(fixture.gl, {\n    vs: VS_GLSL_300,\n    fs: FS_GLSL_300,\n    modules: [picking2, testModule, fp64]\n  });\n\n  // Verify getUniforms is function\n  t.is(typeof assembleResult.getUniforms, 'function', 'getUniforms should be function');\n\n  assembleResult.getUniforms(testModuleSettings);\n\n  t.ok(picking2.getUniforms.called, 'module getUniforms is called');\n  t.deepEqual(\n    picking2.getUniforms.getCall(0).args[0],\n    testModuleSettings,\n    'module getUniforms is called with correct opts');\n\n  t.ok(testModule.getUniforms.calledAfter(picking2.getUniforms),\n    'module getUniforms is called after its dependencies');\n  t.deepEqual(\n    testModule.getUniforms.getCall(0).args[0],\n    testModuleSettings,\n    'module getUniforms is called with correct opts');\n\n  t.end();\n});\n"],"file":"assemble-shaders.spec.js"}