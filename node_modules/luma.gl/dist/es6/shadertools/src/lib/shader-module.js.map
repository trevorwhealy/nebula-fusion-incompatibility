{"version":3,"sources":["../../../../../src/shadertools/src/lib/shader-module.js"],"names":["transpileShader","assert","VERTEX_SHADER","FRAGMENT_SHADER","ShaderModule","constructor","name","vs","fs","dependencies","getUniforms","deprecations","vertexShader","fragmentShader","getModuleUniforms","_parseDeprecationDefinitions","getModuleSource","type","targetGLSLVersion","moduleSource","toUpperCase","opts","uniforms","checkDeprecations","shaderSource","log","forEach","def","regex","test","deprecated","old","new","removed","RegExp"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,oBAA5B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,MAAMC,gBAAgB,IAAtB;AACA,MAAMC,kBAAkB,IAAxB;AAEA,eAAe,MAAMC,YAAN,CAAmB;AAChCC,cAAY;AACVC,QADU;AAEVC,MAFU;AAGVC,MAHU;AAIVC,mBAAe,EAJL;AAKVC,kBAAc,OAAO,EAAP,CALJ;AAMVC,mBAAe,EANL;AAOV;AACAC,gBARU;AASVC;AATU,GAAZ,EAUG;AACDZ,WAAO,OAAOK,IAAP,KAAgB,QAAvB;AACA,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,EAAL,GAAUA,MAAMK,YAAhB;AACA,SAAKJ,EAAL,GAAUA,MAAMK,cAAhB;AACA,SAAKC,iBAAL,GAAyBJ,WAAzB;AACA,SAAKD,YAAL,GAAoBA,YAApB;AACA,SAAKE,YAAL,GAAoB,KAAKI,4BAAL,CAAkCJ,YAAlC,CAApB;AACD,GAnB+B,CAqBhC;;;AACAK,kBAAgBC,IAAhB,EAAsBC,iBAAtB,EAAyC;AACvC,QAAIC,YAAJ;;AACA,YAAQF,IAAR;AACA,WAAKf,aAAL;AACEiB,uBAAenB,gBAAgB,KAAKO,EAAL,IAAW,EAA3B,EAA+BW,iBAA/B,EAAkD,IAAlD,CAAf;AACA;;AACF,WAAKf,eAAL;AACEgB,uBAAenB,gBAAgB,KAAKQ,EAAL,IAAW,EAA3B,EAA+BU,iBAA/B,EAAkD,KAAlD,CAAf;AACA;;AACF;AACEjB,eAAO,KAAP;AARF;;AAWA,QAAI,OAAOkB,YAAP,KAAwB,QAA5B,EAAsC;AACpC,aAAO,EAAP;AACD;;AAED,WAAQ;iBACK,KAAKb,IAAL,CAAUc,WAAV,EAAwB;EACvCD,YAAa;gBACC,KAAKb,IAAK;;CAHtB;AAMD;;AAEDI,cAAYW,IAAZ,EAAkBC,QAAlB,EAA4B;AAC1B,WAAO,KAAKR,iBAAL,CAAuBO,IAAvB,EAA6BC,QAA7B,CAAP;AACD,GAjD+B,CAmDhC;;;AACAC,oBAAkBC,YAAlB,EAAgCC,GAAhC,EAAqC;AACnC,SAAKd,YAAL,CAAkBe,OAAlB,CAA0BC,OAAO;AAC/B,UAAIA,IAAIC,KAAJ,CAAUC,IAAV,CAAeL,YAAf,CAAJ,EAAkC;AAChC,YAAIG,IAAIG,UAAJ,IAAkBL,GAAtB,EAA2B;AACzBA,cAAIK,UAAJ,CAAeH,IAAII,GAAnB,EAAwBJ,IAAIK,GAA5B;AACD,SAFD,MAEO,IAAIP,GAAJ,EAAS;AACdA,cAAIQ,OAAJ,CAAYN,IAAII,GAAhB,EAAqBJ,IAAIK,GAAzB;AACD;AACF;AACF,KARD;AASD;;AAEDjB,+BAA6BJ,eAAe,EAA5C,EAAgD;AAC9CA,iBAAae,OAAb,CAAqBC,OAAO;AAC1B,cAAQA,IAAIV,IAAZ;AACA,aAAK,UAAL;AACEU,cAAIC,KAAJ,GAAY,IAAIM,MAAJ,CAAY,MAAKP,IAAII,GAAI,KAAzB,CAAZ;AACA;;AACF;AACEJ,cAAIC,KAAJ,GAAY,IAAIM,MAAJ,CAAY,GAAEP,IAAIV,IAAK,IAAGU,IAAII,GAAI,GAAlC,CAAZ;AALF;AAOD,KARD;AAUA,WAAOpB,YAAP;AACD;;AA5E+B","sourcesContent":["import transpileShader from './transpile-shader';\nimport assert from '../utils/assert';\n\nconst VERTEX_SHADER = 'vs';\nconst FRAGMENT_SHADER = 'fs';\n\nexport default class ShaderModule {\n  constructor({\n    name,\n    vs,\n    fs,\n    dependencies = [],\n    getUniforms = () => ({}),\n    deprecations = [],\n    // DEPRECATED\n    vertexShader,\n    fragmentShader\n  }) {\n    assert(typeof name === 'string');\n    this.name = name;\n    this.vs = vs || vertexShader;\n    this.fs = fs || fragmentShader;\n    this.getModuleUniforms = getUniforms;\n    this.dependencies = dependencies;\n    this.deprecations = this._parseDeprecationDefinitions(deprecations);\n  }\n\n  // Extracts the source code chunk for the specified shader type from the named shader module\n  getModuleSource(type, targetGLSLVersion) {\n    let moduleSource;\n    switch (type) {\n    case VERTEX_SHADER:\n      moduleSource = transpileShader(this.vs || '', targetGLSLVersion, true);\n      break;\n    case FRAGMENT_SHADER:\n      moduleSource = transpileShader(this.fs || '', targetGLSLVersion, false);\n      break;\n    default:\n      assert(false);\n    }\n\n    if (typeof moduleSource !== 'string') {\n      return '';\n    }\n\n    return `\\\n#define MODULE_${this.name.toUpperCase()}\n${moduleSource}\\\n// END MODULE_${this.name}\n\n`;\n  }\n\n  getUniforms(opts, uniforms) {\n    return this.getModuleUniforms(opts, uniforms);\n  }\n\n  // Warn about deprecated uniforms or functions\n  checkDeprecations(shaderSource, log) {\n    this.deprecations.forEach(def => {\n      if (def.regex.test(shaderSource)) {\n        if (def.deprecated && log) {\n          log.deprecated(def.old, def.new)();\n        } else if (log) {\n          log.removed(def.old, def.new)();\n        }\n      }\n    });\n  }\n\n  _parseDeprecationDefinitions(deprecations = []) {\n    deprecations.forEach(def => {\n      switch (def.type) {\n      case 'function':\n        def.regex = new RegExp(`\\\\b${def.old}\\\\(`);\n        break;\n      default:\n        def.regex = new RegExp(`${def.type} ${def.old};`);\n      }\n    });\n\n    return deprecations;\n  }\n}\n"],"file":"shader-module.js"}