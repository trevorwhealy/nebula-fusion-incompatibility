{"version":3,"sources":["../../../src/webgl-utils/constants-to-keys.js"],"names":["assert","log","getKeyValue","gl","name","number","Number","isNaN","replace","value","undefined","getKey","key","String","getKeyType","glGet","removed","glKey","glKeyType"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,iBAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB,C,CAEA;;AACA,OAAO,SAASC,WAAT,CAAqBC,EAArB,EAAyBC,IAAzB,EAA+B;AACpC;AACA,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAOA,IAAP;AACD,GAJmC,CAMpC;;;AACA,MAAMC,SAASC,OAAOF,IAAP,CAAf;;AACA,MAAI,CAACG,MAAMF,MAAN,CAAL,EAAoB;AAClB,WAAOA,MAAP;AACD,GAVmC,CAYpC;;;AACAD,SAAOA,KAAKI,OAAL,CAAa,OAAb,EAAsB,EAAtB,CAAP;AACA,MAAMC,QAAQN,GAAGC,IAAH,CAAd;AACAJ,SAAOS,UAAUC,SAAjB,4CAA+DN,IAA/D;AACA,SAAOK,KAAP;AACD;AAED,OAAO,SAASE,MAAT,CAAgBR,EAAhB,EAAoBM,KAApB,EAA2B;AAChCA,UAAQH,OAAOG,KAAP,CAAR;;AACA,OAAK,IAAMG,GAAX,IAAkBT,EAAlB,EAAsB;AACpB,QAAIA,GAAGS,GAAH,MAAYH,KAAhB,EAAuB;AACrB,0BAAaG,GAAb;AACD;AACF;;AACD,SAAOC,OAAOJ,KAAP,CAAP;AACD;AAED,OAAO,SAASK,UAAT,CAAoBX,EAApB,EAAwBM,KAAxB,EAA+B;AACpCT,SAAOS,UAAUC,SAAjB,EAA4B,eAA5B;AACAD,UAAQH,OAAOG,KAAP,CAAR;;AACA,OAAK,IAAMG,GAAX,IAAkBT,EAAlB,EAAsB;AACpB,QAAIA,GAAGS,GAAH,MAAYH,KAAhB,EAAuB;AACrB,0BAAaG,GAAb;AACD;AACF;;AACD,SAAOC,OAAOJ,KAAP,CAAP;AACD,C,CAED;AAEA;AACA;;AACA,OAAO,SAASM,KAAT,CAAeZ,EAAf,EAAmBC,IAAnB,EAAyB;AAC9B,MAAI,CAACA,IAAL,EAAW;AACTH,QAAIe,OAAJ,CAAY,aAAZ,EAA2B,iBAA3B,EAA8C,KAA9C;AACD;;AACD,SAAOd,YAAYC,EAAZ,EAAgBC,IAAhB,CAAP;AACD;AAED,OAAO,SAASa,KAAT,CAAed,EAAf,EAAmBM,KAAnB,EAA0B;AAC/B,MAAIA,UAAUC,SAAd,EAAyB;AACvBT,QAAIe,OAAJ,CAAY,cAAZ,EAA4B,kBAA5B,EAAgD,KAAhD;AACD;;AACD,SAAOL,OAAOR,EAAP,EAAWM,KAAX,CAAP;AACD;AAED,OAAO,SAASS,SAAT,CAAmBf,EAAnB,EAAuBM,KAAvB,EAA8B;AACnC,MAAIA,UAAUC,SAAd,EAAyB;AACvBT,QAAIe,OAAJ,CAAY,kBAAZ,EAAgC,sBAAhC,EAAwD,KAAxD;AACD;;AACD,SAAOF,WAAWX,EAAX,EAAeM,KAAf,CAAP;AACD","sourcesContent":["import assert from '../utils/assert';\nimport log from '../utils/log';\n\n// Resolve a WebGL enumeration name (returns itself if already a number)\nexport function getKeyValue(gl, name) {\n  // If not a string, return (assume number)\n  if (typeof name !== 'string') {\n    return name;\n  }\n\n  // If string converts to number, return number\n  const number = Number(name);\n  if (!isNaN(number)) {\n    return number;\n  }\n\n  // Look up string, after removing any 'GL.' or 'gl.' prefix\n  name = name.replace(/^.*\\./, '');\n  const value = gl[name];\n  assert(value !== undefined, `Accessing undefined constant GL.${name}`);\n  return value;\n}\n\nexport function getKey(gl, value) {\n  value = Number(value);\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return `gl.${key}`;\n    }\n  }\n  return String(value);\n}\n\nexport function getKeyType(gl, value) {\n  assert(value !== undefined, 'undefined key');\n  value = Number(value);\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return `gl.${key}`;\n    }\n  }\n  return String(value);\n}\n\n// Public methods\n\n// Resolve a WebGL enumeration name (returns itself if already a number)\n// TODO - unify with methods above\nexport function glGet(gl, name) {\n  if (!name) {\n    log.removed('glGet(name)', 'glGet(gl, name)', '6.0')();\n  }\n  return getKeyValue(gl, name);\n}\n\nexport function glKey(gl, value) {\n  if (value === undefined) {\n    log.removed('glKey(value)', 'glKey(gl, value)', '6.0')();\n  }\n  return getKey(gl, value);\n}\n\nexport function glKeyType(gl, value) {\n  if (value === undefined) {\n    log.removed('glKeyType(value)', 'glKeyType(gl, value)', '6.0')();\n  }\n  return getKeyType(gl, value);\n}\n"],"file":"constants-to-keys.js"}