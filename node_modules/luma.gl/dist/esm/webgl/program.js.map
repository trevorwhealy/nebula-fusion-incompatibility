{"version":3,"sources":["../../../src/webgl/program.js"],"names":["GL","Resource","Texture","Framebuffer","parseUniformName","getUniformSetter","VertexShader","FragmentShader","ProgramConfiguration","withParameters","checkUniformValues","areUniformsEqual","assertWebGL2Context","isWebGL2","getPrimitiveDrawMode","log","uid","assert","LOG_PROGRAM_PERF_PRIORITY","GL_SEPARATE_ATTRIBS","Program","gl","opts","_isCached","initialize","stubRemovedMethods","Object","seal","_setId","id","props","vs","fs","varyings","bufferMode","uniforms","samplers","transformFeedbackVaryings","handle","_compileAndLink","_readUniformLocationsFromLinkedProgram","configuration","setProps","setUniforms","logPriority","drawMode","TRIANGLES","vertexCount","offset","start","end","isIndexed","indexType","UNSIGNED_SHORT","isInstanced","instanceCount","vertexArray","transformFeedback","framebuffer","parameters","undefined","fb","message","useProgram","bind","assign","primitiveMode","begin","drawElementsInstanced","isNaN","drawElementsRange","drawElements","drawArraysInstanced","drawArrays","_onChangeCallback","somethingChanged","key","_setUniforms","uniformName","uniform","uniformSetter","_uniformSetters","sampler","texture","textureIndex","_textureIndexCounter","createProgram","deleteProgram","shaderHandles","getAttachedShaders","shaderHandle","type","getShaderParameter","SHADER_TYPE","VERTEX_SHADER","FRAGMENT_SHADER","pname","getProgramParameter","programName","_getName","getName","replace","attachShader","time","linkProgram","timeEnd","debug","priority","validateProgram","linked","LINK_STATUS","Error","getProgramInfoLog","_uniformCount","_getParameter","ACTIVE_UNIFORMS","i","info","getActiveUniform","name","isArray","location","getUniformLocation","uniformIndices","getActiveUniforms","blockName","getUniformBlockIndex","blockIndex","getActiveUniformBlockParameter","blockBinding","uniformBlockBinding"],"mappings":"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","sourcesContent":["/* eslint-disable no-inline-comments */\nimport GL from '../constants';\nimport Resource from './resource';\nimport Texture from './texture';\nimport Framebuffer from './framebuffer';\nimport {parseUniformName, getUniformSetter} from './uniforms';\nimport {VertexShader, FragmentShader} from './shader';\nimport ProgramConfiguration from './program-configuration';\nimport {withParameters} from '../webgl-context/context-state';\nimport {checkUniformValues, areUniformsEqual} from '../webgl/uniforms';\nimport {assertWebGL2Context, isWebGL2} from '../webgl-utils';\nimport {getPrimitiveDrawMode} from '../webgl-utils/attribute-utils';\nimport {log, uid} from '../utils';\nimport assert from '../utils/assert';\n\nconst LOG_PROGRAM_PERF_PRIORITY = 4;\n\n// const GL_INTERLEAVED_ATTRIBS = 0x8C8C;\nconst GL_SEPARATE_ATTRIBS = 0x8C8D;\n\nexport default class Program extends Resource {\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // For backwards compatibility, each program creates a vertex array.\n    // It can (should) be overridden in draw.\n    // this.vertexArray = null;\n\n    // Experimental flag to avoid deleting Program object while it is cached\n    this._isCached = false;\n\n    this.initialize(opts);\n\n    this.stubRemovedMethods('Program', 'v6.0', [\n      'setVertexArray',\n      'setAttributes',\n      'setBuffers',\n      'unsetBuffers',\n\n      'use',\n      'getUniformCount',\n      'getUniformInfo',\n      'getUniformLocation',\n      'getUniformValue',\n\n      'getVarying',\n      'getFragDataLocation',\n      'getAttachedShaders',\n      'getAttributeCount',\n      'getAttributeLocation',\n      'getAttributeInfo'\n    ]);\n\n    Object.seal(this);\n\n    this._setId(opts.id);\n  }\n\n  initialize(props = {}) {\n    const {vs, fs, varyings, bufferMode = GL_SEPARATE_ATTRIBS} = props;\n    // Create shaders if needed\n    this.vs = typeof vs === 'string' ? new VertexShader(this.gl, vs) : vs;\n    this.fs = typeof fs === 'string' ? new FragmentShader(this.gl, fs) : fs;\n    assert(this.vs instanceof VertexShader, 'Program: bad vertex shader');\n    assert(this.fs instanceof FragmentShader, 'Program: bad fragment shader');\n\n    // uniforms\n    this.uniforms = {};\n    this.samplers = {};\n\n    // Setup varyings if supplied\n    if (varyings) {\n      assertWebGL2Context(this.gl);\n      this.varyings = varyings;\n      this.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n    }\n\n    this._compileAndLink();\n    this._readUniformLocationsFromLinkedProgram();\n    this.configuration = new ProgramConfiguration(this);\n\n    return this.setProps(props);\n  }\n\n  delete(opts = {}) {\n    if (this._isCached) {\n      // This object is cached, do not delete\n      return this;\n    }\n    return super.delete(opts);\n  }\n\n  setProps(props) {\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms, props.samplers);\n    }\n    return this;\n  }\n\n  // Another thing about the WebGL API is that there are so many ways to draw things.\n  // This function unifies those ways into a single call using common parameters with sane defaults\n  draw({\n    logPriority,\n    drawMode = GL.TRIANGLES,\n    vertexCount,\n    offset = 0,\n    start,\n    end,\n    isIndexed = false,\n    indexType = GL.UNSIGNED_SHORT,\n    isInstanced = false,\n    instanceCount = 0,\n\n    vertexArray = null, // VertexArray.getDefaultArray(this.gl),\n    transformFeedback,\n    framebuffer,\n    uniforms = {},\n    samplers = {},\n    parameters = {}\n  }) {\n    if (logPriority !== undefined) {\n      const fb = framebuffer ? framebuffer.id : 'default';\n      const message =\n        `Framebuffer=${fb}: mode=${drawMode} verts=${vertexCount} instances=${instanceCount}` +\n        ` isIndexed=${isIndexed} isInstanced=${isInstanced}`;\n      log.log(logPriority, message)();\n    }\n\n    this.gl.useProgram(this.handle);\n\n    // TODO - move vertex array binding and transform feedback binding to withParameters?\n    assert(vertexArray);\n\n    vertexArray.bind(() => {\n\n      this.setUniforms(uniforms, samplers);\n\n      if (framebuffer !== undefined) {\n        parameters = Object.assign({}, parameters, {framebuffer});\n      }\n\n      if (transformFeedback) {\n        const primitiveMode = getPrimitiveDrawMode(drawMode);\n        transformFeedback.begin(primitiveMode);\n      }\n\n      withParameters(this.gl, parameters,\n        () => {\n          // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n          if (isIndexed && isInstanced) {\n            this.gl.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n          } else if (isIndexed && isWebGL2(this.gl) && !isNaN(start) && !isNaN(end)) {\n            this.gl.drawElementsRange(drawMode, start, end, vertexCount, indexType, offset);\n          } else if (isIndexed) {\n            this.gl.drawElements(drawMode, vertexCount, indexType, offset);\n          } else if (isInstanced) {\n            this.gl.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n          } else {\n            this.gl.drawArrays(drawMode, offset, vertexCount);\n          }\n        }\n      );\n\n      if (transformFeedback) {\n        transformFeedback.end();\n      }\n\n    });\n\n    return this;\n  }\n\n  setSamplers(samplers) {\n    Object.assign(this.samplers, samplers);\n  }\n\n  setUniforms(uniforms = {}, samplers = {}, _onChangeCallback = () => {}) {\n    // Simple change detection - if all uniforms are unchanged, do nothing\n    // TODO - Disabled since it interferes with textures\n    // we must still rebind texture units to current program's textures before drawing\n    // If modifying, test with `picking` example on website\n    let somethingChanged = false;\n    for (const key in uniforms) {\n      if (!areUniformsEqual(this.uniforms[key], uniforms[key])) {\n        somethingChanged = true;\n        break;\n      }\n    }\n\n    if (somethingChanged) {\n      _onChangeCallback();\n      checkUniformValues(uniforms, this.id);\n      Object.assign(this.uniforms, uniforms);\n      Object.assign(this.samplers, samplers);\n    }\n\n    // TODO - should only set updated uniforms\n    this._setUniforms(this.uniforms, this.samplers);\n\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  // Apply a set of uniform values to a program\n  // Only uniforms actually present in the linked program will be updated.\n  /* eslint-disable max-depth */\n  _setUniforms(uniforms, samplers = {}) {\n    this.gl.useProgram(this.handle);\n\n    for (const uniformName in uniforms) {\n      let uniform = uniforms[uniformName];\n      const uniformSetter = this._uniformSetters[uniformName];\n      const sampler = samplers[uniformName];\n\n      if (uniformSetter) {\n        if (uniform instanceof Framebuffer) {\n          uniform = uniform.texture;\n        }\n        if (uniform instanceof Texture) {\n          if (uniformSetter.textureIndex === undefined) {\n            uniformSetter.textureIndex = this._textureIndexCounter++;\n          }\n\n          // Bind texture to index\n          const texture = uniform;\n          const {textureIndex} = uniformSetter;\n\n          // TODO - this should be separated out from uniform setting, since it needs to be done\n          // before every draw even if uniforms have not changed\n          texture.bind(textureIndex);\n\n          // Bind a sampler (if supplied) to index\n          if (sampler) {\n            sampler.bind(textureIndex);\n          }\n\n          // Set the uniform sampler to the texture index\n          uniformSetter(textureIndex);\n        } else {\n          // Just set the value\n          uniformSetter(uniform);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createProgram();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteProgram(this.handle);\n  }\n\n  // Extract opts needed to initialize a `Program` from an independently created WebGLProgram handle\n  _getOptionsFromHandle(handle) {\n    const shaderHandles = this.gl.getAttachedShaders(handle);\n    const opts = {};\n    for (const shaderHandle of shaderHandles) {\n      const type = this.gl.getShaderParameter(this.handle, GL.SHADER_TYPE);\n      switch (type) {\n      case GL.VERTEX_SHADER:\n        opts.vs = new VertexShader({handle: shaderHandle});\n        break;\n      case GL.FRAGMENT_SHADER:\n        opts.fs = new FragmentShader({handle: shaderHandle});\n        break;\n      default:\n      }\n    }\n    return opts;\n  }\n\n  _getParameter(pname) {\n    return this.gl.getProgramParameter(this.handle, pname);\n  }\n\n  // If program is not named, name it after shader names\n  // TODO - this.id will already have been initialized\n  _setId(id) {\n    if (!id) {\n      const programName = this._getName();\n      this.id = uid(programName);\n    }\n  }\n\n  // Generate a default name for the program based on names of the shaders\n  _getName() {\n    let programName = this.vs.getName() || this.fs.getName();\n    programName = programName.replace(/shader/i, '');\n    programName = programName ? `${programName}-program` : 'program';\n    return programName;\n  }\n\n  _compileAndLink() {\n    const {gl} = this;\n    gl.attachShader(this.handle, this.vs.handle);\n    gl.attachShader(this.handle, this.fs.handle);\n    log.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n    gl.linkProgram(this.handle);\n    log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n\n    // Avoid checking program linking error in production\n    if (gl.debug || log.priority > 0) {\n      gl.validateProgram(this.handle);\n      const linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n      if (!linked) {\n        throw new Error(`Error linking: ${gl.getProgramInfoLog(this.handle)}`);\n      }\n    }\n  }\n\n  // query uniform locations and build name to setter map.\n  _readUniformLocationsFromLinkedProgram() {\n    const {gl} = this;\n    this._uniformSetters = {};\n    this._uniformCount = this._getParameter(GL.ACTIVE_UNIFORMS);\n    for (let i = 0; i < this._uniformCount; i++) {\n      const info = this.gl.getActiveUniform(this.handle, i);\n      const {name, isArray} = parseUniformName(info.name);\n      const location = gl.getUniformLocation(this.handle, name);\n      this._uniformSetters[name] = getUniformSetter(gl, location, info, isArray);\n    }\n    this._textureIndexCounter = 0;\n  }\n\n  // stub for shader chache, should reset uniforms to default valiues\n  reset() {\n  }\n\n  // TO BE REMOVED in v7?\n\n  // Rretrieves information about active uniforms identifed by their indices (`uniformIndices`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniforms\n  getActiveUniforms(uniformIndices, pname) {\n    return this.gl.getActiveUniforms(this.handle, uniformIndices, pname);\n  }\n\n  // Retrieves the index of a uniform block\n  getUniformBlockIndex(blockName) {\n    return this.gl.getUniformBlockIndex(this.handle, blockName);\n  }\n\n  // Retrieves information about an active uniform block (`blockIndex`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter\n  getActiveUniformBlockParameter(blockIndex, pname) {\n    return this.gl.getActiveUniformBlockParameter(this.handle, blockIndex, pname);\n  }\n\n  // Binds a uniform block (`blockIndex`) to a specific binding point (`blockBinding`)\n  uniformBlockBinding(blockIndex, blockBinding) {\n    this.gl.uniformBlockBinding(this.handle, blockIndex, blockBinding);\n  }\n}\n"],"file":"program.js"}