{"version":3,"sources":["../../../../../src/shadertools/src/lib/resolve-modules.js"],"names":["ShaderModuleRegistry","shaderModuleRegistry","setDefaultShaderModules","modules","registerShaderModules","shaderModuleList","ignoreMultipleRegistrations","resolveModules","concat","defaultShaderModules","getShaderDependencies","getShaderModule","moduleOrName","moduleMap","moduleDepth","getDependencyGraph","level","Object","keys","sort","a","b","map","name","Error","module","undefined","dependencies","TEST_EXPORTS"],"mappings":"AAAA,OAAOA,oBAAP,MAAiC,0BAAjC;AAEA,IAAMC,uBAAuB,IAAID,oBAAJ,EAA7B;AAEA;;;;;;;AAMA,OAAO,SAASE,uBAAT,CAAiCC,OAAjC,EAA0C;AAC/CF,uBAAqBC,uBAArB,CAA6CC,OAA7C;AACD;AAED;;;;;AAIA,OAAO,SAASC,qBAAT,CAA+BC,gBAA/B,EAEC;AAAA,iFAAJ,EAAI;AAAA,mCADNC,2BACM;AAAA,MADNA,2BACM,sCADwB,KACxB;;AACNL,uBAAqBG,qBAArB,CAA2CC,gBAA3C,EAA6D;AAACC;AAAD,GAA7D;AACD,C,CAED;;AACA,OAAO,SAASC,cAAT,CAAwBJ,OAAxB,EAAiC;AACtCA,YAAUA,QAAQK,MAAR,CAAeP,qBAAqBQ,oBAApC,CAAV;AACAN,YAAUF,qBAAqBM,cAArB,CAAoCJ,OAApC,CAAV;AACA,SAAOO,sBAAsBP,OAAtB,CAAP;AACD,C,CAED;AACA;;AACA,OAAO,SAASQ,eAAT,CAAyBC,YAAzB,EAAuC;AAC5C,SAAOX,qBAAqBU,eAArB,CAAqCC,YAArC,CAAP;AACD;AAED;;;;;;;;;;;;;AAYA,SAASF,qBAAT,CAA+BP,OAA/B,EAAwC;AACtC,MAAMU,YAAY,EAAlB;AACA,MAAMC,cAAc,EAApB;AACAC,qBAAmB;AAACZ,oBAAD;AAAUa,WAAO,CAAjB;AAAoBH,wBAApB;AAA+BC;AAA/B,GAAnB,EAHsC,CAKtC;;AACA,SAAOG,OAAOC,IAAP,CAAYJ,WAAZ,EACJK,IADI,CACC,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUP,YAAYO,CAAZ,IAAiBP,YAAYM,CAAZ,CAA3B;AAAA,GADD,EAEJE,GAFI,CAEA;AAAA,WAAQT,UAAUU,IAAV,CAAR;AAAA,GAFA,CAAP;AAGD;AAED;;;;;;;;AAQA;;;AACA,SAASR,kBAAT,QAAsE;AAAA,MAAzCZ,OAAyC,SAAzCA,OAAyC;AAAA,MAAhCa,KAAgC,SAAhCA,KAAgC;AAAA,MAAzBH,SAAyB,SAAzBA,SAAyB;AAAA,MAAdC,WAAc,SAAdA,WAAc;;AACpE,MAAIE,SAAS,CAAb,EAAgB;AACd,UAAM,IAAIQ,KAAJ,CAAU,0CAAV,CAAN;AACD,GAHmE,CAKpE;;;AALoE;AAAA;AAAA;;AAAA;AAMpE,yBAAqBrB,OAArB,8HAA8B;AAAA,UAAnBsB,MAAmB;AAC5BZ,gBAAUY,OAAOF,IAAjB,IAAyBE,MAAzB;;AACA,UAAIX,YAAYW,OAAOF,IAAnB,MAA6BG,SAA7B,IAA0CZ,YAAYW,OAAOF,IAAnB,IAA2BP,KAAzE,EAAgF;AAC9EF,oBAAYW,OAAOF,IAAnB,IAA2BP,KAA3B;AACD;AACF,KAXmE,CAapE;;AAboE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAcpE,0BAAqBb,OAArB,mIAA8B;AAAA,UAAnBsB,OAAmB;;AAC5B,UAAIA,QAAOE,YAAX,EAAyB;AACvBZ,2BAAmB;AAACZ,mBAASsB,QAAOE,YAAjB;AAA+BX,iBAAOA,QAAQ,CAA9C;AAAiDH,8BAAjD;AAA4DC;AAA5D,SAAnB;AACD;AACF;AAlBmE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBrE;;AAED,OAAO,IAAMc,eAAe;AAC1BlB,8CAD0B;AAE1BK;AAF0B,CAArB","sourcesContent":["import ShaderModuleRegistry from './shader-module-registry';\n\nconst shaderModuleRegistry = new ShaderModuleRegistry();\n\n/**\n * Registers an array of default shader modules. These will be concatenated\n * automatically at the end of any shader module list passed to\n * `assembleShaders` (plus `resolveModules` and `getShaderDependencies`)\n * @param {Object[]} modules - Array of shader modules\n */\nexport function setDefaultShaderModules(modules) {\n  shaderModuleRegistry.setDefaultShaderModules(modules);\n}\n\n/**\n * Registers an array of shader modules\n * @param {Object[]} shaderModuleList - Array of shader modules\n */\nexport function registerShaderModules(shaderModuleList, {\n  ignoreMultipleRegistrations = false\n} = {}) {\n  shaderModuleRegistry.registerShaderModules(shaderModuleList, {ignoreMultipleRegistrations});\n}\n\n// registers any supplied modules and returns a list of module names\nexport function resolveModules(modules) {\n  modules = modules.concat(shaderModuleRegistry.defaultShaderModules);\n  modules = shaderModuleRegistry.resolveModules(modules);\n  return getShaderDependencies(modules);\n}\n\n// Looks up a moduleName among registered modules and returns definition.\n// If \"inline\" module, returns it directly\nexport function getShaderModule(moduleOrName) {\n  return shaderModuleRegistry.getShaderModule(moduleOrName);\n}\n\n/**\n * Takes a list of shader module names and returns a new list of\n * shader module names that includes all dependencies, sorted so\n * that modules that are dependencies of other modules come first.\n *\n * If the shader glsl code from the returned modules is concatenated\n * in the reverse order, it is guaranteed that all functions be resolved and\n * that all function and variable definitions come before use.\n *\n * @param {String[]} modules - Array of modules (inline modules or module names)\n * @return {String[]} - Array of modules\n */\nfunction getShaderDependencies(modules) {\n  const moduleMap = {};\n  const moduleDepth = {};\n  getDependencyGraph({modules, level: 0, moduleMap, moduleDepth});\n\n  // Return a reverse sort so that dependencies come before the modules that use them\n  return Object.keys(moduleDepth)\n    .sort((a, b) => moduleDepth[b] - moduleDepth[a])\n    .map(name => moduleMap[name]);\n}\n\n/**\n * Recursively checks module dpendencies to calculate dependency\n * level of each module.\n *\n * @param {String[]} modules - Array of modules\n * @param {Number} level - Current level\n * @return {result} - Map of module name to its level\n */\n// Adds another level of dependencies to the result map\nfunction getDependencyGraph({modules, level, moduleMap, moduleDepth}) {\n  if (level >= 5) {\n    throw new Error('Possible loop in shader dependency graph');\n  }\n\n  // Update level on all current modules\n  for (const module of modules) {\n    moduleMap[module.name] = module;\n    if (moduleDepth[module.name] === undefined || moduleDepth[module.name] < level) {\n      moduleDepth[module.name] = level;\n    }\n  }\n\n  // Recurse\n  for (const module of modules) {\n    if (module.dependencies) {\n      getDependencyGraph({modules: module.dependencies, level: level + 1, moduleMap, moduleDepth});\n    }\n  }\n}\n\nexport const TEST_EXPORTS = {\n  getShaderDependencies,\n  getDependencyGraph\n};\n"],"file":"resolve-modules.js"}