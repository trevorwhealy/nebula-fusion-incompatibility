{"version":3,"sources":["../../../../../src/shadertools/src/utils/webgl-info.js"],"names":["isOldIE","assert","GL_TEXTURE_BINDING_3D","GL_VENDOR","GL_RENDERER","GL_VERSION","GL_SHADING_LANGUAGE_VERSION","WEBGL_FEATURES","GLSL_FRAG_DATA","GLSL_FRAG_DEPTH","GLSL_DERIVATIVES","GLSL_TEXTURE_LOD","FEATURES","Object","keys","forEach","key","isWebGL2","gl","Boolean","WebGL2RenderingContext","TEXTURE_BINDING_3D","getContextInfo","info","getExtension","vendor","getParameter","UNMASKED_VENDOR_WEBGL","renderer","UNMASKED_RENDERER_WEBGL","gpuVendor","identifyGPUVendor","gpuInfo","version","shadingLanguageVersion","match","compiledGlslExtensions","canCompileGLGSExtension","cap","opts","feature","extensionName","source","shader","createShader","VERTEX_SHADER","shaderSource","compileShader","canCompile","getShaderParameter","COMPILE_STATUS","deleteShader","getFeature","value","hasFeatures","features","Array","isArray","every"],"mappings":"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","sourcesContent":["// Feature detection for WebGL\n//\n// Provides a function that enables simple checking of which WebGL features are\n// available in an WebGL1 or WebGL2 environment.\n\n/* eslint-disable no-inline-comments, max-len */\n/* global WebGL2RenderingContext */\nimport isOldIE from './is-old-ie';\nimport assert from './assert';\n\nconst GL_TEXTURE_BINDING_3D = 0x806A;\n\nconst GL_VENDOR = 0x1F00;\nconst GL_RENDERER = 0x1F01;\nconst GL_VERSION = 0x1F02;\nconst GL_SHADING_LANGUAGE_VERSION = 0x8B8C;\n\n// Defines luma.gl \"feature\" names and semantics\nconst WEBGL_FEATURES = {\n  // GLSL extensions\n  GLSL_FRAG_DATA: ['WEBGL_draw_buffers', true], // TODO - name makes no sense in GLSL 3.00\n  GLSL_FRAG_DEPTH: ['EXT_frag_depth', true],\n  GLSL_DERIVATIVES: ['OES_standard_derivatives', true],\n  GLSL_TEXTURE_LOD: ['EXT_shader_texture_lod', true]\n};\n\n// Create a key-mirrored FEATURES array\nconst FEATURES = {};\nObject.keys(WEBGL_FEATURES).forEach(key => {\n  FEATURES[key] = key;\n});\n\nexport {FEATURES};\n\nfunction isWebGL2(gl) {\n  return Boolean(gl && (\n    (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ||\n    gl.TEXTURE_BINDING_3D === GL_TEXTURE_BINDING_3D)\n  ));\n}\n\nexport function getContextInfo(gl) {\n  const info = gl.getExtension('WEBGL_debug_renderer_info');\n  const vendor = gl.getParameter((info && info.UNMASKED_VENDOR_WEBGL) || GL_VENDOR);\n  const renderer = gl.getParameter((info && info.UNMASKED_RENDERER_WEBGL) || GL_RENDERER);\n  const gpuVendor = identifyGPUVendor(vendor, renderer);\n  const gpuInfo = {\n    gpuVendor,\n    vendor,\n    renderer,\n    version: gl.getParameter(GL_VERSION),\n    shadingLanguageVersion: gl.getParameter(GL_SHADING_LANGUAGE_VERSION)\n  };\n  return gpuInfo;\n}\n\nfunction identifyGPUVendor(vendor, renderer) {\n  if (vendor.match(/NVIDIA/i) || renderer.match(/NVIDIA/i)) {\n    return 'NVIDIA';\n  }\n  if (vendor.match(/INTEL/i) || renderer.match(/INTEL/i)) {\n    return 'INTEL';\n  }\n  if (vendor.match(/AMD/i) || renderer.match(/AMD/i) ||\n    vendor.match(/ATI/i) || renderer.match(/ATI/i)) {\n    return 'AMD';\n  }\n  return 'UNKNOWN GPU';\n}\n\nconst compiledGlslExtensions = {};\n\n// Enables feature detection in IE11 due to a bug where gl.getExtension may return true\n// but fail to compile when the extension is enabled in the shader. Specifically,\n// the OES_standard_derivatives extension fails to compile in IE11 even though its included\n// in the list of supported extensions.\n// opts allows user agent to be overridden for testing\nexport function canCompileGLGSExtension(gl, cap, opts = {}) {\n  const feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n\n  if (!isOldIE(opts)) {\n    return true;\n  }\n\n  if (cap in compiledGlslExtensions) {\n    return compiledGlslExtensions[cap];\n  }\n\n  const extensionName = feature[0];\n  const source = `#extension GL_${extensionName} : enable\\nvoid main(void) {}`;\n\n  const shader = gl.createShader(gl.VERTEX_SHADER);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const canCompile = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  gl.deleteShader(shader);\n  compiledGlslExtensions[cap] = canCompile;\n  return canCompile;\n}\n\n// TODO - cache the value\nfunction getFeature(gl, cap) {\n  const feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n\n  // Get extension name from table\n  const extensionName = isWebGL2(gl) ?\n    feature[1] || feature[0] :\n    feature[0];\n\n  // Check if the value is dependent on checking an extension\n  const value = typeof extensionName === 'string' ?\n    Boolean(gl.getExtension(extensionName)) :\n    extensionName;\n\n  assert(value === false || value === true);\n\n  return value;\n}\n\nexport function hasFeatures(gl, features) {\n  features = Array.isArray(features) ? features : [features];\n  return features.every(feature => getFeature(gl, feature));\n}\n"],"file":"webgl-info.js"}