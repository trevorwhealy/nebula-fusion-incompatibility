{"version":3,"sources":["../../../src/webgl-context/create-canvas.js"],"names":["isPage","isBrowser","document","isPageLoaded","readyState","pageLoadPromise","Promise","resolve","reject","window","onload","getPageLoadPromise","createCanvas","width","height","id","insert","canvas","createElement","style","Number","isFinite","body","insertBefore","firstChild","getCanvas","onError","targetCanvas","getElementById"],"mappings":";;;;;;;;;;AAGA;;AAHA;;AAEA;AAGA,IAAMA,SAASC,oBAAa,OAAOC,QAAP,KAAoB,WAAhD;AACA,IAAIC,eAAeH,UAAUE,SAASE,UAAT,KAAwB,UAArD;AAEO,IAAMC,kBAAkBL,SAC7B,IAAIM,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B,MAAIL,YAAJ,EAAkB;AAChBI,YAAQL,QAAR;AACA;AACD;;AACDO,SAAOC,MAAP,GAAgB,YAAM;AACpBP,mBAAe,IAAf;AACAI,YAAQL,QAAR;AACD,GAHD;AAID,CATD,CAD6B,GAW7BI,QAAQC,OAAR,CAAgB,EAAhB,CAXK;AAaP;;;;;;;;AAKO,SAASI,kBAAT,GAA8B;AACnC,SAAON,eAAP;AACD;AAED;;;;;;;AAKO,SAASO,YAAT,OAAoF;AAAA,wBAA7DC,KAA6D;AAAA,MAA7DA,KAA6D,2BAArD,GAAqD;AAAA,yBAAhDC,MAAgD;AAAA,MAAhDA,MAAgD,4BAAvC,GAAuC;AAAA,qBAAlCC,EAAkC;AAAA,MAAlCA,EAAkC,wBAA7B,WAA6B;AAAA,yBAAhBC,MAAgB;AAAA,MAAhBA,MAAgB,4BAAP,IAAO;AACzF,MAAMC,SAASf,SAASgB,aAAT,CAAuB,QAAvB,CAAf;AACAD,SAAOF,EAAP,GAAYA,EAAZ;AACAE,SAAOE,KAAP,CAAaN,KAAb,GAAqBO,OAAOC,QAAP,CAAgBR,KAAhB,cAA4BA,KAA5B,UAAwC,MAA7D;AACAI,SAAOE,KAAP,CAAaL,MAAb,GAAsBM,OAAOC,QAAP,CAAgBP,MAAhB,cAA6BA,MAA7B,UAA0C,MAAhE,CAJyF,CAKzF;;AACA,MAAIE,MAAJ,EAAY;AACV,QAAMM,OAAOpB,SAASoB,IAAtB;AACAA,SAAKC,YAAL,CAAkBN,MAAlB,EAA0BK,KAAKE,UAA/B,EAFU,CAGV;AACD;;AACD,SAAOP,MAAP;AACD;;AAEM,SAASQ,SAAT,QAAgE;AAAA,MAA5CR,MAA4C,SAA5CA,MAA4C;AAAA,MAApCJ,KAAoC,SAApCA,KAAoC;AAAA,MAA7BC,MAA6B,SAA7BA,MAA6B;AAAA,4BAArBY,OAAqB;AAAA,MAArBA,OAAqB,8BAAX,YAAM,CAAE,CAAG;AACrE,MAAIC,YAAJ;;AACA,MAAI,OAAOV,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,QAAI,CAACd,YAAL,EAAmB;AACjBuB,0DAA6CT,MAA7C;AACD;;AACDU,mBAAezB,SAAS0B,cAAT,CAAwBX,MAAxB,CAAf;AACD,GALD,MAKO,IAAIA,MAAJ,EAAY;AACjBU,mBAAeV,MAAf;AACD,GAFM,MAEA;AACLU,mBAAef,aAAa;AAACG,UAAI,eAAL;AAAsBF,kBAAtB;AAA6BC,oBAA7B;AAAqCY;AAArC,KAAb,CAAf;AACD;;AAED,SAAOC,YAAP;AACD","sourcesContent":["// Resizing a webgl canvas\n\n/* global window, document */\nimport {isBrowser} from '../utils';\n\nconst isPage = isBrowser && typeof document !== 'undefined';\nlet isPageLoaded = isPage && document.readyState === 'complete';\n\nexport const pageLoadPromise = isPage ?\n  new Promise((resolve, reject) => {\n    if (isPageLoaded) {\n      resolve(document);\n      return;\n    }\n    window.onload = () => {\n      isPageLoaded = true;\n      resolve(document);\n    };\n  }) :\n  Promise.resolve({});\n\n/**\n * Returns a promise that resolves when the page is loaded\n * at this point the DOM can be manipulated, and e.g. a new canvas can be inserted\n * @return {Promise} - resolves when the page is loaded\n */\nexport function getPageLoadPromise() {\n  return pageLoadPromise;\n}\n\n/**\n * Create a canvas\n * @param {Number} width - set to 100%\n * @param {Number} height - set to 100%\n */\nexport function createCanvas({width = 800, height = 600, id = 'gl-canvas', insert = true}) {\n  const canvas = document.createElement('canvas');\n  canvas.id = id;\n  canvas.style.width = Number.isFinite(width) ? `${width}px` : '100%';\n  canvas.style.height = Number.isFinite(height) ? `${height}px` : '100%';\n  // add the canvas to the body element once the page has loaded\n  if (insert) {\n    const body = document.body;\n    body.insertBefore(canvas, body.firstChild);\n    // getPageLoadPromise().then(document => {});\n  }\n  return canvas;\n}\n\nexport function getCanvas({canvas, width, height, onError = () => {}}) {\n  let targetCanvas;\n  if (typeof canvas === 'string') {\n    if (!isPageLoaded) {\n      onError(`createGLContext called on canvas '${canvas}' before page was loaded`);\n    }\n    targetCanvas = document.getElementById(canvas);\n  } else if (canvas) {\n    targetCanvas = canvas;\n  } else {\n    targetCanvas = createCanvas({id: 'lumagl-canvas', width, height, onError});\n  }\n\n  return targetCanvas;\n}\n"],"file":"create-canvas.js"}