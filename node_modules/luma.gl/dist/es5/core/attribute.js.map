{"version":3,"sources":["../../../src/core/attribute.js"],"names":["Attribute","gl","opts","id","type","isIndexed","target","GL","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","value","externalBuffer","buffer","userData","update","Object","seal","_validateAttributeDefinition","delete","size","offset","stride","normalized","integer","instanced","constant","isInstanced","undefined","accessor","divisor","Buffer","assign","setData","data"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport GL from '../constants';\nimport {Buffer} from '../webgl';\nimport {uid} from '../utils';\n\nexport default class Attribute {\n  constructor(gl, opts = {}) {\n    const {\n      id = uid('attribute'),\n      type,\n      isIndexed = false\n    } = opts;\n\n    // Options that cannot be changed later\n    this.gl = gl;\n    this.id = id;\n    this.isIndexed = isIndexed;\n    this.target = isIndexed ? GL.ELEMENT_ARRAY_BUFFER : GL.ARRAY_BUFFER;\n    this.type = type;\n\n    // Initialize the attribute descriptor, with WebGL and metadata fields\n    this.value = null;\n    this.externalBuffer = null;\n    this.buffer = null;\n    this.userData = {}; // Reserved for application\n    this.update(opts);\n\n    // Sanity - no app fields on our attributes. Use userData instead.\n    Object.seal(this);\n\n    // Check all fields and generate helpful error messages\n    this._validateAttributeDefinition();\n  }\n\n  delete() {\n    if (this.buffer) {\n      this.buffer.delete();\n      this.buffer = null;\n    }\n  }\n\n  update(opts) {\n    const {\n      value,\n      buffer,\n\n      // buffer options\n      size = this.size,\n      offset = this.offset || 0,\n      stride = this.stride || 0,\n      normalized = this.normalized || false,\n      integer = this.integer || false,\n      instanced = this.instanced || 0,\n\n      constant = this.constant || false,\n      isInstanced\n    } = opts;\n\n    this.size = size;\n    this.offset = offset;\n    this.stride = stride;\n    this.normalized = normalized;\n    this.integer = integer;\n    this.constant = constant;\n\n    if (isInstanced !== undefined) {\n      this.instanced = isInstanced ? 1 : 0;\n    } else {\n      this.instanced = instanced;\n    }\n\n    if (buffer) {\n      this.externalBuffer = buffer;\n      this.constant = false;\n\n      this.type = buffer.accessor.type;\n      if (buffer.accessor.divisor !== undefined) {\n        this.instanced = buffer.accessor.divisor > 0;\n      }\n    } else if (value) {\n      this.externalBuffer = null;\n      this.value = value;\n\n      if (!constant) {\n        // Create buffer if needed\n        this.buffer = this.buffer ||\n          new Buffer(this.gl, Object.assign({}, opts, {\n            id: this.id,\n            target: this.target,\n            type: this.type\n          }));\n        this.buffer.setData({data: value});\n        this.type = this.buffer.accessor.type;\n      }\n    }\n  }\n\n  getBuffer() {\n    if (this.constant) {\n      return null;\n    }\n    return this.externalBuffer || this.buffer;\n  }\n\n  getValue() {\n    if (this.constant) {\n      return this.value;\n    }\n    const buffer = this.externalBuffer || this.buffer;\n    if (buffer) {\n      return [buffer, this];\n    }\n    return null;\n  }\n\n  _validateAttributeDefinition() {\n    // Can be undefined for buffers (auto deduced from shaders)\n    // or larger than 4 for uniform arrays\n    // assert(\n    //   this.size >= 1 && this.size <= 4,\n    //   `Attribute definition for ${this.id} invalid size`\n    // );\n  }\n}\n"],"file":"attribute.js"}