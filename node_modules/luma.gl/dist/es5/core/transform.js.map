{"version":3,"sources":["../../../src/core/transform.js"],"names":["FS100","FS300","Transform","gl","opts","model","currentIndex","sourceBuffers","Array","feedbackBuffers","transformFeedbacks","_buffersCreated","_initialize","Object","seal","name","delete","varyingName","uniforms","unbindModels","setAttributes","transform","transformFeedback","parameters","GL","RASTERIZER_DISCARD","feedbackMap","elementCount","log","warn","setVertexCount","bufferName","Buffer","assign","_createFeedbackBuffers","setBuffers","_setupSwapBuffers","id","vs","varyings","drawMode","POINTS","destinationBuffers","sourceDestinationMap","deprecated","isArray","varyingsArray","values","_setupBuffers","_buildModel","current","sourceBufferName","feedbackBufferName","sourceBuffer","bytes","type","usage","accessor","buffer","next","fs","Model","vertexCount","TransformFeedback","program","buffers","getVertexCount"],"mappings":"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","sourcesContent":["import GL from '../constants';\nimport Model from './model';\nimport Buffer from '../webgl/buffer';\nimport TransformFeedback from '../webgl/transform-feedback';\nimport {isWebGL2, assertWebGL2Context, getShaderVersion} from '../webgl-utils';\nimport assert from '../utils/assert';\nimport {log} from '../utils';\n\nconst FS100 = 'void main() {}';\nconst FS300 = `#version 300 es\\n${FS100}`;\n\nexport default class Transform {\n\n  static isSupported(gl) {\n    // For now WebGL2 only\n    return isWebGL2(gl);\n  }\n\n  constructor(gl, opts = {}) {\n    assertWebGL2Context(gl);\n\n    this.gl = gl;\n    this.model = null;\n    this.currentIndex = 0;\n    this.sourceBuffers = new Array(2);\n    this.feedbackBuffers = new Array(2);\n    this.transformFeedbacks = new Array(2);\n    this._buffersCreated = {};\n\n    this._initialize(opts);\n    Object.seal(this);\n  }\n\n  // Delete owned resources.\n  delete() {\n    for (const name in this._buffersCreated) {\n      this._buffersCreated[name].delete();\n    }\n    this.model.delete();\n  }\n\n  get elementCount() {\n    return this.model.getVertexCount();\n  }\n\n  // Return Buffer object for given varying name.\n  getBuffer(varyingName = null) {\n    assert(varyingName && this.feedbackBuffers[this.currentIndex][varyingName]);\n    return this.feedbackBuffers[this.currentIndex][varyingName];\n  }\n\n  // Run one transform feedback loop.\n  run({uniforms = {}, unbindModels = []} = {}) {\n    this.model.setAttributes(this.sourceBuffers[this.currentIndex]);\n    this.model.transform({\n      transformFeedback: this.transformFeedbacks[this.currentIndex],\n      parameters: {[GL.RASTERIZER_DISCARD]: true},\n      uniforms,\n      unbindModels\n    });\n  }\n\n  // Swap source and destination buffers.\n  swapBuffers() {\n    assert(this.feedbackMap);\n    this.currentIndex = (this.currentIndex + 1) % 2;\n  }\n\n  // Update some or all buffer bindings.\n  update({sourceBuffers = null, feedbackBuffers = null, elementCount = this.elementCount}) {\n    if (!sourceBuffers && !feedbackBuffers) {\n      log.warn('Transform : no buffers updated')();\n      return this;\n    }\n\n    this.model.setVertexCount(elementCount);\n\n    for (const bufferName in feedbackBuffers) {\n      assert(feedbackBuffers[bufferName] instanceof Buffer);\n    }\n\n    const {currentIndex} = this;\n    Object.assign(this.sourceBuffers[currentIndex], sourceBuffers);\n    Object.assign(this.feedbackBuffers[currentIndex], feedbackBuffers);\n    this._createFeedbackBuffers({feedbackBuffers});\n    this.transformFeedbacks[currentIndex].setBuffers(this.feedbackBuffers[currentIndex]);\n\n    // Buffer have changed, need to re-setup swap buffers.\n    this._setupSwapBuffers();\n    return this;\n  }\n\n  // Private\n\n  _initialize({\n    // Program parameters\n    id = 'transform',\n    vs,\n    varyings,\n    drawMode = GL.POINTS,\n    elementCount,\n\n    // buffers\n    sourceBuffers,\n    feedbackBuffers = null,\n    feedbackMap = null,\n\n    // deprecated\n    destinationBuffers = null,\n    sourceDestinationMap = null\n  }) {\n    if (destinationBuffers) {\n      log.deprecated('destinationBuffers', 'feedbackBuffers')();\n      feedbackBuffers = feedbackBuffers || destinationBuffers;\n    }\n    if (sourceDestinationMap) {\n      log.deprecated('sourceDestinationMap', 'feedbackMap')();\n      feedbackMap = feedbackMap || sourceDestinationMap;\n    }\n\n    assert(sourceBuffers && vs && elementCount >= 0);\n    // If feedbackBuffers are not provided, sourceDestinationMap must be provided\n    // to create destinaitonBuffers with layout of corresponding source buffer.\n    assert(feedbackBuffers || feedbackMap, ' Transform needs feedbackBuffers or feedbackMap');\n    for (const bufferName in feedbackBuffers || {}) {\n      assert(feedbackBuffers[bufferName] instanceof Buffer);\n    }\n\n    // If varyings are not provided feedbackMap must be provided to deduce varyings\n    assert(Array.isArray(varyings) || feedbackMap);\n    let varyingsArray = varyings;\n    if (!Array.isArray(varyings)) {\n      varyingsArray = Object.values(feedbackMap);\n    }\n\n    this.feedbackMap = feedbackMap;\n\n    this._setupBuffers({sourceBuffers, feedbackBuffers});\n    this._setupSwapBuffers();\n    this._buildModel({id, vs, varyings: varyingsArray, drawMode, elementCount});\n  }\n\n  // setup source and destination buffers\n  _setupBuffers({sourceBuffers = null, feedbackBuffers = null}) {\n    this.sourceBuffers[0] = Object.assign({}, sourceBuffers);\n    this.feedbackBuffers[0] = Object.assign({}, feedbackBuffers);\n    this._createFeedbackBuffers({feedbackBuffers});\n    this.sourceBuffers[1] = {};\n    this.feedbackBuffers[1] = {};\n  }\n\n  // auto create any feedback buffers\n  _createFeedbackBuffers({feedbackBuffers}) {\n    if (!this.feedbackMap) {\n      // feedbackMap required to auto create buffers.\n      return;\n    }\n    const current = this.currentIndex;\n    for (const sourceBufferName in this.feedbackMap) {\n      const feedbackBufferName = this.feedbackMap[sourceBufferName];\n      if (!feedbackBuffers || !feedbackBuffers[feedbackBufferName]) {\n        // Create new buffer with same layout and settings as source buffer\n        const sourceBuffer = this.sourceBuffers[current][sourceBufferName];\n        const {bytes, type, usage, accessor} = sourceBuffer;\n        const buffer = new Buffer(this.gl, {bytes, type, usage, accessor});\n\n        if (this._buffersCreated[feedbackBufferName]) {\n          this._buffersCreated[feedbackBufferName].delete();\n          this._buffersCreated[feedbackBufferName] = buffer;\n        }\n        this.feedbackBuffers[current][feedbackBufferName] = buffer;\n      }\n    }\n  }\n\n  // setup buffers for swapping.\n  // Second set of source and feedback objects are setup to point\n  // to corresponding feedback and source buffers.\n  _setupSwapBuffers() {\n    if (!this.feedbackMap) {\n      // feedbackMap required set up swap buffers.\n      return;\n    }\n    const current = this.currentIndex;\n    const next = (current + 1) % 2;\n\n    for (const sourceBufferName in this.feedbackMap) {\n      const feedbackBufferName = this.feedbackMap[sourceBufferName];\n\n      this.sourceBuffers[next][sourceBufferName] =\n        this.feedbackBuffers[current][feedbackBufferName];\n      this.feedbackBuffers[next][feedbackBufferName] =\n        this.sourceBuffers[current][sourceBufferName];\n\n      // make sure the new destination buffer is a Buffer object\n      assert(this.feedbackBuffers[next][feedbackBufferName] instanceof Buffer);\n    }\n\n    // When triggered by `update()` TranformFeedback objects are already set up,\n    // if so update buffers\n    if (this.transformFeedbacks[next]) {\n      this.transformFeedbacks[next].setBuffers(this.feedbackBuffers[next]);\n    }\n  }\n\n  // build Model and TransformFeedback objects\n  _buildModel({id, vs, varyings, drawMode, elementCount}) {\n    // use a minimal fragment shader with matching version of vertex shader.\n    const fs = getShaderVersion(vs) === 300 ? FS300 : FS100;\n\n    this.model = new Model(this.gl, {\n      id,\n      vs,\n      fs,\n      varyings,\n      drawMode,\n      vertexCount: elementCount\n    });\n\n    this.transformFeedbacks[0] = new TransformFeedback(this.gl, {\n      program: this.model.program,\n      buffers: this.feedbackBuffers[0]\n    });\n\n    // If buffers are swappable setup second transform feedback object.\n    if (this.feedbackMap) {\n      this.transformFeedbacks[1] = new TransformFeedback(this.gl, {\n        program: this.model.program,\n        buffers: this.feedbackBuffers[1]\n      });\n    }\n  }\n}\n"],"file":"transform.js"}