{"version":3,"sources":["../../../src/core/model.js"],"names":["ERR_MODEL_PARAMS","LOG_DRAW_PRIORITY","LOG_DRAW_TIMEOUT","DEPRECATED_PICKING_UNIFORMS","Model","gl","props","lastLogTime","initialize","program","_createProgram","vertexArray","VertexArray","userData","needsRedraw","_attributes","attributes","animatedUniforms","animated","animationLoop","timerQueryEnabled","timeElapsedQuery","undefined","lastQueryReturned","stats","accumulatedFrameTime","averageFrameTime","profileFrameCount","pickable","setProps","setUniforms","Object","assign","getModuleUniforms","moduleSettings","isInstanced","instanced","onBeforeRender","onAfterRender","drawMode","Number","isFinite","vertexCount","instanceCount","setGeometry","geometry","setAttributes","uniforms","samplers","Query","isSupported","log","warn","_setFeedbackBuffers","_feedbackBuffers","_setAnimationProps","_animationProps","_animationLoop","key","delete","id","clearRedrawFlags","redraw","getNeedsRedraw","getUniforms","buffers","_createBuffersFromAttributeDescriptors","getAttributes","setNeedsRedraw","_extractAnimatedUniforms","_checkForDeprecatedUniforms","opts","framebuffer","transformFeedback","parameters","animationProps","updateModuleSettings","_refreshAnimationProps","logPriority","_logDrawCallStart","drawParams","isIndexed","indexType","_timerQueryStart","draw","getDrawMode","getVertexCount","_timerQueryEnd","_logDrawCallEnd","discard","feedbackBuffers","unbindModels","GL","RASTERIZER_DISCARD","forEach","model","unbindBuffers","bindBuffers","arguments","length","vs","fs","modules","defines","inject","shaderCache","varyings","bufferMode","SEPARATE_ATTRIBS","MODULAR_SHADERS","assembleResult","getProgram","Program","uniform","deprecated","_evaluateAnimateUniforms","uniformName","valueFunction","foundAnimated","newValue","staticUniforms","TransformFeedback","setBuffers","beginTimeElapsedQuery","end","isResultAvailable","elapsedTime","getResult","lastFrameTime","attributeName","descriptor","attribute","Attribute","Buffer","layout","update","buffer","getValue","priority","logDrawTimeout","Date","now","group","collapsed","attributeTable","_getDebugTable","header","uniformTable","table","unusedTable","unusedCount","undefinedOnly","missingTable","missingCount","count","keys","message","groupEnd","Object3D"],"mappings":"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","sourcesContent":["import GL from '../constants';\nimport Attribute from './attribute';\nimport Object3D from './object-3d';\nimport {getDrawMode} from '../geometry/geometry';\nimport {Buffer, Query, Program, TransformFeedback, VertexArray, clear} from '../webgl';\nimport {isWebGL} from '../webgl-utils';\nimport {getUniformsTable} from '../webgl/uniforms';\nimport {MODULAR_SHADERS} from '../shadertools/src/shaders';\nimport {assembleShaders} from '../shadertools/src';\nimport {addModel, removeModel, logModel, getOverrides} from '../debug/seer-integration';\nimport {log, isObjectEmpty} from '../utils';\nimport assert from '../utils/assert';\n\nconst ERR_MODEL_PARAMS = 'Model needs drawMode and vertexCount';\n\nconst LOG_DRAW_PRIORITY = 2;\nconst LOG_DRAW_TIMEOUT = 10000;\n\n// These old picking uniforms should be avoided and we should use picking module\n// and set uniforms using Model class 'updateModuleSettings()'\n// TODO - move to shader modules\nconst DEPRECATED_PICKING_UNIFORMS = ['renderPickingBuffer', 'pickingEnabled'];\n\n// Model abstract O3D Class\nexport default class Model extends Object3D {\n  constructor(gl, props = {}) {\n    super(props);\n    assert(isWebGL(gl));\n    this.gl = gl;\n    this.lastLogTime = 0; // TODO - move to probe.gl\n    this.initialize(props);\n    // intended to be subclassed, do not seal\n  }\n\n  get vertexCount() {\n    if (Number.isFinite(this.props.vertexCount)) {\n      return this.props.vertexCount;\n    }\n    return this.geometry && this.geometry.getVertexCount();\n  }\n\n  get drawMode() {\n    if (Number.isFinite(this.props.drawMode)) {\n      return this.props.drawMode;\n    }\n    return this.geometry && this.geometry.drawMode;\n  }\n\n  /* eslint-disable max-statements  */\n  /* eslint-disable complexity  */\n  initialize(props = {}) {\n    this.props = {};\n    this.program = this._createProgram(props);\n\n    // Create a vertex array configured after this program\n    this.vertexArray = new VertexArray(this.gl, {program: this.program});\n\n    // Initialize state\n    this.userData = {};\n    this.needsRedraw = true;\n    // Model manages auto Buffer creation from typed arrays\n    this._attributes = {}; // All attributes\n    this.attributes = {}; // User defined attributes\n\n    // Model manages uniform animation\n    this.animatedUniforms = {};\n    this.animated = false;\n    this.animationLoop = null; // if set, used as source for animationProps\n\n    this.timerQueryEnabled = false;\n    this.timeElapsedQuery = undefined;\n    this.lastQueryReturned = true;\n\n    this.stats = {\n      accumulatedFrameTime: 0,\n      averageFrameTime: 0,\n      profileFrameCount: 0\n    };\n\n    // picking options\n    this.pickable = true;\n    // this.pick = pick || (() => false);\n\n    this.setProps(props);\n\n    // Make sure we have some reasonable default uniforms in place\n    this.setUniforms(Object.assign(\n      {},\n      this.getModuleUniforms(), // Get all default uniforms\n      this.getModuleUniforms(props.moduleSettings) // Get unforms for supplied parameters\n    ));\n\n    // Attributes and buffers\n\n    // geometry might have set drawMode and vertexCount\n    this.isInstanced = props.isInstanced || props.instanced;\n\n    this.onBeforeRender = props.onBeforeRender || (() => {});\n    this.onAfterRender = props.onAfterRender || (() => {});\n\n    // assert(program || program instanceof Program);\n    assert(this.drawMode !== undefined && Number.isFinite(this.vertexCount), ERR_MODEL_PARAMS);\n\n  }\n  /* eslint-enable max-statements */\n\n  setProps(props) {\n    Object.assign(this.props, props);\n\n    // params\n    // if ('drawMode' in props) {\n    //   this.drawMode = getDrawMode(props.drawMode);\n    // }\n    // if ('vertexCount' in props) {\n    //   this.vertexCount = props.vertexCount;\n    // }\n    if ('instanceCount' in props) {\n      this.instanceCount = props.instanceCount;\n    }\n    if ('geometry' in props) {\n      this.setGeometry(props.geometry);\n    }\n\n    // webgl settings\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms, props.samplers);\n    }\n\n    if ('pickable' in props) {\n      this.pickable = props.pickable;\n    }\n\n    // Experimental props\n    if ('timerQueryEnabled' in props) {\n      this.timerQueryEnabled = props.timerQueryEnabled && Query.isSupported(this.gl, ['timers']);\n      if (props.timerQueryEnabled && !this.timerQueryEnabled) {\n        log.warn('GPU timer not supported')();\n      }\n    }\n    if ('_feedbackBuffers' in props) {\n      this._setFeedbackBuffers(props._feedbackBuffers);\n    }\n    if ('_animationProps' in props) {\n      this._setAnimationProps(props._animationProps);\n    }\n    if ('_animationLoop' in props) {\n      this.animationLoop = props._animationLoop;\n    }\n  }\n\n  delete() {\n    // delete all attributes created by this model\n    // TODO - should buffer deletes be handled by vertex array?\n    for (const key in this._attributes) {\n      if (this._attributes[key] !== this.attributes[key]) {\n        this._attributes[key].delete();\n      }\n    }\n\n    this.program.delete();\n    this.vertexArray.delete();\n\n    removeModel(this.id);\n  }\n\n  destroy() {\n    this.delete();\n  }\n\n  // GETTERS\n\n  getNeedsRedraw({clearRedrawFlags = false} = {}) {\n    let redraw = false;\n    redraw = redraw || this.needsRedraw;\n    this.needsRedraw = this.needsRedraw && !clearRedrawFlags;\n    if (this.geometry) {\n      redraw = redraw || this.geometry.getNeedsRedraw({clearRedrawFlags});\n    }\n    return redraw;\n  }\n\n  getDrawMode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  getInstanceCount() {\n    return this.instanceCount;\n  }\n\n  getProgram() {\n    return this.program;\n  }\n\n  getAttributes() {\n    return this.attributes;\n  }\n\n  getUniforms() {\n    return this.program.getUniforms;\n  }\n\n  // SETTERS\n\n  setNeedsRedraw(redraw = true) {\n    this.needsRedraw = redraw;\n    return this;\n  }\n\n  setDrawMode(drawMode) {\n    this.props.drawMode = getDrawMode(drawMode);\n    return this;\n  }\n\n  setVertexCount(vertexCount) {\n    assert(Number.isFinite(vertexCount));\n    this.props.vertexCount = vertexCount;\n    return this;\n  }\n\n  setInstanceCount(instanceCount) {\n    assert(Number.isFinite(instanceCount));\n    this.instanceCount = instanceCount;\n    return this;\n  }\n\n  // TODO - just set attributes, don't hold on to geometry\n  setGeometry(geometry) {\n    this.geometry = geometry;\n    const buffers = this._createBuffersFromAttributeDescriptors(this.geometry.getAttributes());\n    this.vertexArray.setAttributes(buffers);\n    this.setNeedsRedraw();\n    return this;\n  }\n\n  setAttributes(attributes = {}) {\n    // Avoid setting needsRedraw if no attributes\n    if (isObjectEmpty(attributes)) {\n      return this;\n    }\n\n    Object.assign(this.attributes, attributes);\n    const buffers = this._createBuffersFromAttributeDescriptors(attributes);\n\n    // Object.assign(this.attributes, buffers);\n    this.vertexArray.setAttributes(buffers);\n    this.setNeedsRedraw();\n\n    return this;\n  }\n\n  // TODO - should actually set the uniforms\n  setUniforms(uniforms = {}, samplers = {}) {\n    // Let Seer override edited uniforms\n    uniforms = Object.assign({}, uniforms);\n    getOverrides(this.id, uniforms);\n\n    // Resolve any animated uniforms so that we have an initial value\n    uniforms = this._extractAnimatedUniforms(uniforms);\n\n    this.program.setUniforms(uniforms, samplers, () => {\n      // if something changed\n      this._checkForDeprecatedUniforms(uniforms);\n      this.setNeedsRedraw();\n    });\n  }\n\n  updateModuleSettings(opts) {\n    const uniforms = this.getModuleUniforms(opts || {});\n    return this.setUniforms(uniforms);\n  }\n\n  // DRAW CALLS\n\n  clear(opts) {\n    clear(this.program.gl, opts);\n    return this;\n  }\n\n  /* eslint-disable max-statements  */\n  draw(opts = {}) {\n    const {\n      moduleSettings = null,\n      framebuffer,\n      uniforms = {},\n      attributes = {},\n      samplers = {},\n      transformFeedback = this.transformFeedback,\n      parameters = {},\n      vertexArray = this.vertexArray,\n      animationProps\n    } = opts;\n\n    // Update module settings\n\n    addModel(this);\n\n    // Update model with any just provided attributes, settings or uniforms\n    this.setAttributes(attributes);\n    this.updateModuleSettings(moduleSettings);\n    this.setUniforms(uniforms, samplers);\n\n    // Animate any function valued uniforms\n    this._refreshAnimationProps(animationProps);\n\n    const logPriority = this._logDrawCallStart(2);\n\n    const drawParams = this.vertexArray.drawParams;\n    if (drawParams.isInstanced && !this.isInstanced) {\n      log.warn('Found instanced attributes on non-instanced model', this.id)();\n    }\n\n    const {isIndexed, indexType} = drawParams;\n    const {isInstanced, instanceCount} = this;\n\n    this.onBeforeRender();\n    this._timerQueryStart();\n\n    this.program.draw(Object.assign({}, opts, {\n      logPriority,\n      framebuffer,\n      parameters,\n      drawMode: this.getDrawMode(),\n      vertexCount: this.getVertexCount(),\n      vertexArray,\n      transformFeedback,\n      isIndexed,\n      indexType,\n      isInstanced,\n      instanceCount\n    }));\n\n    this._timerQueryEnd();\n    this.onAfterRender();\n\n    this.setNeedsRedraw(false);\n\n    this._logDrawCallEnd(logPriority, vertexArray, framebuffer);\n\n    return this;\n  }\n  /* eslint-enable max-statements  */\n\n  // Draw call for transform feedback\n  transform(opts = {}) {\n    const {\n      discard = true,\n      feedbackBuffers,\n      unbindModels = []\n    } = opts;\n\n    let {\n      parameters\n    } = opts;\n\n    if (feedbackBuffers) {\n      this._setFeedbackBuffers(feedbackBuffers);\n    }\n\n    if (discard) {\n      parameters = Object.assign({}, parameters, {[GL.RASTERIZER_DISCARD]: discard});\n    }\n\n    unbindModels.forEach(model => model.vertexArray.unbindBuffers());\n    try {\n      this.draw(Object.assign({}, opts, {parameters}));\n    } finally {\n      unbindModels.forEach(model => model.vertexArray.bindBuffers());\n    }\n\n    return this;\n  }\n\n  // DEPRECATED METHODS\n\n  render(uniforms = {}) {\n    assert(arguments.length <= 1);\n    // log.deprecated('Model.render()', 'Model.draw()')();\n    return this.draw({uniforms});\n  }\n\n  // PRIVATE METHODS\n\n  _createProgram({\n    vs = null,\n    fs = null,\n    // 1: Modular shaders\n    modules = null,\n    defines = {},\n    inject = {},\n    shaderCache = null,\n    // TransformFeedback\n    varyings = null,\n    bufferMode = GL.SEPARATE_ATTRIBS,\n    program = null\n  }) {\n    this.getModuleUniforms = x => {};\n\n    if (!program) {\n      // Assign default shaders if none are provided\n      vs = vs || MODULAR_SHADERS.vs;\n      fs = fs || MODULAR_SHADERS.fs;\n\n      const assembleResult = assembleShaders(this.gl, {vs, fs, modules, inject, defines, log});\n      ({vs, fs} = assembleResult);\n\n      if (shaderCache) {\n        program = shaderCache.getProgram(this.gl, {vs, fs, id: this.id});\n      } else {\n        program = new Program(this.gl, {vs, fs, varyings, bufferMode});\n      }\n\n      this.getModuleUniforms = assembleResult.getUniforms || (x => {});\n    }\n\n    assert(program instanceof Program, 'Model needs a program');\n    return program;\n  }\n  /* eslint-enable complexity */\n\n  // Uniforms\n\n  _checkForDeprecatedUniforms(uniforms) {\n    // deprecated picking uniforms\n    DEPRECATED_PICKING_UNIFORMS.forEach((uniform) => {\n      if (uniform in uniforms) {\n        log.deprecated(uniform,\n          'use picking shader module and Model class updateModuleSettings()')();\n      }\n    });\n  }\n\n  // Refreshes animated uniforms, attempting to get animated props from animationLoop if registered\n  _refreshAnimationProps(animationProps) {\n    // Try to read animationProps\n    animationProps = animationProps || (this.animationLoop && this.animationLoop.animationProps);\n    this._setAnimationProps(animationProps);\n  }\n\n  // Generates and sets uniform values based on new animationProps\n  _setAnimationProps(animationProps) {\n    if (this.animated) {\n      assert(animationProps, 'Model.draw(): animated uniforms but no animationProps');\n      const animatedUniforms = this._evaluateAnimateUniforms(animationProps);\n      this.program.setUniforms(animatedUniforms, {}, () => {\n        // if something changed\n        this._checkForDeprecatedUniforms(animatedUniforms);\n        this.setNeedsRedraw();\n      });\n    }\n  }\n\n  // Calculate new values for any function uniforms based on supplied animationProps\n  _evaluateAnimateUniforms(animationProps) {\n    if (!this.animated) {\n      return {};\n    }\n    const animatedUniforms = {};\n    for (const uniformName in this.animatedUniforms) {\n      const valueFunction = this.animatedUniforms[uniformName];\n      animatedUniforms[uniformName] = valueFunction(animationProps);\n    }\n    return animatedUniforms;\n  }\n\n  // Extracts a list of function valued uniforms, so we can update them before each draw call\n  // Also removes such uniforms from the returned list\n  _extractAnimatedUniforms(uniforms) {\n    let foundAnimated = false;\n\n    // Keep our animatedUniforms map up-to-date\n    for (const uniformName in uniforms) {\n      const newValue = uniforms[uniformName];\n      if (typeof newValue === 'function') {\n        this.animatedUniforms[uniformName] = newValue;\n        foundAnimated = true;\n      } else {\n        delete this.animatedUniforms[uniformName];\n      }\n    }\n\n    // Update animated flag: `Model` is animated if any uniforms are animated (i.e. functions)\n    this.animated = !isObjectEmpty(this.animatedUniforms);\n\n    if (!foundAnimated) {\n      return uniforms;\n    }\n\n    // If animated uniforms were found, remove them from ordinary uniform list\n    // `Program` class can't (and shouldn't) handle function valued uniforms\n    const staticUniforms = {};\n    for (const uniformName in uniforms) {\n      if (!this.animatedUniforms[uniformName]) {\n        staticUniforms[uniformName] = uniforms[uniformName];\n      }\n    }\n    return staticUniforms;\n  }\n\n  // Transform Feedback\n\n  _setFeedbackBuffers(feedbackBuffers = {}) {\n    // Avoid setting needsRedraw if no feedbackBuffers\n    if (isObjectEmpty(feedbackBuffers)) {\n      return this;\n    }\n\n    const {gl} = this.program;\n    this.transformFeedback = this.transformFeedback || new TransformFeedback(gl, {\n      program: this.program\n    });\n\n    this.transformFeedback.setBuffers(feedbackBuffers);\n\n    this.setNeedsRedraw();\n\n    return this;\n  }\n\n  // Timer Queries\n\n  _timerQueryStart() {\n    if (this.timerQueryEnabled === true) {\n      if (!this.timeElapsedQuery) {\n        this.timeElapsedQuery = new Query(this.gl);\n      }\n      if (this.lastQueryReturned) {\n        this.lastQueryReturned = false;\n        this.timeElapsedQuery.beginTimeElapsedQuery();\n      }\n    }\n  }\n\n  _timerQueryEnd() {\n    if (this.timerQueryEnabled === true) {\n      this.timeElapsedQuery.end();\n      // TODO: Skip results if 'gl.getParameter(this.ext.GPU_DISJOINT_EXT)' returns false\n      // should this be incorporated into Query object?\n      if (this.timeElapsedQuery.isResultAvailable()) {\n        this.lastQueryReturned = true;\n        const elapsedTime = this.timeElapsedQuery.getResult();\n\n        // Update stats (e.g. for seer)\n        this.stats.lastFrameTime = elapsedTime;\n        this.stats.accumulatedFrameTime += elapsedTime;\n        this.stats.profileFrameCount++;\n        this.stats.averageFrameTime =\n          this.stats.accumulatedFrameTime / this.stats.profileFrameCount;\n\n        // Log stats\n        log.log(LOG_DRAW_PRIORITY, `\\\nGPU time ${this.program.id}: ${this.stats.lastFrameTime}ms \\\naverage ${this.stats.averageFrameTime}ms \\\naccumulated: ${this.stats.accumulatedFrameTime}ms \\\ncount: ${this.stats.profileFrameCount}`\n        )();\n      }\n    }\n  }\n\n  // Makes sure buffers are created for all attributes\n  // and that the program is updated with those buffers\n  // TODO - do we need the separation between \"attributes\" and \"buffers\"\n  // couldn't apps just create buffers directly?\n  _createBuffersFromAttributeDescriptors(attributes) {\n    const {program: {gl}} = this;\n\n    // const attributes = {};\n    const buffers = {};\n\n    for (const attributeName in attributes) {\n\n      const descriptor = attributes[attributeName];\n\n      let attribute = this._attributes[attributeName];\n\n      if (descriptor instanceof Attribute) {\n        attribute = descriptor;\n      } else if (descriptor instanceof Buffer) {\n        attribute = attribute || new Attribute(gl, Object.assign({}, descriptor.layout, {\n          id: attributeName\n        }));\n        attribute.update({buffer: descriptor});\n      } else if (attribute) {\n        attribute.update(descriptor);\n      } else {\n        attribute = new Attribute(gl, Object.assign({}, descriptor, {\n          id: attributeName\n        }));\n      }\n\n      this._attributes[attributeName] = attribute;\n      buffers[attributeName] = attribute.getValue();\n    }\n\n    return buffers;\n  }\n\n  _logDrawCallStart(priority) {\n    const logDrawTimeout = priority > 3 ? 0 : LOG_DRAW_TIMEOUT;\n    if (log.priority < priority || (Date.now() - this.lastLogTime < logDrawTimeout)) {\n      return undefined;\n    }\n\n    this.lastLogTime = Date.now();\n\n    log.group(LOG_DRAW_PRIORITY, `>>> DRAWING MODEL ${this.id}`, {collapsed: log.priority <= 2})();\n\n    return priority;\n  }\n\n  _logDrawCallEnd(priority, vertexArray, uniforms, framebuffer) {\n    if (priority === undefined) {\n      return;\n    }\n\n    const attributeTable = vertexArray._getDebugTable({\n      header: `${this.id} attributes`,\n      attributes: this._attributes\n    });\n\n    const {table: uniformTable, unusedTable, unusedCount} = getUniformsTable({\n      header: `${this.id} uniforms`,\n      program: this.program,\n      uniforms: Object.assign({}, this.program.uniforms, uniforms)\n    });\n\n    // log missing uniforms\n    const {table: missingTable, count: missingCount} = getUniformsTable({\n      header: `${this.id} uniforms`,\n      program: this.program,\n      uniforms: Object.assign({}, this.program.uniforms, uniforms),\n      undefinedOnly: true\n    });\n\n    if (missingCount > 0) {\n      log.log('MISSING UNIFORMS', Object.keys(missingTable))();\n      // log.table(priority, missingTable)();\n    }\n    if (unusedCount > 0) {\n      log.log('UNUSED UNIFORMS', Object.keys(unusedTable))();\n      // log.log(priority, 'Unused uniforms ', unusedTable)();\n    }\n\n    log.table(priority, attributeTable)();\n\n    log.table(priority, uniformTable)();\n\n    logModel(this, uniforms);\n\n    if (framebuffer) {\n      framebuffer.log({priority: LOG_DRAW_PRIORITY, message: `Rendered to ${framebuffer.id}`});\n    }\n\n    log.groupEnd(LOG_DRAW_PRIORITY, `>>> DRAWING MODEL ${this.id}`)();\n  }\n}\n"],"file":"model.js"}