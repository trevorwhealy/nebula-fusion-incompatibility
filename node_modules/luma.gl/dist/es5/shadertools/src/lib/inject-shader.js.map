{"version":3,"sources":["../../../../../src/shadertools/src/lib/inject-shader.js"],"names":["MODULE_INJECTORS","VERTEX_SHADER","MODULE_INJECTORS_VS","FRAGMENT_SHADER","MODULE_INJECTORS_FS","REGEX_DECLARATIONS","REGEX_START_OF_MAIN","REGEX_END_OF_MAIN","injectShader","source","type","inject","injectStandardStubs","isVertex","key","fragment","replace","match"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEA;AACA,IAAMA,+EACHC,wBADG,EACaC,oCADb,sCAEHC,0BAFG,EAEeC,oCAFf,qBAAN;AAKA,IAAMC,qBAAqB,sBAA3B,C,CAAmD;;AACnD,IAAMC,sBAAsB,2BAA5B,C,CAAyD;;AACzD,IAAMC,oBAAoB,aAA1B,C,CAAyC;AAEzC;AACA;;AACA;;AACe,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,IAA9B,EAAoCC,MAApC,EAA4CC,mBAA5C,EAAiE;AAC9E,MAAMC,WAAWH,SAAST,wBAA1B;;AAD8E,6BAGnEa,GAHmE;AAI5E,QAAMC,WAAWJ,OAAOG,GAAP,CAAjB;;AACA,YAAQA,GAAR;AACA;AACA,WAAK,UAAL;AACE,YAAID,QAAJ,EAAc;AACZJ,mBAASA,OAAOO,OAAP,CAAeX,kBAAf,EAAmC;AAAA,mBAASY,QAAQF,QAAjB;AAAA,WAAnC,CAAT;AACD;;AACD;AACF;;AACA,WAAK,gBAAL;AACE,YAAIF,QAAJ,EAAc;AACZJ,mBAASA,OAAOO,OAAP,CAAeV,mBAAf,EAAoC;AAAA,mBAASW,QAAQF,QAAjB;AAAA,WAApC,CAAT;AACD;;AACD;;AACF,WAAK,cAAL;AACE,YAAIF,QAAJ,EAAc;AACZJ,mBAASA,OAAOO,OAAP,CAAeT,iBAAf,EAAkC;AAAA,mBAASQ,WAAWE,KAApB;AAAA,WAAlC,CAAT;AACD;;AACD;;AACF,WAAK,UAAL;AACE,YAAI,CAACJ,QAAL,EAAe;AACbJ,mBAASA,OAAOO,OAAP,CAAeX,kBAAf,EAAmC;AAAA,mBAASY,QAAQF,QAAjB;AAAA,WAAnC,CAAT;AACD;;AACD;;AACF,WAAK,gBAAL;AACE,YAAI,CAACF,QAAL,EAAe;AACbJ,mBAASA,OAAOO,OAAP,CAAeV,mBAAf,EAAoC;AAAA,mBAASW,QAAQF,QAAjB;AAAA,WAApC,CAAT;AACD;;AACD;;AACF,WAAK,cAAL;AACE,YAAI,CAACF,QAAL,EAAe;AACbJ,mBAASA,OAAOO,OAAP,CAAeT,iBAAf,EAAkC;AAAA,mBAASQ,WAAWE,KAApB;AAAA,WAAlC,CAAT;AACD;;AACD;;AACF;AACE;AACAR,iBAASA,OAAOO,OAAP,CAAeF,GAAf,EAAoB;AAAA,iBAASG,QAAQF,QAAjB;AAAA,SAApB,CAAT;AAnCF;AAL4E;;AAG9E,OAAK,IAAMD,GAAX,IAAkBH,MAAlB,EAA0B;AAAA,UAAfG,GAAe;AAuCzB,GA1C6E,CA4C9E;;;AACA,MAAIF,mBAAJ,EAAyB;AACvBH,aAASA,OAAOO,OAAP,CAAe,OAAf,EAAwB;AAAA,aAASC,QAAQjB,iBAAiBU,IAAjB,CAAjB;AAAA,KAAxB,CAAT;AACD;;AAED,SAAOD,MAAP;AACD;AACD","sourcesContent":["import {MODULE_INJECTORS_VS, MODULE_INJECTORS_FS} from '../modules/module-injectors';\nimport {VERTEX_SHADER, FRAGMENT_SHADER} from './constants';\n\n// TODO - experimental\nconst MODULE_INJECTORS = {\n  [VERTEX_SHADER]: MODULE_INJECTORS_VS,\n  [FRAGMENT_SHADER]: MODULE_INJECTORS_FS\n};\n\nconst REGEX_DECLARATIONS = /^(#version[^\\n]*\\n)?/; // Beginning of file\nconst REGEX_START_OF_MAIN = /main\\s*\\([^\\)]*\\)\\s*\\{\\n?/; // Beginning of main\nconst REGEX_END_OF_MAIN = /}\\n?[^{}]*$/; // End of main, assumes main is last function\n\n// A minimal shader injection/templating system.\n// RFC: https://github.com/uber/luma.gl/blob/master/dev-docs/RFCs/v6.0/shader-injection-rfc.md\n/* eslint-disable complexity */\nexport default function injectShader(source, type, inject, injectStandardStubs) {\n  const isVertex = type === VERTEX_SHADER;\n\n  for (const key in inject) {\n    const fragment = inject[key];\n    switch (key) {\n    // declarations are injected at beginning of shader\n    case 'vs:#decl':\n      if (isVertex) {\n        source = source.replace(REGEX_DECLARATIONS, match => match + fragment);\n      }\n      break;\n    // main code is injected at the end of main function\n    case 'vs:#main-start':\n      if (isVertex) {\n        source = source.replace(REGEX_START_OF_MAIN, match => match + fragment);\n      }\n      break;\n    case 'vs:#main-end':\n      if (isVertex) {\n        source = source.replace(REGEX_END_OF_MAIN, match => fragment + match);\n      }\n      break;\n    case 'fs:#decl':\n      if (!isVertex) {\n        source = source.replace(REGEX_DECLARATIONS, match => match + fragment);\n      }\n      break;\n    case 'fs:#main-start':\n      if (!isVertex) {\n        source = source.replace(REGEX_START_OF_MAIN, match => match + fragment);\n      }\n      break;\n    case 'fs:#main-end':\n      if (!isVertex) {\n        source = source.replace(REGEX_END_OF_MAIN, match => fragment + match);\n      }\n      break;\n    default:\n      // inject code after key, leaving key in place\n      source = source.replace(key, match => match + fragment);\n    }\n  }\n\n  // Finally, if requested, insert an automatic module injector chunk\n  if (injectStandardStubs) {\n    source = source.replace('}\\s*$', match => match + MODULE_INJECTORS[type]);\n  }\n\n  return source;\n}\n/* eslint-enable complexity */\n"],"file":"inject-shader.js"}