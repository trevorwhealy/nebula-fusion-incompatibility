{"version":3,"sources":["../../../src/webgl-utils/typed-array-utils.js"],"names":["ERR_TYPE_DEDUCTION","getGLTypeFromTypedArray","arrayOrType","type","ArrayBuffer","isView","constructor","Float32Array","GL","FLOAT","Uint16Array","UNSIGNED_SHORT","Uint32Array","UNSIGNED_INT","Uint8Array","UNSIGNED_BYTE","Uint8ClampedArray","Int8Array","BYTE","Int16Array","SHORT","Int32Array","INT","Error","getTypedArrayFromGLType","glType","clamped","UNSIGNED_SHORT_5_6_5","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","flipRows","data","width","height","bytesPerPixel","temp","bytesPerRow","y","topOffset","bottomOffset","set","subarray","copyWithin","scalePixels","newWidth","Math","round","newHeight","newData","x","c"],"mappings":"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","sourcesContent":["import GL from '../constants';\n\nconst ERR_TYPE_DEDUCTION = 'Failed to deduce GL constant from typed array';\n\n// Converts TYPED ARRAYS to corresponding GL constant\n// Used to auto deduce gl parameter types\nexport function getGLTypeFromTypedArray(arrayOrType) {\n  // If typed array, look up constructor\n  const type = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n  switch (type) {\n  case Float32Array: return GL.FLOAT;\n  case Uint16Array: return GL.UNSIGNED_SHORT;\n  case Uint32Array: return GL.UNSIGNED_INT;\n  case Uint8Array: return GL.UNSIGNED_BYTE;\n  case Uint8ClampedArray: return GL.UNSIGNED_BYTE;\n  case Int8Array: return GL.BYTE;\n  case Int16Array: return GL.SHORT;\n  case Int32Array: return GL.INT;\n  default:\n    throw new Error(ERR_TYPE_DEDUCTION);\n  }\n}\n\n// Converts GL constant to corresponding TYPED ARRAY\n// Used to auto deduce gl parameter types\n\n/* eslint-disable complexity */\nexport function getTypedArrayFromGLType(glType, {clamped = true} = {}) {\n  // Sorted in some order of likelihood to reduce amount of comparisons\n  switch (glType) {\n  case GL.FLOAT:\n    return Float32Array;\n  case GL.UNSIGNED_SHORT:\n  case GL.UNSIGNED_SHORT_5_6_5:\n  case GL.UNSIGNED_SHORT_4_4_4_4:\n  case GL.UNSIGNED_SHORT_5_5_5_1:\n    return Uint16Array;\n  case GL.UNSIGNED_INT:\n    return Uint32Array;\n  case GL.UNSIGNED_BYTE:\n    return clamped ? Uint8ClampedArray : Uint8Array;\n  case GL.BYTE:\n    return Int8Array;\n  case GL.SHORT:\n    return Int16Array;\n  case GL.INT:\n    return Int32Array;\n  default:\n    throw new Error('Failed to deduce typed array type from GL constant');\n  }\n}\n/* eslint-enable complexity */\n\n// Flip rows (can be used on arrays returned from `Framebuffer.readPixels`)\n// https://stackoverflow.com/questions/41969562/\n// how-can-i-flip-the-result-of-webglrenderingcontext-readpixels\nexport function flipRows({data, width, height, bytesPerPixel = 4, temp}) {\n  const bytesPerRow = width * bytesPerPixel;\n\n  // make a temp buffer to hold one row\n  temp = temp || new Uint8Array(bytesPerRow);\n  for (let y = 0; y < height / 2; ++y) {\n    const topOffset = y * bytesPerRow;\n    const bottomOffset = (height - y - 1) * bytesPerRow;\n    // make copy of a row on the top half\n    temp.set(data.subarray(topOffset, topOffset + bytesPerRow));\n    // copy a row from the bottom half to the top\n    data.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);\n    // copy the copy of the top half row to the bottom half\n    data.set(temp, bottomOffset);\n  }\n}\n\nexport function scalePixels({data, width, height}) {\n  const newWidth = Math.round(width / 2);\n  const newHeight = Math.round(height / 2);\n  const newData = new Uint8Array(newWidth * newHeight * 4);\n  for (let y = 0; y < newHeight; y++) {\n    for (let x = 0; x < newWidth; x++) {\n      for (let c = 0; c < 4; c++) {\n        newData[(y * newWidth + x) * 4 + c] = data[(y * 2 * width + x * 2) * 4 + c];\n      }\n    }\n  }\n  return {data: newData, width: newWidth, height: newHeight};\n}\n"],"file":"typed-array-utils.js"}