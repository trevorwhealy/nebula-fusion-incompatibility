{"version":3,"sources":["../../../src/webgl/accessor.js"],"names":["GL_FLOAT","Accessor","type","size","offset","stride","normalized","integer","instanced","optsList","forEach","_update","opts","combinedOpts","Object","assign","DEFAULTS","target","undefined","divisor","isInstanced","index"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAMA,WAAW,MAAjB;;IAEqBC,Q;;;;;wBAEG;AACpB,aAAO;AACLC,cAAMF,QADD;AAELG,cAAM,CAFD;AAGLC,gBAAQ,CAHH;AAILC,gBAAQ,CAJH;AAKLC,oBAAY,KALP;AAMLC,iBAAS,KANJ;AAOLC,mBAAW;AAPN,OAAP;AASD;AAED;;;;;;;;;;;;;;;;AAaA,sBAAyB;AAAA;;AAAA;;AAAA,sCAAVC,QAAU;AAAVA,cAAU;AAAA;;AACvBA,aAASC,OAAT,CAAiB;AAAA,aAAQ,MAAKC,OAAL,CAAaC,IAAb,CAAR;AAAA,KAAjB;AACD,G,CAED;;;;;iCACwB;AAAA;;AACtB,UAAMC,eAAeC,OAAOC,MAAP,CAAc,EAAd,EAAkBd,SAASe,QAA3B,EAAqC,IAArC,CAArB;;AADsB,yCAAVP,QAAU;AAAVA,gBAAU;AAAA;;AAEtBA,eAASC,OAAT,CAAiB;AAAA,eAAQ,OAAKC,OAAL,CAAaC,IAAb,EAAmBC,YAAnB,CAAR;AAAA,OAAjB;AACA,aAAOA,YAAP;AACD;;;2BAEMD,I,EAAM;AACX,WAAKD,OAAL,CAAaC,IAAb;;AACA,aAAO,IAAP;AACD;AAED;;;;8BACkC;AAAA,UAA1BA,IAA0B,uEAAnB,EAAmB;AAAA,UAAfK,MAAe,uEAAN,IAAM;;AAChC,UAAIL,KAAKV,IAAL,KAAcgB,SAAlB,EAA6B;AAC3BD,eAAOf,IAAP,GAAcU,KAAKV,IAAnB;AACD;;AACD,UAAIU,KAAKT,IAAL,KAAce,SAAlB,EAA6B;AAC3BD,eAAOd,IAAP,GAAcS,KAAKT,IAAnB;AACD;;AACD,UAAIS,KAAKR,MAAL,KAAgBc,SAApB,EAA+B;AAC7BD,eAAOb,MAAP,GAAgBQ,KAAKR,MAArB;AACD;;AACD,UAAIQ,KAAKP,MAAL,KAAgBa,SAApB,EAA+B;AAC7BD,eAAOZ,MAAP,GAAgBO,KAAKP,MAArB;AACD;;AACD,UAAIO,KAAKN,UAAL,KAAoBY,SAAxB,EAAmC;AACjCD,eAAOX,UAAP,GAAoBM,KAAKN,UAAzB;AACD;;AACD,UAAIM,KAAKL,OAAL,KAAiBW,SAArB,EAAgC;AAC9BD,eAAOV,OAAP,GAAiBK,KAAKL,OAAtB;AACD;;AACD,UAAIK,KAAKO,OAAL,KAAiBD,SAArB,EAAgC;AAC9BD,eAAOE,OAAP,GAAiBP,KAAKO,OAAtB;AACD,OArB+B,CAuBhC;;;AACA,UAAIP,KAAKJ,SAAL,KAAmBU,SAAvB,EAAkC;AAChCD,eAAOE,OAAP,GAAiBP,KAAKJ,SAAL,GAAiB,CAAjB,GAAqB,CAAtC;AACD;;AACD,UAAII,KAAKQ,WAAL,KAAqBF,SAAzB,EAAoC;AAClCD,eAAOE,OAAP,GAAiBP,KAAKQ,WAAL,GAAmB,CAAnB,GAAuB,CAAxC;AACD,OA7B+B,CA8BhC;;;AACA,UAAIR,KAAKS,KAAL,KAAeH,SAAnB,EAA8B;AAC5BD,eAAOI,KAAP,GAAeT,KAAKS,KAAL,GAAa,CAAb,GAAiB,CAAhC;AACD;;AACD,aAAOJ,MAAP;AACD;AACD","sourcesContent":["const GL_FLOAT = 0x1406;\n\nexport default class Accessor {\n\n  static get DEFAULTS() {\n    return {\n      type: GL_FLOAT,\n      size: 1,\n      offset: 0,\n      stride: 0,\n      normalized: false,\n      integer: false,\n      instanced: 0\n    };\n  }\n\n  /**\n   * Store characteristics of a data accessor\n   * This data can be used when updating vertex attributes with the associated buffer,\n   * freeing the application from keeping track of this metadata.\n   * @class\n   * {type, size, offset, stride, normalized, integer, instanced}\n   * @param {GLuint} size - number of values per element (1-4)\n   * @param {GLuint} type - type of values (e.g. gl.FLOAT)\n   * @param {GLbool} normalized=false - normalize integers to [-1,1] or [0,1]\n   * @param {GLuint} integer=false - WebGL2 only, int-to-float conversion\n   * @param {GLuint} stride=0 - supports strided arrays\n   * @param {GLuint} offset=0 - supports strided arrays\n   */\n  constructor(...optsList) {\n    optsList.forEach(opts => this._update(opts));\n  }\n\n  // Combine with other accessors\n  getOptions(...optsList) {\n    const combinedOpts = Object.assign({}, Accessor.DEFAULTS, this);\n    optsList.forEach(opts => this._update(opts, combinedOpts));\n    return combinedOpts;\n  }\n\n  update(opts) {\n    this._update(opts);\n    return this;\n  }\n\n  /* eslint-disable complexity */\n  _update(opts = {}, target = this) {\n    if (opts.type !== undefined) {\n      target.type = opts.type;\n    }\n    if (opts.size !== undefined) {\n      target.size = opts.size;\n    }\n    if (opts.offset !== undefined) {\n      target.offset = opts.offset;\n    }\n    if (opts.stride !== undefined) {\n      target.stride = opts.stride;\n    }\n    if (opts.normalized !== undefined) {\n      target.normalized = opts.normalized;\n    }\n    if (opts.integer !== undefined) {\n      target.integer = opts.integer;\n    }\n    if (opts.divisor !== undefined) {\n      target.divisor = opts.divisor;\n    }\n\n    // Backwards compatibility\n    if (opts.instanced !== undefined) {\n      target.divisor = opts.instanced ? 1 : 0;\n    }\n    if (opts.isInstanced !== undefined) {\n      target.divisor = opts.isInstanced ? 1 : 0;\n    }\n    // TODO - should this be supported?\n    if (opts.index !== undefined) {\n      target.index = opts.index ? 1 : 0;\n    }\n    return target;\n  }\n  /* eslint-enable complexity */\n}\n"],"file":"accessor.js"}