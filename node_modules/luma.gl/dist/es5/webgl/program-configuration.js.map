{"version":3,"sources":["../../../src/webgl/program-configuration.js"],"names":["ProgramConfiguration","program","attributeInfos","attributeInfosByName","varyings","varyingsByName","Object","seal","_readAttributesFromProgram","_readVaryingsFromProgram","locationOrName","location","Number","isFinite","attributeInfo","getAttributeInfo","varying","getVaryingInfo","name","compositeType","size","type","components","accessor","Accessor","_inferProperties","push","test","merge","instanced","gl","count","getProgramParameter","handle","ACTIVE_ATTRIBUTES","index","getActiveAttrib","getAttribLocation","_addAttribute","sort","a","b","TRANSFORM_FEEDBACK_VARYINGS","getTransformFeedbackVarying","_addVarying"],"mappings":"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","sourcesContent":["// Contains metadata describing attribute configurations for a program's shaders\n// Much of this is automatically extracted from shaders after program linking\nimport {isWebGL2} from '../webgl-utils';\nimport {decomposeCompositeGLType} from '../webgl-utils/attribute-utils';\nimport Accessor from './accessor';\n\nexport default class ProgramConfiguration {\n\n  constructor(program) {\n    this.attributeInfos = [];\n    this.attributeInfosByName = {};\n    this.varyings = [];\n    this.varyingsByName = {};\n    Object.seal(this);\n    this._readAttributesFromProgram(program);\n    this._readVaryingsFromProgram(program);\n  }\n\n  getAttributeInfo(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return this.attributeInfos[location];\n    }\n    return this.attributeInfosByName[locationOrName] || null;\n  }\n\n  getLocation(locationOrName) {\n    const attributeInfo = this.getAttributeInfo(locationOrName);\n    return attributeInfo ? attributeInfo.location : -1;\n  }\n\n  getVaryingInfo(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return this.varyings[location];\n    }\n    return this.varyingsByName[locationOrName] || null;\n  }\n\n  getVaryingIndex(locationOrName) {\n    const varying = this.getVaryingInfo();\n    return varying ? varying.location : -1;\n  }\n\n  _addAttribute(location, name, compositeType, size) {\n    const {type, components} = decomposeCompositeGLType(compositeType);\n    const accessor = new Accessor({type, size: size * components});\n    this._inferProperties(name, accessor);\n\n    const attributeInfo = {location, name, accessor}; // Base values\n    this.attributeInfos.push(attributeInfo);\n    this.attributeInfosByName[attributeInfo.name] = attributeInfo; // For quick name based lookup\n  }\n\n  // Extract additional attribute metadata from shader names (based on attribute naming conventions)\n  _inferProperties(location, name, accessor) {\n    if ((/instance/i).test(name)) {\n      // Any attribute containing the word \"instance\" will be assumed to be instanced\n      accessor.merge({instanced: true});\n    }\n  }\n\n  _addVarying(location, name, compositeType, size) {\n    const {type, components} = decomposeCompositeGLType(compositeType);\n    const accessor = new Accessor({type, size: size * components});\n\n    const varying = {location, name, accessor}; // Base values\n    this.varyings.push(varying);\n    this.varyingsByName[varying.name] = varying; // For quick name based lookup\n  }\n\n  // linkProgram needs to have been called, although linking does not need to have been successful\n  _readAttributesFromProgram(program) {\n    const {gl} = program;\n    const count = gl.getProgramParameter(program.handle, gl.ACTIVE_ATTRIBUTES);\n\n    for (let index = 0; index < count; index++) {\n      const {name, type, size} = gl.getActiveAttrib(program.handle, index);\n      const location = gl.getAttribLocation(program.handle, name);\n      this._addAttribute(location, name, type, size);\n    }\n\n    this.attributeInfos.sort((a, b) => a.location - b.location);\n  }\n\n  // linkProgram needs to have been called, although linking does not need to have been successful\n  _readVaryingsFromProgram(program) {\n    const {gl} = program;\n    if (!isWebGL2(gl)) {\n      return;\n    }\n\n    const count = gl.getProgramParameter(program.handle, gl.TRANSFORM_FEEDBACK_VARYINGS);\n    for (let location = 0; location < count; location++) {\n      const {name, type, size} = gl.getTransformFeedbackVarying(program.handle, location);\n      this._addVarying(location, name, type, size);\n    }\n\n    this.varyings.sort((a, b) => a.location - b.location);\n  }\n}\n"],"file":"program-configuration.js"}